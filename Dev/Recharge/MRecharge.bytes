--@RefType [Dev.Player.MPlayer.bytes#_M]
local MPlayer = JRequire "Dev.Player.MPlayer"

local _M = {}
local _P = {}

_M.VipData = 
{
	level = 0,
	exp = 0,
}

--设置spid对应充值表内容
function _M.FilterCsvRechargeSpid()
	if Csv.Recharge == nil then
		error("MRecharge::FilterCsvRechargeSpid Recharge Csv = nil")
		return
	end
	local specialRechargeLimit = Csv.Const(88)
	local csvRechargeDefault = {}
	local csvRechargeCopy = {}
	for _, csvValue in pairs(Csv.Recharge) do
		if csvValue.spid then
			for _, spid in ipairs(csvValue.spid) do
				if GameSetting.Spid == spid then
					csvRechargeCopy[#csvRechargeCopy + 1] = csvValue
				end
			end
		elseif csvValue.spid == nil and (GameSetting.Platform == Define.PlatformType.AndroidPhone or 
				csvValue.cost <= specialRechargeLimit) then
			csvRechargeDefault[#csvRechargeDefault + 1] = csvValue
		end
	end
	if #csvRechargeCopy == 0 then
		_M.CsvRecharge = csvRechargeDefault
	else
		_M.CsvRecharge = csvRechargeCopy
	end
	table.sort(_M.CsvRecharge, function(left, right)
		return left.id < right.id
	end)
	_P.SetCsvRechargeSdkProductId()
end

function _P.SetCsvRechargeSdkProductId()
	_M.CsvRechargeIDToProductID = {}
	local isReplace = Csv.ProductIDReplace[GameSetting.PackageName]
	for _, csvValue in ipairs(_M.CsvRecharge) do
		local sdkProductIdPrefix = LuaUtil.StringSplit(csvValue.sdkProductId, ",")
		local sdkProductId
		if sdkProductIdPrefix and #sdkProductIdPrefix > 1 then
			for _, value in ipairs(sdkProductIdPrefix) do
				local spidAndProID = LuaUtil.StringSplit(value, ":")
				if spidAndProID[1] and spidAndProID[1] == GameSetting.Spid and spidAndProID[2] then
					sdkProductId = spidAndProID[2]
				end
			end
			if sdkProductId and isReplace then
				sdkProductIdPrefix = LuaUtil.StringSplit(sdkProductId, "%.")
				if #sdkProductIdPrefix > 1 then
					local endString = sdkProductIdPrefix[#sdkProductIdPrefix]
					sdkProductId = GameSetting.PackageName .. "." .. endString
				end
			end
		end
		if sdkProductId then
			csvValue.sdkProductId = sdkProductId
		end
		_M.CsvRechargeIDToProductID[csvValue.id] = csvValue.sdkProductId
	end
end

function _M.GetCsvRechargeSdkProductId(csvID)
	local sdkProductID = _M.CsvRechargeIDToProductID[csvID]
	if sdkProductID == nil then
		sdkProductID = ""
	end
	return sdkProductID
end

function _M.SetVipData(level, exp)
	if nil ~= MPlayer and nil ~= MPlayer.PlayerInfo then
		MPlayer.PlayerInfo.vip = level
	end
	_M.VipData.level = level
	_M.VipData.exp = exp
end

function _M.SetProductData(data)
	_M.ProductData = {}
	for key, value in pairs(data) do
		if nil ~= value.productId and nil ~= value.buyTimes then
			_M.ProductData[value.productId] = value.buyTimes
	    end
	end
end

function _M.GetProductBuyTime(productId)
	if nil ~= _M.ProductData and nil ~= _M.ProductData[productId] then
		return _M.ProductData[productId] 
	end
	return 0
end

function _M.IsFirstBuy(productId)
	return 0 == _M.GetProductBuyTime(productId)
end

function _M.Clean()
	_M.VipData.level = 0
	_M.VipData.exp = 0
	_M.ProductData = {}
end

return _M
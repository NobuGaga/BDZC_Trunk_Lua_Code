----------------------文件引用--------------------------
--@RefType [Dev.Activity.MActivity.bytes#_M]
local MActivity = JRequire "Dev.Activity.MActivity"
--@RefType [Dev.CrossActivity.MCrossActivity.bytes#_M]
local MCrossActivity = JRequire "Dev.CrossActivity.MCrossActivity"
--@RefType [Dev.Rank.CRank.bytes#_M]
local CRank = JRequire "Dev.Rank.CRank"
--@RefType [Dev.Main.CMain.bytes#_M]
local CMain = JRequire "Dev.Main.CMain"
--@RefType [Dev.Player.HeartBeat.bytes#_M]
local HeartBeat = JRequire "Dev.Player.HeartBeat"

--外部接口模块 *** 只放置共有接口, 禁止放变量
local _M = {}

------------------------------通用接口------------------------------
function _M.RefreshData(actType, data)
	for _, originActData in pairs(data) do
		_M.RefreshOneActData(actType, originActData)
	end
	--检查小红点
	_M.CheckRepoint()
	--刷新界面
	WindowMgr.Call("URankReward", "OnRefreshView", Define.SysId.CrossRankReward)
	WindowMgr.Call("URankRewardAct", "OnRefreshView", Define.SysId.CrossRankReward)
end

function _M.RefreshOneActData(actType, originData, isRefreshOne)
	if originData.state == MActivity.ActivityState.Close then
		--关闭入口
		MCrossActivity.ClearForId(originData.actId)
		CMain.UpdateRedpoint(false, Define.SysId.CrossRankReward, originData.actId)
		if MCrossActivity.GetListFromType(actType) == nil then
			WindowMgr.Call("UMain", "RefreshTopBtns")
		end
	else
		local actData = MCrossActivity.GetFromId(originData.actId)
		if actData then
			_M.RefreshServerData(actData, originData)
		else
			actData = _M.InitActivityData(actType, originData)
			local csvValue = Csv.CrossActivityRank[actData.actId]
			if csvValue then
				_M.RefreshActivityCsvData(actData, csvValue)
				CRank.GetRankList(actData.rankType, false)
			end
		end
	end
	if isRefreshOne then
		--检查小红点
		_M.CheckRepoint()
		--刷新界面
		WindowMgr.Call("URankReward", "OnRefreshView", Define.SysId.CrossRankReward)
		WindowMgr.Call("URankRewardAct", "OnRefreshView", Define.SysId.CrossRankReward)
	end
end

function _M.InitActivityData(actType, originData)
	if Csv.CrossActivity == nil or Csv.CrossActivity[originData.actId] == nil then
		return
	end
	local csvCrossActivity = Csv.CrossActivity[originData.actId]
	
	local state = {}
	state.state = originData.state
	state.startTime = csvCrossActivity.beginTime
	state.endTime = csvCrossActivity.closeTime
	state.lefttime = csvCrossActivity.setTime
	local actData = {}
	actData.actId = originData.actId
	actData.actType = actType
	actData.state = state
	actData.settleTime = csvCrossActivity.setTime - csvCrossActivity.beginTime
	actData.selfRank = 0
	actData.GetState = originData.GetState
	local csvActivity = Csv.CrossActivity[actData.actId]
	if csvActivity and csvActivity.rankShowTime then
		actData.rankShowTime = actData.state.lefttime - csvActivity.rankShowTime
	end
	return actData
end

function _M.RefreshServerData(actData, originData)
	actData.state.state = originData.state
	actData.GetState = originData.GetState
	return actData
end

function _M.RefreshActivityCsvData(actData, csvValue)
	actData.sort = csvValue.sort
	actData.icon = csvValue.icon
	actData.text = csvValue.text
	actData.joinText = csvValue.text2
	actData.title1 = csvValue.title1
	actData.title2 = csvValue.title2
	actData.textNum = csvValue.textNum
	actData.rankType = csvValue.rankType
	actData.rankTitle = csvValue.rankTitle
	actData.rankName = csvValue.rankNameTitle
	_M.RefreshActivityRewardData(actData, csvValue)
end

function _M.RefreshActivityRewardData(actData, csvValue)
	if csvValue.rewardTitle and csvValue.reward and csvValue.to then
		actData.list = {}
		for key, value in pairs(csvValue.rewardTitle) do
			actData.list[key] = {}
			actData.list[key].title = value
			actData.maxRewardRank = 0
			if csvValue.to[key] > actData.maxRewardRank then
				actData.maxRewardRank = csvValue.to[key]
			end
			actData.list[key].rewards = {}
			if csvValue.reward[key] then
				for rewardKey, rewardValue in pairs(csvValue.reward[key]) do
					local one = {
						key = rewardValue[1],
						value = rewardValue[2]
					}
					actData.list[key].rewards[rewardKey] = one
				end
			else
				error("error csv data, activity ID", actData.actId)
			end
		end
		--更新数据层
		MCrossActivity.UpdateActivityData(actData.actId, actData.actType, actData)
	end
end

function _M.CheckRepoint()
	local listData = MCrossActivity.GetListFromType(Define.CrossActivityType.CrossRankReward)
	if listData == nil then
		return
	end
	for index, data in pairs(listData) do
		if (MActivity.ActivityState.Doing == data.state.state or
			MActivity.ActivityState.Finish == data.state.state) then
			local isRedPoint = MActivity.RewardGetState.CanGet == data.GetState
			if MCrossActivity.UpdataActivityRedpoint(data.actId, 1, isRedPoint) then
				CMain.UpdateRedpoint(isRedPoint, Define.SysId.CrossRankReward, data.actId)
			end
		end
	end
end

function _M.OnDayout()
	local listData = MCrossActivity.GetListFromType(Define.CrossActivityType.CrossRankReward)
	local isNeedRefresh = false
	if listData == nil then
		return
	end
	for index, data in pairs(listData) do
		if data.state.lefttime and data.state.lefttime - HeartBeat.ServSecond() <= 1 then
			local isOutRank = data.selfRank > data.maxRewardRank or 0 == data.selfRank
			if MActivity.RewardGetState.Geted ~= data.GetState and not isOutRank then
				data.GetState = MActivity.RewardGetState.CanGet
				isNeedRefresh = true
			end
		end
		CRank.GetRankList(data.rankType, false)
	end
	if isNeedRefresh then
		_M.CheckRepoint()
	end
end

function _M.OnGetReward(getData, actData)
	--冲榜活动领取奖励返回
	if getData.isGeted then
		actData.GetState = MActivity.RewardGetState.Geted
		--检查小红点
		_M.CheckRepoint()
		--界面表现
		WindowMgr.Call("URankRewardAct", "RefreshGetState", getData, Define.SysId.CrossRankReward)
	end
end

return _M
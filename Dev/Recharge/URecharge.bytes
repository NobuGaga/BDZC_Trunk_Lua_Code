----------------------文件引用--------------------------
--@RefType [Libs.WindowMgr.WindowBase.bytes#_M]
local WindowBase = JRequire "Libs.WindowMgr.WindowBase"
--@RefType [Libs.Sound.SoundMgr.bytes#_M]
local SoundMgr = JRequire "Libs.Sound.SoundMgr"
--@RefType [Dev.Recharge.MRecharge.bytes#_M]
local MRecharge = JRequire "Dev.Recharge.MRecharge"
--@RefType [Dev.Recharge.CRecharge.bytes#_M]
local CRecharge = JRequire "Dev.Recharge.CRecharge"
--@RefType [Dev.Bag.MBag.bytes#_M]
local MBag = JRequire "Dev.Bag.MBag"
--@RefType [Dev.Main.MMain.bytes#_M]
local MMain = JRequire "Dev.Main.MMain"
--@RefType [SDK.SDKMgr.bytes#_M]
local SDKMgr = JRequire "SDK.SDKMgr"

----------------------CS类引用--------------------------

----------------------常量定义--------------------------
local VipBarUpTime = 0.3
--Vip特权每行文字高度偏移调整纸
local VipTextRowHeightArg = 5.5

local NormalMoudleName = "M_Recharge_VIP"
local iOSMoudleName = "M_NewRecharge"
local NormalItemName = "M_Recharge_Item"
local iOSItemName = "M_NewRecharge_Item"

local ColorGray = Color(166 / 255, 164 / 255, 164 / 255, 1)
local ColorBlack = Color(0.5, 0.5, 0.5, 1)
local ColorWhite = Color(1, 1, 1, 1)

local RechargeFuncID = 10801
local VipFuncID = 10802

local ImageDatas = {
	{
		nodeName = "BG",
		imageSize = Vector2(512, 1024),
		iamgeName = "xbcz_001",
	},
	{
		nodeName = "C_Back_Btn",
		imageSize = Vector2(200, 133),
		iamgeName = "xbcz_002",
	},
	{
		nodeName = "ProgressBar",
		imageSize = Vector2(10, 10),
		iamgeName = "xbcz_003",
	},
	{
		nodeName = "BtnCharge",
		imageSize = Vector2(228, 64),
		iamgeName = "xbcz_005",
	},
}
local iOSItemIamgeName = "xbcz_004"
local iOSItemIamgeSize = Vector2(396, 299)
local iOSItemDiamondSize = Vector2(344, 279)

--外部接口模块 *** 只放置共有接口, 禁止放变量
local _M = Class(WindowBase)
--私有函数模块 *** 只放置私有函数, 禁止放变量
local _P = {}
--外部刷新界面模块 *** 放置刷新界面函数, 禁止放变量
local _R = {}

function _M:BeforeDestroy(...) end

--事件派发
function _M:Dispatch(funcName, ...)
	local fun = _R[funcName]
	if fun ~= nil then 
		fun(self, ...)
	end
end

--界面构建
function _M:OnCreate()
	local closeScale = 1.1
	if GameSetting.IsiOSCommit then
		self.moudle = self:CreateMoudle(self._RootNode, iOSMoudleName)
		_P.InitiOSSprite(self)
	else		
		closeScale = 1.2
		self.moudle = self:CreateMoudle(self._RootNode, NormalMoudleName)
		self.moudle:Get("C_Text").Text = Csv.Text("recharge_title")
	end
	self.moudle:Get("C_Back_Btn"):AddOnButton(function()
		SoundMgr.Play(10002)
		self:Destroy()
	end, nil, closeScale)

	self.lastLevel = MRecharge.VipData.level
	_P.InitProgress(self, MRecharge.VipData.exp)

	_P.InitPageButton(self)
end

function _P.InitiOSSprite(self)
	for _, imageData in pairs(ImageDatas) do
		CS.Plugin.LoadStreamingAssets.LoadSprite(CS.GameManager.Inst, GameSetting.GetPngStreamAssetsPath(imageData.iamgeName, "Recharge"), 
												imageData.imageSize.x, imageData.imageSize.y, 
												function (sp)
													if sp then
														self.moudle:Get(imageData.nodeName).Sprite = sp
													end
												end)
	end
end

function _P.InitProgress(self, curExp)
	self.LevelNum = self.moudle:Get("LevelNum")
	self.ProgressBar = self.moudle:Get("ProgressBar")
	self.ProgressBar.FillAmount = 0
	self.ExpText = self.moudle:Get("ExpText")
	self.ExplainText = self.moudle:Get("ExplainText")
	if not GameSetting.IsiOSCommit then
		self.AssetNum = self.moudle:Get("AssetNum")
		self:RegistCallEvent(Define.EventListenId.ItemUpdateEvent, function (eventHandle , itemid , itemcount , isAdd )
			if itemid == Define.AssetsType.Gold then
				self.AssetNum.Text = MBag.GetItemNum(itemid)
			end
		end)
	end
	
	_P.InitMaxVipLevel(self)
	_P.SetText(self, 0, 0, 0)

	local csvVip = Csv.Vip
	if csvVip[self.lastLevel] then
		local maxExp = csvVip[self.lastLevel].upExp
		self.ProgressBar.FillAmount = curExp / maxExp
		_P.SetText(self, self.lastLevel, curExp, maxExp)
	end
end

function _P.InitMaxVipLevel(self)
	local csvVip = Csv.Vip
	self.maxVipLevel = 0
	if csvVip then
		local csvVipCopy = {}
		for id, csvValue in pairs(csvVip) do
			table.insert(csvVipCopy, csvValue)
		end
		table.sort(csvVipCopy, function (left, right)
			return left.level < right.level
		end)
		for id, csvValue in ipairs(csvVipCopy) do
			if self.maxVipLevel < csvValue.level then
				self.maxVipLevel = csvValue.level
			end
		end
	end
end

function _P.SetText(self, level, curExp, maxExp)
	if self.LevelNum.SpriteName then
		self.LevelNum.SpriteName = Csv.Vip[level].icon
	else
		self.LevelNum.Text = level
	end
	if level == self.maxVipLevel then
		self.ExpText.Text = curExp .. '/' .. curExp
		maxExp = curExp
		self.ProgressBar.FillAmount = 1
	else
		self.ExpText.Text = curExp .. '/' .. maxExp
	end
	if curExp < maxExp then
		local csvText
		if GameSetting.IsiOSCommit then
			csvText = "recharge_next_ios"
		else
			csvText = "recharge_next"
		end
		self.ExplainText.Text = Csv.Text(csvText, {num = maxExp - curExp, level = level + 1})
	else
		self.ExplainText.Text = ""
	end
	if self.AssetNum then
		self.AssetNum.Text = MBag.GetItemNum(Define.AssetsType.Gold)
	end
end

function _P.InitPageButton(self)
	local isRechargeOpen = Csv.Func[RechargeFuncID] ~= nil
	local isVipOpen = Csv.Func[VipFuncID] ~= nil
	local BtnPower

	if not GameSetting.IsiOSCommit then
		self.BtnCharge = self.moudle:Get("BtnChargeSelect")
		self.BtnPower = self.moudle:Get("BtnPowerSelect")
		self.BtnCharge.Activity = true
		self.BtnPower.Activity = false

		self.moudle:Get("PowerText").Text = Csv.Text("recharge_power")
		self.moudle:Get("PowerTextSelect").Text = Csv.Text("recharge_power")
		self.moudle:Get("ChargeTextSelect").Text = Csv.Text("recharge_title")

	 	BtnPower = self.moudle:Get("BtnPower")
		BtnPower.Activity = isVipOpen
	end

	self.moudle:Get("ChargeText").Text = Csv.Text("recharge_title")

	_P.InitChargeView(self)

	local BtnCharge = self.moudle:Get("BtnCharge")
	BtnCharge.Activity = isRechargeOpen
	
	if isRechargeOpen and isVipOpen then
		BtnCharge:AddOnButton(function()
			SoundMgr.Play(10001)
			_P.OnClickPage(self, true)
		end)
		BtnPower:AddOnButton(function()
			SoundMgr.Play(10001)
			_P.OnClickPage(self, false)
		end)
	end
end

function _P.InitChargeView(self)
	self.ChargeView = self.moudle:Get("ChargeView") 
	self.ChargeView.Activity = true
	self.listItemCharge = {}
	self.ChargeContent = self.moudle:Get("ChargeContent")
	if Csv.Recharge == nil then
		error("Recharge Csv = nil")
		return
	end
	local csvRechargeCopy = {}
	for _, csvValue in ipairs(Csv.Recharge) do
		if csvValue.cost and csvRechargeCopy[csvValue.cost] == nil then
			csvRechargeCopy[csvValue.cost] = csvValue
		end
	end
	local productList = {}
	for _, csvValue in pairs(csvRechargeCopy) do
		productList[#productList + 1] = csvValue
	end
	table.sort(productList, function(left, right)
		return left.id < right.id
	end)
	for _, csvValue in ipairs(productList) do
		if GameSetting.IsiOSCommit or (csvValue.type == nil or csvValue.type == 0) then
			_P.CreateChargeItem(self, csvValue)
		end
	end
end

function _P.CreateChargeItem(self, data)
	local itemMoudle
	if GameSetting.IsiOSCommit then 
		itemMoudle = JGuiManager.GetMoudle(self.ChargeContent, iOSItemName)
	else
		itemMoudle = JGuiManager.GetMoudle(self.ChargeContent, NormalItemName)
	end
	local item = {}
	
	item.titleText = itemMoudle:Get("TextTitle")
	item.titleText.Text = Csv.Text("recharge_coin", {num = data.diamond})
	if not GameSetting.IsiOSCommit then
		item.buyNumText = itemMoudle:Get("TextBuyNum")
		item.buyNumText.Text = data.costText
	end
	item.icon = itemMoudle:Get("Icon")
	if GameSetting.IsiOSCommit then
		CS.Plugin.LoadStreamingAssets.LoadSprite(CS.GameManager.Inst, GameSetting.GetPngStreamAssetsPath(iOSItemIamgeName, "Recharge"), 
												iOSItemIamgeSize.x, iOSItemIamgeSize.y, 
												function (sp)
													if sp then
														itemMoudle.SelfRect.Sprite = sp
													end
												end)
		CS.Plugin.LoadStreamingAssets.LoadSprite(CS.GameManager.Inst, GameSetting.GetPngStreamAssetsPath(data.icon, "Recharge"), 
												iOSItemDiamondSize.x, iOSItemDiamondSize.y, 
												function (sp)
													if sp then
														item.icon.Sprite = sp
													end
												end)
	else
		item.icon.SpriteName = data.icon
		item.FirstFlag = itemMoudle:Get("LbConerLeft")
		item.FirstFlag.Activity = MRecharge.IsFirstBuy(data.id)
	end
	item.icon:SetNativeSize()

	itemMoudle.SelfRect:AddOnButton(function()
		SoundMgr.Play(10001)
		SDKMgr.ReqPay(data.id, data.sdkProductId, data.cost, data.diamond) 
	end)

	self.listItemCharge[data.id] = item
end

function _P.InitVipView(self)
	self.VipView = self.moudle:Get("VipView") 
	self.VipView.Activity = true
	self.listItemVIP = {}
	self.VipContent = self.moudle:Get("VipContent")
	
	local csvVip = Csv.Vip
	if csvVip then
		local csvVipCopy = {}
		for id, csvValue in pairs(csvVip) do
			table.insert(csvVipCopy, csvValue)
		end
		table.sort(csvVipCopy, function (left, right)
			return left.level < right.level
		end)
		for id, csvValue in ipairs(csvVipCopy) do
			if 0 ~= csvValue.level then
				_P.CreateVipItem(self, "M_Recharge_VIP_Item", csvValue, csvVipCopy[id - 1])
			end
		end
	end
end

function _P.CreateVipItem(self, itemName, data, lastData)
	local itemMoudle = JGuiManager.GetMoudle(self.VipContent, itemName)

	local allBackground = {}
	allBackground["Vip"] = itemMoudle:Get("Vip")
	allBackground["Vip"].SpriteName = Csv.Vip[data.level].icon
	allBackground["TextTitle"] = itemMoudle:Get("TextTitle")
	allBackground["TextTitle"].Text = Csv.Text("recharge_power_need", {num = lastData.upExp})
	allBackground["TextBuff"] = itemMoudle:Get("TextBuff")
	self.VipTextRowHeight = allBackground["TextBuff"].FontSize + VipTextRowHeightArg
	allBackground["VipImg"] = itemMoudle:Get("VipImg")
	allBackground["line1"] = itemMoudle:Get("line1")
	allBackground["line2"] = itemMoudle:Get("line2")
	_P.ChangeVipItemHeight(self, itemMoudle, data, allBackground)

	if self.lastLevel < data.level then
		for nodeName, image in pairs(allBackground) do
			_P.SetVipItemGray(self, nodeName, image, nil, true)	
		end
	end
	self.listItemVIP[data.level] = allBackground
end

function _P.ChangeVipItemHeight(self, itemMoudle, data, allBackground)
	if self.VipItemHeight == nil then
		self.VipItemHeight = {}
		self.VipItemHeight[0] = 0
		self.VipItemSpaceHeight = self.VipContent:AddVerticalLayoutGroup().spacing
	end

	local vipItemBg = _P.InitVipItemHeight(self, itemMoudle, data)
	local row = _P.CalculateStringRow(data.desc)
	local height = row * self.VipTextRowHeight
	for key, rect in pairs(vipItemBg) do
		rect.SizeDelta = Vector2(rect.SizeDelta.x, rect.SizeDelta.y + height)
		if key == "Item" then
			self.VipItemHeight[data.level] = self.VipItemHeight[data.level - 1] + rect.SizeDelta.y + self.VipItemSpaceHeight
			if data.level == self.maxVipLevel then
				local layoutGroup = self.VipContent:AddVerticalLayoutGroup()
				self.VipItemHeight[data.level] = self.VipItemHeight[data.level] - self.VipItemSpaceHeight + layoutGroup.padding.top
			end
		end
	end
	allBackground["TextBuff"].Text = data.desc
end

function _P.SetVipItemGray(self, nodeName, image, level, isGray)
	if nodeName == "line1" or nodeName == "line2" then
		if isGray then
			image.Color = ColorBlack
		else
			image.Color = ColorWhite
		end
	elseif nodeName == "TextTitle" then
		if isGray then
			image.Color = ColorGray
		else
			image.Color = ColorWhite
		end
	elseif nodeName == "TextBuff" then
		if isGray then
			image.Color = ColorGray
			image.Text = string.gsub(image.Text, "<.->", "")
		else
			image.Color = ColorWhite
			image.Text = Csv.Vip[level].icon.desc
		end
	else
		image.IsGray = isGray
	end
end

function _P.InitVipItemHeight(self, itemMoudle, data)
	local vipItemBg = {}
	vipItemBg["Item"] = itemMoudle.SelfRect
	vipItemBg["bg2"] = itemMoudle:Get("bg2")
	vipItemBg["bg4"] = itemMoudle:Get("bg4")
	vipItemBg["bg5"] = itemMoudle:Get("bg5")
	vipItemBg["bg3"] = itemMoudle:Get("bg3")
	return vipItemBg
end

function _P.CalculateStringRow(text)
	local index = 0
	local num = 1
	while index do
		index = string.find(text, "\n", index + 1)
		num = num + 1
	end
	return num
end

function _P.OnClickPage(self, isCharge)
	if self.VipView == nil and not isCharge then
		_P.InitVipView(self)
	end

	if (not self.BtnCharge.Activity and isCharge) or
	   (not self.BtnPower.Activity and not isCharge) then
		self.BtnCharge.Activity = isCharge
		self.BtnPower.Activity = not isCharge
		self.VipView.Activity = not isCharge
		self.ChargeView.Activity = isCharge

		if isCharge then
			self.ChargeContent.LocalPosition = Vector2(self.ChargeContent.LocalPosition.x, 0)
		else
			local maxHeight = self.VipItemHeight[self.maxVipLevel] - self.VipView.SizeDelta.y
			local height = self.VipItemHeight[self.lastLevel]
			if height > maxHeight then
				height = maxHeight
			end
			self.VipContent.LocalPosition = Vector2(self.VipContent.LocalPosition.x, height)
		end
	end
end

function _R.OnRefreshView(self, level, curExp, maxExp)
	_P.SetText(self, level, curExp, maxExp)
	if level > self.lastLevel then
		self.ProgressBar:DOKill()
		self.ProgressBar:DOFillAmount(1, VipBarUpTime):OnComplete(
			function() 
				self.ProgressBar.FillAmount = 0
				self.ProgressBar:DOFillAmount(curExp / maxExp, VipBarUpTime):OnComplete(
					function()
						if Csv.Vip[level].icon then
							local text = Csv.Vip[level].desc
							if text and not GameSetting.IsiOSCommit then
								WindowMgr.Create("URechargeUp", level, text)
							end
						end
					end)
			end)

		if self.listItemVIP then
			for itemLevel, itemVip in pairs(self.listItemVIP) do
				if itemLevel > self.lastLevel and level >= itemLevel then
					for nodeName, image in pairs(self.listItemVIP[level]) do
						_P.SetVipItemGray(self, nodeName, image, level)
					end
				end
			end
		end
	else
		self.ProgressBar:DOFillAmount(curExp / maxExp, VipBarUpTime)
	end
	self.lastLevel = level
end

function _R.OnRefreshFirstFlag(self)
	local data = MRecharge.ProductData
	if data then
		for key, value in pairs(data) do
			local item = self.listItemCharge[key]
			if item and item.FirstFlag then
				item.FirstFlag.Activity = value == 0
			end
		end
	end
end

return _M
local WindowBase = JRequire "Libs.WindowMgr.WindowBase"
local WindowType = JRequire "Libs.WindowMgr.WindowType"
local SoundMgr = JRequire "Libs.Sound.SoundMgr"
local CCommon = JRequire "Dev.Common.CCommon"
local CActivity = JRequire "Dev.Activity.CActivity"
local MActivity = JRequire "Dev.Activity.MActivity"
local CCommon = JRequire "Dev.Common.CCommon"
local MBag = JRequire "Dev.Bag.MBag"

local PAGECOLOR1 = Color(243 / 255, 210 / 255, 47 / 255, 1)
local PAGECOLOR2 = Color(0 / 255, 195 / 255, 1, 1)
local EFFECT_ID = 12
-- 商店类型
local ShopTypeEnum = {
	Shop = 1,
	Warehouse = 2
}

local _M = Class(WindowBase)
local _P = {}
local _R = {}

function _M:Dispatch(funcName, ...)
	local fun = _R[funcName]
	if fun ~= nil then 
		fun(self, ...)
	end
end

function _P.InitPageData(self)
	self.shopSelectImg = self.mModule:Get("ShopBtn")
	self.houseSelectImg = self.mModule:Get("HouseBtn")

	_P.OnSetPageText(self)

	self.shopSelectImg:AddOnButton(function()
		SoundMgr.Play(10001)
		_P.OnClickPage(self, ShopTypeEnum.Shop)
	end, nil, 0.95)
	self.houseSelectImg:AddOnButton(function()
		SoundMgr.Play(10001)
		_P.OnClickPage(self, ShopTypeEnum.Warehouse)
	end, nil, 0.95)
end

function _P.OnSetPageText(self)
	local isShop =(self.curSelectToggle == ShopTypeEnum.Shop)
	self.shopSelectImg.Color = ((isShop and PAGECOLOR1) or PAGECOLOR2)
	self.houseSelectImg.Color = ((not isShop and PAGECOLOR1) or PAGECOLOR2)
	self.shopText.Color = ((isShop and Color.black) or Color.white)
	self.wareHouseText.Color = ((not isShop and Color.black) or Color.white)
end


function _P.OnSetListData(self)
	local isShop = self.curSelectToggle == ShopTypeEnum.Shop
	local shopList
	if isShop then
		shopList = self.mData.shopList
	else
		shopList = _P.GetHouseList(self)
	end

	local itemGrid = self.mModule:Get("content")
	itemGrid:DestroyChildren()

	self.noneText.Activity = (not shopList) or (next(shopList) == nil)
	if not shopList then return end
	self.mRawTableItems = {}
	self.mRawHouseItems = {}
	for k,v in ipairs(shopList) do
		if isShop then
			self.mRawTableItems[k] = _P.OnCreateShopItem(self, v, itemGrid)
		else
			self.mRawHouseItems[k] = _P.OnCreateHouseItem(self, v, itemGrid)
		end
	end
end

function _P.GetShopItem(self,id)
	for k,v in pairs(self.mRawTableItems) do
		if v.data.itemId == id then
			return v
		end
	end
end

function _P.GetHouseList(self)
	local houseList = {}
	local sortIndex = 1
	local charityconf = Csv.Charity[self.mData.actId]
	for i=1, #charityconf.shopItem do
		local itemId = charityconf.shopItem[i][1]
		local itemNum = MBag.GetItemNum(itemId)
		if itemNum > 0 then
			local shopItem = {
				index = i,
				sortIndex = sortIndex,
				itemId = itemId,
				count = itemNum,
				shopPoint = charityconf.rewardItems[i][2][2],
				shopDesc = charityconf.shopItemsdesc[i],
			}
			houseList[i] = shopItem
			sortIndex = sortIndex + 1
		end
	end
	
	return _P.GetSortList(houseList)
end

function _P.GetSortList(shopData)
	if not shopData then return {} end
	
	local sortList = {}
	for k,v in pairs(shopData) do
		sortList[#sortList + 1] = v
	end
	table.sort(sortList, function (a, b)
		return a.sortIndex < b.sortIndex
	end)

	return sortList
end

function _P.OnCreateShopItem(self, data, itemGrid)
	local shopItem = {}
	local itemModule = JGuiManager.GetMoudle(itemGrid, "M_Charitable_Choose_Item2", WindowType.UI, 0)
	if not itemModule then return end

	local itemConf = Csv.Item[data.itemId]
	local iconBox = itemModule:Get("IconBox")
	if itemConf then
		local ItemNameText = itemModule:Get("Name")
		ItemNameText.Text = itemConf.name
		itemModule:Get("Icon").SpriteName = itemConf.icon
		iconBox.SpriteName = itemConf.colorIcon
	end

	-- 添加环形特效
	CCommon.CreateItemLight(iconBox, Define.SysId.Chairty, data.itemId)

	local priceRect = itemModule:Get("Need")
	local getText = itemModule:Get("GetText")
	local buyBtn = itemModule:Get("Buy")
	local goBtn = itemModule:Get("Go")
	local limitText = itemModule:Get("limit")
	
	local isBuy = self.curSelectToggle == ShopTypeEnum.Shop
	priceRect.Activity = isBuy
	getText.Activity = not isBuy
	buyBtn.Activity = isBuy
	goBtn.Activity = false
	limitText.Activity = false
	
	if isBuy then
		local priceConf = Csv.Item[Define.AssetsType.Gold]
		if priceConf then
			itemModule:Get("NeedIcon").SpriteName = priceConf.icon
		end
		itemModule:Get("Need").Text = Csv.Text("xinguan_shop_price")
		itemModule:Get("NeedText").Text = data.shopPrice
	else
		getText.Text = Csv.Text("charitable_select")
	end

	itemModule:Get("Score").Text = Csv.Text("charitable_love_point")
	itemModule:Get("ScoreText").Text = data.reward.point
	itemModule:Get("Desc").Text = data.shopDesc
	itemModule:Get("BtnText1").Text = Csv.Text("shop_buy")
	
	buyBtn:AddOnButton(function ( ... )
		SoundMgr.Play(10001)
		if MBag.CheckItemEnough(Define.AssetsType.Gold, data.shopPrice) then
			CActivity.ReqCharitableBuy(data.itemId, 1)
		end
	end, nil, 0.95)

	shopItem.module = itemModule
	shopItem.data = data
	return shopItem
end

function _P.OnCreateHouseItem(self, data, itemGrid)
	local shopItem = {}
	local itemModule = JGuiManager.GetMoudle(itemGrid, "M_Charitable_Choose_Item", WindowType.UI, 0)
	if not itemModule then return end

	local itemConf = Csv.Item[data.itemId]
	if itemConf then
		local ItemNameText = itemModule:Get("Name")
		ItemNameText.Text = itemConf.name
		itemModule:Get("Icon").SpriteName = itemConf.icon
		itemModule:Get("IconBox").SpriteName = itemConf.colorIcon
		itemModule:Get("ItemNum").Text = data.count
	end
	itemModule:Get("Point").Text = Csv.Text("xinguan_shop_point")
	itemModule:Get("PointText").Text = data.shopPoint
	itemModule:Get("Desc").Text = data.shopDesc

	itemModule:Get("BtnText1").Text = Csv.Text("charitable_select")
	local selectBtn = itemModule:Get("Select")
	selectBtn:AddOnButton(function ( ... )
		SoundMgr.Play(10001)
		--通知活动界面Item刷新
		if WindowMgr.IsCreated("UCharitableActPanel") then
			WindowMgr.Call("UCharitableActPanel", "UpdateItemData", data)
			self:Destroy()
		else
			WindowMgr.Create("UCharitableActPanel", self.mData.actId, data)
		end	
	end, nil, 0.95)

	shopItem.module = itemModule
	return shopItem
end

function _P.OnClickPage(self, curSelect)
	if self.curSelectToggle == curSelect then return end
	
	self.curSelectToggle = curSelect
	self.goldRect.Activity = (curSelect == ShopTypeEnum.Shop)

	_P.OnSetPageText(self)
	_P.OnSetListData(self)
end

-- 购买道具返回
function _R.OnBuyCallBack(self, data)
	-- 播放特效
	local shopItem = _P.GetShopItem(self, data.item[1].id)
	local itemModule = shopItem.module

	local itemConf = Csv.Item[data.item[1].id]
	local spMap = {back = itemConf.colorIcon, icon = itemConf.icon}
	local textMap = {num = data.item[1].count}
	CCommon.CreateEffect(self._RootNode, EFFECT_ID, itemModule:Get("IconBox").RootCanvasPos, nil, spMap, textMap)
	SoundMgr.Play(11000)
end

function _M:OnCreate(data,curPage)
	self.mData = data
	local module = self:CreateMoudle(self._RootNode, "M_Charitable_Choose")
	self.mModule = module
	module:Get("C_Back_Btn"):AddOnButton(function ( ... )
		SoundMgr.Play(10002)
		self:Destroy()
	end, nil, 1.2)

	self.noneText = module:Get("none")
	self.wareHouseText = module:Get("HouseText")
	self.shopText = module:Get("ShopText")
	self.noneText.Text = Csv.Text("xinguan_shop_none")
	self.shopText.Text = Csv.Text("charitable_shop")
	self.wareHouseText.Text = Csv.Text("charitable_cangku")

	self.goldRect = module:Get("IconBox")
	module:Get("C_Text").Text = Csv.Text("charitable_act_shop_title")
	module:Get("IconNum").Text = LuaUtil.NumberFormat(MBag.GetItemNum(Define.AssetsType.Gold))

	
	self.curSelectToggle = curPage or ShopTypeEnum.Shop
	_P.InitPageData(self)
	_P.OnSetListData(self)

	self:RegistCallEvent(Define.EventListenId.ItemUpdateEvent, function (handle , itemid, itemcount, isAdd )
		if itemid == Define.AssetsType.Gold then
			module:Get("IconNum").Text = LuaUtil.NumberFormat(MBag.GetItemNum(Define.AssetsType.Gold))
		end
	end)
end

return _M
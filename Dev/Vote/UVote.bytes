local WindowBase = JRequire "Libs.WindowMgr.WindowBase"
local TabGroup = JRequire "Dev.Common.TabGroup2"
local MVote = JRequire "Dev.Vote.MVote"
local CVote = JRequire "Dev.Vote.CVote"
local UVoteTown = JRequire "Dev.Vote.UVoteTown"
local UVoteMember = JRequire "Dev.Vote.UVoteMember"
local MMain = JRequire "Dev.Main.MMain"
local MBag = JRequire "Dev.Bag.MBag"
local WindowOpen = JRequire "Libs.WindowMgr.WindowOpen"
local SoundMgr = JRequire "Libs.Sound.SoundMgr"
local HeartBeat = JRequire "Dev.Player.HeartBeat"
local JTweenerManager = CS.JTween.JTweenerManager
local _M = Class(WindowBase)
local _P = {}
local _R = {}

local MessageAll_Max = Csv.Const(Define.Const.VoteMessageMax)[2]
local MessageMy_Max = Csv.Const(Define.Const.VoteMessageMax)[3]

function _M:BeforeDestroy()
	CVote.ReqVoteClose()
	if self.ChooseMoudle ~= nil then
		self.ChooseMoudle:delete()
		self.ChooseMoudle = nil
	end
	if self.tabHandle ~= nil then
		self.tabHandle:delete()
		self.tabHandle = nil
	end
	if self.tabHandleMessage ~= nil then
		self.tabHandleMessage:delete()
		self.tabHandleMessage = nil
	end
end 

function _P.OnChoose(self, funcId)
	if self.ChooseMoudle ~= nil then
		self.ChooseMoudle:Destroy()
		self.ChooseMoudle:delete()
		self.ChooseMoudle = nil
	end
	if funcId == Define.SysId.Vote_Town then
		self.ChooseMoudle = UVoteTown.new(self.PageNode, function(node, point)
			if self.mMoudle ~= nil then
				self:RegistRedpoint(node, point)
			end
		end)
	elseif funcId == Define.SysId.Vote_Member then
		self.ChooseMoudle = UVoteMember.new(self.PageNode, function(node, point)
			if self.mMoudle ~= nil then
				self:RegistRedpoint(node, point)
			end
		end)
	end
end

function _P.OnChooseMessage(self,funcId)
	_P.OnChangeMessagePage(self,funcId)
end

function _M:OnPopCreate( ... )
	self:OnCreate(...)
end

--事件派发
function _M:Dispatch(funcName, ...)
	local fun = _R[funcName]
	if fun ~= nil then 
		fun(self, ...)
	end
end

--界面构建
function _M:OnCreate()
	local moudle = self:CreateMoudle(self._RootNode, "M_Election_Main")
	self.mMoudle = moudle
	self.NowMessagePage = 1
	self.IsOpenMessage = false
	self.MessageMoudleTable = {}
	self.TextMessage = moudle:Get("Info")
	self.ImgArrow = moudle:Get("Arrow")

	local messageRoot = moudle:Get("messageRoot")
	messageRoot.Activity = false
	moudle:Get("BottomClick"):AddOnButton(function()
		self.IsOpenMessage = true
		messageRoot.Activity = true
		_P.OnChangeMessagePage(self,self.NowMessagePage)
		self.TextMessage.Activity = false
		self.ImgArrow.LocalScale = Vector3(1,1,1)
	end,nil,1)

	moudle:Get("messageRoot"):AddOnButton(function()
		self.IsOpenMessage = false
		messageRoot.Activity = false
		self.TextMessage.Activity = true
		self.ImgArrow.LocalScale = Vector3(1,-1,1)
	end,nil,1)

	local tween = self.ImgArrow:DOAnchorPosY(5,1)
	tween:SetEase(CS.DG.Tweening.Ease.Linear)
	tween:SetLoops(-1, CS.DG.Tweening.LoopType.Yoyo)

	moudle:Get("C_Text").Text = Csv.Text("vote_0")
	moudle:Get("new_text").Text = Csv.Text("relations_tip3")
	moudle:Get("C_Back_Btn"):AddOnButton(function ( ... )
		SoundMgr.Play(10002)
		self:Destroy()
		end, nil, 1.2)

	local node = moudle:Get("PageNode")
	self.PageNode = node
	local funcs = MMain.GetOpenedFuncs(self._SysId, true)
	local count = #funcs
	if count > 0 then
		--Table标签控制
		local colorLight = Color(255/255,225/255,75/255,1)
		local colorDefault = Color(0/255,195/255,255/255,1)
		local tabHandle = TabGroup.new(function (funcId)
			_P.OnChoose(self, funcId)
		end, "yth_023", "yth_023",nil,nil,nil,nil,nil,nil,colorDefault,colorLight)
	
		local index = 0
		for k,v in pairs(funcs) do
			index = index + 1
			if index <= 2 then
				tabHandle:Add(v.id, moudle:Get("Tab"..index), moudle:Get("TabTxt"..index), v.name)
			end
			--注册小红点
			self:RegistRedpoint(moudle:Get("RedPoint_" .. index), v.id)
		end
		tabHandle:Choose(funcs[1].id)
		self.tabHandle = tabHandle
	end
	if count < 2 then
		for i=count + 1,2 do
			moudle:Get("Tab"..i).Activity = false
		end
	end

	local helpBtn = moudle:Get("C_Full_Help_Btn")
	if helpBtn ~= nil then
		if Csv.Rule[self._SysId] ~= nil then
			helpBtn:AddOnButton(function ( ... )
				SoundMgr.Play(10001)
				WindowMgr.Create("URuleTips", self._SysId)
			end, nil,  1.2)
		else
			helpBtn.Activity = false
		end
	end

	local funcsMessage = {{id = 1,name = Csv.Text("vote_66")},{id = 2,name = Csv.Text("vote_67")}}
	local countMessage = #funcsMessage
	if countMessage > 0 then
		--Table标签控制
		local colorLight = Color(255/255,225/255,75/255,1)
		local colorDefault = Color(0/255,195/255,255/255,1)
		local tabHandle = TabGroup.new(function (funcId)
			_P.OnChooseMessage(self, funcId)
		end, "yth_023", "yth_023",nil,nil,nil,nil,nil,nil,colorDefault,colorLight)
	
		local index = 0
		for k,v in pairs(funcsMessage) do
			index = index + 1
			tabHandle:Add(v.id, moudle:Get("Page"..index), moudle:Get("pageTxt"..index), v.name)
		end
		tabHandle:Choose(funcsMessage[1].id)
		self.tabHandleMessage = tabHandle
	end

	CVote.ReqInit()
	CVote.ReqVoteParInit(MVote.TypeEnum.Town,nil,true)
	CVote.ReqVoteParInit(MVote.TypeEnum.Member,nil,true)
	CVote.ReqVoteOpen()
end

function _R.RefreshView(self)
	if self.ChooseMoudle ~= nil then
		self.ChooseMoudle:RefreshView()
	end
end

function _R.RefreshMyVote(self)
	if self.ChooseMoudle ~= nil then
		self.ChooseMoudle:RefreshMyVoting()
	end
end

function _R.RefreshMessage(self)
	local messageTable
	if self.IsOpenMessage then
		_P.OnChangeMessagePage(self,self.NowMessagePage)
	else
		_P.SetBottomMessage(self,self.NowMessagePage)
	end
end

function _R.AddMessage(self,data,type)
	if self.NowMessagePage == type then
		if self.IsOpenMessage then
			if self.MessageMoudleTable ~= nil then
				local Message_Max
				if self.NowMessagePage == 1 then
					Message_Max = MessageAll_Max
				else
					Message_Max = MessageMy_Max
				end
				if #self.MessageMoudleTable >= Message_Max then
					local messageMoudle = self.MessageMoudleTable[Message_Max]
					messageMoudle:Get("Info").Text = _P.GetMessageStr(data)
					messageMoudle.SelfRect.CachedTran:SetSiblingIndex(0)
				else
					local messageMoudle = JGuiManager.GetMoudle(content,"M_Election_Info_Item")
					messageMoudle:Get("Info").Text = _P.GetMessageStr(data)
					table.insert(self.MessageMoudleTable,1,messageMoudle)
				end
			end
		end
		_P.SetBottomMessage(self,type)
	end
end

function _P.OnChangeMessagePage(self,type)
	self.NowMessagePage = type
	local moudle = self.mMoudle
	local content = moudle:Get("content")
	content:DestroyChildren()
	local messageTable
	if type == 1 then
		messageTable = MVote.MessageAll
	else
		messageTable = MVote.MessageMy
	end
	self.MessageMoudleTable = {}
	for k,v in ipairs(messageTable) do
		local messageMoudle = JGuiManager.GetMoudle(content,"M_Election_Info_Item")
		if type == 1 then
			messageMoudle:Get("Info").Text = _P.GetMessageStr(v)
		else
			messageMoudle:Get("Info").Text = LuaUtil.TransToHM(v.time).." ".._P.GetMessageStr(v)
		end
		table.insert(self.MessageMoudleTable,messageMoudle)
	end
	_P.SetBottomMessage(self,type)
end

function _P.SetBottomMessage(self,type)
	local messageTable
	if type == 1 then
		messageTable = MVote.MessageAll
	else
		messageTable = MVote.MessageMy
	end
	if messageTable[1] ~= nil then
		self.TextMessage.Text = _P.GetMessageStr(messageTable[1])
	else
		self.TextMessage.Text = ""
	end
end

function _P.GetMessageStr(data)
	local csvMessage = Csv.VoteMessage[data.type]
	if csvMessage ~= nil then
		local csvVote = Csv.Vote[data.voteid]
		if csvVote ~= nil then
			return LuaUtil.Format(csvMessage.str,{name1 = data.firstname,name2 = data.secondname,ticket = data.ticketnum,vote = csvVote.name})
		else
			return ""
		end
	end
	return ""
end

return _M
--@RefType [Libs.WindowMgr.WindowBase.bytes#_M]
local WindowBase = JRequire "Libs.WindowMgr.WindowBase"
--@RefType [Libs.WindowMgr.WindowOpen.bytes#_M]
local WindowOpen = JRequire "Libs.WindowMgr.WindowOpen"
--@RefType [Dev.Finance.CFinance.bytes#_M]
local CFinance = JRequire "Dev.Finance.CFinance"
--@RefType [Dev.Finance.MFinance.bytes#_M]
local MFinance = JRequire "Dev.Finance.MFinance"
--@RefType [Dev.Common.CCommon.bytes#_M]
local CCommon = JRequire "Dev.Common.CCommon"
--@RefType [Dev.Staff.MStaff.bytes#_M]
local MStaff = JRequire "Dev.Staff.MStaff"
local MPlayer = JRequire "Dev.Player.MPlayer"
local SoundMgr = JRequire "Libs.Sound.SoundMgr"
local MVote = JRequire "Dev.Vote.MVote"
local RankVertical = JRequire "Dev.Common.RankVertical"

local itemWidth = 630
local itemHeight = 61
local space = 12
local pageNum = 11
local pageHeight = 722

local _M = Class(WindowBase)
local _P = {}
local _R = {}

function _M:BeforeDestroy()
	if self.mRankVertical ~= nil then
		self.mRankVertical:delete()
		self.mRankVertical = nil
	end
end

function _M:OnCreate(data,isVote)
	self._EventNode:AddOnClick(function ()
		SoundMgr.Play(10001)
		self:Destroy()
	end)

	local moudle = self:CreateMoudle(self._RootNode, "M_FB_HurtRanking")
	self.Moudle = moudle

	local title = moudle:Get("C_Text")
	local backBtn = moudle:Get("C_Back_Btn")
	backBtn:AddOnButton(function(...)
		SoundMgr.Play(10002)
		self:Destroy()
	end, nil, 1.2)

	title.Text = Csv.Text("finance_hurtRank")--"伤害排行榜"

	local TopText = moudle:Get("TopText")
	local ranking = moudle:Get("ranking")
	local name = moudle:Get("name")
	local fraction = moudle:Get("Fraction")

	TopText.Text = Csv.Text("finance_hurtrankTips")--"前100名玩家可获得排名奖励"
	ranking.Text = Csv.Text("finance_scorelistnum")--"排名"
	name.Text = Csv.Text("finance_playername")--"玩家昵称"
	fraction.Text = Csv.Text("finance_allhurt")--"总伤害"

	local content = moudle:Get("content")
	self.mContent = content

	local ownInfo = moudle:Get("OwnInfo")
	local ownName = moudle:Get("OwnName")
	local nameText = moudle:Get("NameText")
	local ownRanking = moudle:Get("OwnRanking")
	local rankingText = moudle:Get("RankingText")
	local ownFraction = moudle:Get("OwnFraction")
	local fractionText = moudle:Get("FractionText")

	ownName.Text = Csv.Text("finance_OwnName")--"名称："
	ownRanking.Text =  Csv.Text("finance_OwnRanking")--"排名："
	ownFraction.Text = Csv.Text("finance_allhurt2")--"总伤害："
	nameText.Text = MPlayer.GetName()
	if data.own ~= nil then
		rankingText.Text = data.own.index
		fractionText.Text = data.own.hurt
	else
		rankingText.Text = Csv.Text("finance_nothing")--"无"
		fractionText.Text = Csv.Text("finance_nothing")--"无"
	end


	_P.ShowHurtRank(self,isVote)
end
function _P.ShowHurtRank(self,isVote)
	local content = self.mContent

	local rankList
	if isVote then
		rankList = MVote.ResistRankList
	else
		rankList = MFinance.ResistRankList
	end

	if rankList ~= nil then
		table.sort(rankList, function (a, b)
			return a.index < b.index
		end)

		local list = rankList
		self.mList = list
		local scroll = self.Moudle:Get("scrollView")
		if self.mRankVertical ~= nil then
			self.mRankVertical:delete()
			self.mRankVertical = nil
		end
		local scrollController = RankVertical.new(scroll,content,"M_FB_RankItem",function(index,value,moudle)_P.ScrollCallBack(self,index,value,moudle)end)
		scrollController:CreateScroll(pageNum,pageHeight,itemWidth,itemHeight,space,list)
		self.mRankVertical = scrollController
	end
end

function _P.ScrollCallBack(self,index,data,moudle)
	if moudle ~= nil then
		local bg = moudle.SelfRect
		local name = moudle:Get("name")
		local value = moudle:Get("value")
		
		if index > 3 then
			local rank = moudle:Get("rank")
			rank.Text = index
		end

		name.Text = data.name
		value.Text = data.hurt
		bg.LocalPosition = _P.GetPos(self,index)
	end
end

function _P.GetPos(self,index)
	local allNum = #self.mList
	local yPos = ((itemHeight + space) * allNum - space)/2 - ((index - 1) * (itemHeight + space) + itemHeight/2)
	return Vector2(0,yPos)
end

return _M
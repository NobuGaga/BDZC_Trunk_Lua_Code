-- 奇遇结算奖励界面
local WindowBase = JRequire "Libs.WindowMgr.WindowBase"
local WindowType = JRequire "Libs.WindowMgr.WindowType"
local CCommon = JRequire "Dev.Common.CCommon"
local SoundMgr = JRequire "Libs.Sound.SoundMgr"
local MActivity = JRequire "Dev.Activity.MActivity"
local CActivity = JRequire "Dev.Activity.CActivity"
local HeartBeat = JRequire "Dev.Player.HeartBeat"
local MBag = JRequire "Dev.Bag.MBag"
local TEXT_ALP_TWEEN = "T_TEXT_SHOW"
local BGMUSIC = 121

local _M = Class(WindowBase)
local _P = {}
local _R = {}


function _M:Dispatch(funcName, ...)
	local fun = _R[funcName]
	if fun ~= nil then 
		fun(self, ...)
	end
end

function _M:EndDestroy( ... )
	if self.OnCloseCall ~= nil then
		self.OnCloseCall()
	end
end

--界面构造
function _M:OnCreate(data, addExp, OnClose)
	local module = self:CreateMoudle(self._RootNode, "M_Adventure_Result")
	self.mModule = module

	SoundMgr.DestroyMusic(BGMUSIC, true)
	self.mData = data
	self.AddExp = addExp

	self._EventNode:AddOnClick(function ( ... )
		SoundMgr.Play(10002)
		self:Destroy()
	end)

	SoundMgr.PlayNonStopUI(10014)
	CCommon.CreateEffect(module:Get("ActorPanel"), 10186)

	self.chuli = module:Get("chuli")
	local compatibilityInt = math.max(math.ceil(data.compatibility), 10)
	self.chuli.Text = Csv.Text("adventure_result_time",{num = compatibilityInt})
	module:Get("Tips").Text = Csv.Text("adventure_result_tips")
	module:Get("pingjia").Text = Csv.Text("adventure_result_judge")
	module:Get("jlTitle").Text = Csv.Text("adventure_reward_tips")
	LuaUtil.TextAddThreePoint(module:Get("Tips2"), Csv.Text("common_close2"))
	self.pjImg = module:Get("pjImg")
	self.adventureCsv = Csv.Adventure[self.mData.actId]

	self.pjImg.SpriteName = _P.GetPjImg(self)
	_P.OnCreateList(self, self.mData.reward)
	self.OnCloseCall = OnClose
end

function _P.GetPjImg(self)
	local judgePoint = self.mData.compatibility
	local targetPoint = 1
	local pointStage = {}
	for k,v in pairs(self.adventureCsv.judge) do
		table.insert(pointStage,{key = k, value = v})
	end

	table.sort(pointStage, function(a,b)
		return a.value > b.value
	end)

	for index=1,#pointStage do
		if judgePoint >= pointStage[index].value then
			return pointStage[index].key
		end
	end
end

function _P.OnCreateList(self, listData)
	if listData == nil or next(listData) == nil then return end

	local splitReward = MActivity.AdventureRewardSplit(listData)
	self.mModule:Get("PointText").Text = Csv.Text("adventure_event_point", {num = splitReward.point})
	self.mModule:Get("OrderText").Text =  Csv.Text("adventure_event_currency", {num = splitReward.currency})
	self.mModule:Get("ExpText").Text = Csv.Text("adventure_main_expTip", {num = self.AddExp or 0})
end

return _M
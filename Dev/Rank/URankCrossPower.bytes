local JGuiManager = CS.JGui.JGuiManager
local MRank = JRequire "Dev.Rank.MRank"
local WindowType = JRequire "Libs.WindowMgr.WindowType"
local RankVertical = JRequire "Dev.Common.RankVertical"
local SoundMgr = JRequire "Libs.Sound.SoundMgr"
local CPlayer = JRequire "Dev.Player.CPlayer"
local MPlayer = JRequire "Dev.Player.MPlayer"

local _M = Class()
local _P = {}
local _R = {}

local itemWidth = 735
local itemHeight = 130
local space = -18
local pageNum = 8
local pageHeight = 800

--界面构建
function _M:ctor(parent)
	self._RootNode = parent
	local moudle = JGuiManager.GetMoudle(self._RootNode, "M_Ranking_Cross_Wealthy", WindowType.UI, 0)
	self.Moudle = moudle

	moudle:Get("TabText1").Text = Csv.Text("cross_rank_tab1")
	moudle:Get("TabText2").Text = Csv.Text("cross_rank_tab2")
	moudle:Get("TabText3").Text = Csv.Text("cross_rank_tab3")
end

function _M:ResetList(data)
	_P.SetBottomData(self)
end

function _P.SetBottomData(self)
	local rankinfo = MRank.AllRankTable[Define.CrossRankType.Power]
	if rankinfo ~= nil then
		_P.OnCreateList(self, rankinfo)
	end
end

function _P.OnCreateList(self, rankinfo)
	local list = _P.GetSortList(rankinfo.ranklist)
	self.mList = list
	local content = self.Moudle:Get("content")
	content:DestroyChildren()
	local scroll = self.Moudle:Get("scrollView")
	if self.scrollController ~= nil then
		self.scrollController:delete()
		self.scrollController = nil
	end
	
	local scrollController = RankVertical.new(scroll,content,"M_Ranking_WealthyItem",function(index,value,moudle)_P.ScrollCallBack(self,index,value,moudle)end)
	scrollController:CreateScroll(pageNum,pageHeight,itemWidth,itemHeight,space,list)
	self.scrollController = scrollController
end

function _P.GetSortList(list)
	local sortList = {}
	if list ~= nil then
		for k,v in pairs(list) do
			table.insert(sortList,v)
		end
		table.sort(sortList,function(a,b)return _P.SortRank(a,b)end)
	end
	return sortList
end

function _P.SortRank(a,b)
	return a.rank < b.rank
end

function _P.ScrollCallBack(self,index,value,moudle)
	if moudle ~= nil then
		if value.rank > 3 then
			moudle:Get("rank").Text = value.rank
		end
		moudle:Get("name").Text = value.name
		_P.SetLevelAndTitle(value, moudle)
		moudle:Get("value").Text = value.value

		local vip = value.vip
		local imgKuang = moudle:Get("VipBox")
		local imgNum = moudle:Get("VipNum")
		if vip ~= nil then
			local csvVip = Csv.Vip[vip]
			if vip <= 0 then
				imgKuang.Activity = false
				imgNum.Activity = false
			else
				imgKuang.Activity = true
				imgNum.Activity = true
				imgKuang.SpriteName = csvVip.imgBord
				imgNum.SpriteName = csvVip.icon
			end
		else
			imgKuang.Activity = false
			imgNum.Activity = false
		end

		if value.sex ~= nil and value.headid ~= nil then
			moudle:Get("Head").SpriteName = MPlayer.GetOtherHeadIcon(value.headid,value.sex)
		end

		moudle.SelfRect.LocalPosition = _P.GetPos(self,index)

		moudle.SelfRect:AddOnButton(function(...)
			SoundMgr.Play(10001)
			CPlayer.LookPlayerByServerID(value.playerid, value.serverid)
		end,nil,1)
	end
end

function _P.SetLevelAndTitle(data, moudle)
	if Csv.Company[data.level] == nil then
		print("-------server return level < 1.    data.level:", data.level)
	end
	
	local levelText = moudle:Get("levelText")
	local title = moudle:Get("title")
	if data.titleid ~= nil and data.titleid > 0 then
		--兼容没有配置称号图标, 使用文本称号显示
		local fashionData = Csv.Title[data.titleid]
		if fashionData.rankIcon then
			title.Activity = true
			title.SpriteName = fashionData.rankIcon
			levelText.Text = ""
		elseif fashionData.name then
			title.Activity = false
			levelText.Text = fashionData.name
		end
	else
		levelText.Text = (((Csv.Company[data.level] == nil) and "0") or Csv.Company[data.level].name)
		title.Activity = false
	end
end

function _P.GetPos(self,index)
	local allNum = #self.mList
	local yPos = ((itemHeight + space) * allNum - space)/2 - ((index - 1) * (itemHeight + space) + itemHeight/2)
	return Vector2(0,yPos)
end

function _M:BeforeDestroy()
	if self.scrollController ~= nil then
		self.scrollController:delete()
		self.scrollController = nil
	end
end

function _M:Destroy()
	local moudle = self.Moudle
	if moudle ~= nil then
		moudle:Destroy()
	end
end

return _M

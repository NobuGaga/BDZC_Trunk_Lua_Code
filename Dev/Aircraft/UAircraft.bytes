----------------------文件引用--------------------------
--@RefType [Libs.WindowMgr.WindowBase.bytes#_M]
local WindowBase = JRequire "Libs.WindowMgr.WindowBase"
--@RefType [Libs.LuaUtil.bytes#_M]
local luaUtil = JRequire"Libs.LuaUtil"
--@RefType [Libs.Sound.SoundMgr.bytes#_M]
local SoundMgr = JRequire "Libs.Sound.SoundMgr"
--@RefType [Dev.Aircraft.MAircraft.bytes#_M]
local MAircraft = JRequire "Dev.Aircraft.MAircraft"
-- @RefType [Dev.Bag.MBag.bytes#_M]
local MBag = JRequire "Dev.Bag.MBag"
-- @RefType [Dev.Common.CCommon.bytes#_M]
local CCommon = JRequire "Dev.Common.CCommon"
--@RefType [Dev.Player.HeartBeat.bytes#_M]
local HeartBeat = JRequire "Dev.Player.HeartBeat"

----------------------CS类引用--------------------------

----------------------常量定义--------------------------
local MoudleName = "M_Academy_Main"
local textTitle = "textTitle"
local csvTitleText = "aircraft_title"
local btnClose = "btnClose"

--属性表索引
local PowerCsv = "Girl_skill_type"
local BuffColorText = "aircraft_buff_color"

--特效ID
local BottomCloudEffect = 10089
local TopCloudEffect = 10090
local ForeCloudEffect = 10091
local FlyStartEffect = 1
local FlyingEffect = 2
local FlyingStopEffect = 3

local TweenFlyStart = "T_AirCraft_Up"
local TweenFlying = "T_AirCraft_Flying"
local TweenFlyEnd = "T_AirCraft_Down"

--外部接口模块 *** 只放置共有接口, 禁止放变量
local _M = Class(WindowBase)
--私有函数模块 *** 只放置私有函数, 禁止放变量
local _P = {}
--外部刷新界面模块 *** 放置刷新界面函数, 禁止放变量
local _R = {}

function _M:BeforeDestroy(...) end

--事件派发
function _M:Dispatch(funcName, ...)
	local fun = _R[funcName]
	if fun ~= nil then 
		fun(self, ...)
	end
end

--界面构建
function _M:OnCreate()
	_P.InitMoudleTopInfo(self)
	_P.InitAircraftInfo(self)
	_P.InitViewButton(self)
	_P.InitTimeText(self)
	_P.InitOriginFlyEndAnimTime(self)
	_P.InitEffect(self)
	_R.RefreshView(self)
end

--初始化模块顶部信息
function _P.InitMoudleTopInfo(self)
	self.moudle = self:CreateMoudle(self._RootNode, MoudleName)
	self.moudle:Get(textTitle).Text = Csv.Text(csvTitleText)
	self.moudle:Get(btnClose):AddOnButton(function()
		SoundMgr.Play(10002)
		self:Destroy()
		WindowMgr.Call("UHomeMap", "RefreshAircraftRedPoint")
	end)
	if Csv.Rule[Define.SysId.Aircraft] then
		local btnInfo = self.moudle:Get("btnInfo")
		if btnInfo ~= nil then
			btnInfo:AddOnButton(function ( ... )
				SoundMgr.Play(10001)
				WindowMgr.Create("URuleTips", Define.SysId.Aircraft)
			end, nil, 1.2)
		end
	end
end

--初始化飞机信息
function _P.InitAircraftInfo(self)
	self.textName = self.moudle:Get("textName")
	self.nameLevel = self.moudle:Get("nameLevel")
	self.textAllPower = self.moudle:Get("textAllPower")
	self.airCraft = self.moudle:Get("airCraft")
	self.airCraft:AddOnButton(function()
		SoundMgr.Play(10001)
		WindowMgr.Create("USchool")
	end, nil, 1)
	self.airCraftOriginPos = self.airCraft.LocalPosition
	self.airCraftOriginRotation = self.airCraft.LocalRotation

	_P.InifBottomInfo(self)
end

--初始化底部数据
function _P.InifBottomInfo(self)
	self.moudle:Get("textTitleBuff").Text = Csv.Text("aircraft_buff_title")
	self.textPower1 = self.moudle:Get("textPower1")
	self.textPower2 = self.moudle:Get("textPower2")
	self.textSeat = self.moudle:Get("textSeat")
	self.textBuff = self.moudle:Get("textBuff")
end

--初始化界面按钮
function _P.InitViewButton(self)
	self.moudle:Get("btnLearn"):AddOnButton(function()
		SoundMgr.Play(10001)
		WindowMgr.Create("USchool")
	end)
	self.moudle:Get("textBtnLearn").Text = Csv.Text("aircraft_learn")
	self.redpoint = self.moudle:Get("redpoint")

	self.moudle:Get("btnUp"):AddOnButton(function()
		SoundMgr.Play(10001)
		WindowMgr.Create("UAircraftUp")
	end)
	self.moudle:Get("textBtnUp").Text = Csv.Text("aircraft_up")

	self.moudle:Get("btnSkin"):AddOnButton(function()
		SoundMgr.Play(10001)
		WindowMgr.Create("UAircraftSkin")
	end)
	self.moudle:Get("textBtnSkin").Text = Csv.Text("aircraft_skin")
	self.redpointSkin = self.moudle:Get("redpointSkin")
end

--初始化倒计时文本
function _P.InitTimeText(self)
	self.textTime = self.moudle:Get("textTime")
	self.textTimeBg = self.moudle:Get("textTimeBg")
end

--刷新底部数值面板
function _P.RefreshPowerInfo(self)
	local index = 1
	for type, value in pairs(MAircraft.PowerBuff) do
		local textTemp = self[("textPower" .. index)]
		if nil == textTemp then 
			break
		end
		textTemp.Text = Csv.Text(PowerCsv .. type) .. ":" .. Csv.Text(BuffColorText, {text = value})
		index = index + 1
	end
end

function _P.RefreshSkinBuff(self)
	self.textBuff.Text = Csv.Text("aircraft_buff_all", {num = MAircraft.SkinSchoolAllBuff})
end

--刷新倒计时状态
function _P.RefreshTimeState(self)
	if MAircraft.IsStuding then
		self.textTimeBg.Activity = true
		_P.OnUpdateTime(self)
		self.tween = self.textTime:AddOnUpdate(function()
			_P.OnUpdateTime(self)
		end, nil, 1)
	elseif MAircraft.IsHaveCompleted then
		self.textTimeBg.Activity = true
		self.textTime.Text = Csv.Text("aircraft_can_get_tips")
		_P.DestroyUpdateTime(self)
	else
		self.textTimeBg.Activity = false
		self.textTime.Text = ""
		_P.DestroyUpdateTime(self)
	end
end

--更新游学时间
function _P.OnUpdateTime(self)
	local lessTime = MAircraft.SchoolTime - HeartBeat.ServSecond()
	self.textTime.Text = Csv.Text("aircraft_count_time", {text = luaUtil.GetTimeHMS(lessTime)})
	if 0 >= lessTime then
		self.textTime.Text = Csv.Text("aircraft_can_get_tips")
		_P.DestroyUpdateTime(self)
	end
end

--销毁倒计时
function _P.DestroyUpdateTime(self)
	if self.tween then
		self.tween:Destroy()
	end
end

--初始化飞机飞行结束动画初始值
function _P.InitOriginFlyEndAnimTime(self)
	if self.airCraft then
		self.airCraftTween = self.airCraft.CachedTran:GetJTweener(TweenFlyEnd)
		if self.airCraftTween then
			local maxTime = 0
			local maxTweenFlyNum = self.airCraftTween.Tweeners.Length
			for index = 0, maxTweenFlyNum - 1 do
				local temp = self.airCraftTween.Tweeners[index]
				if nil == temp then
					break
				end
				tempTime = temp.Duration + temp.Delay
				if maxTime < tempTime then
					maxTime = tempTime
				end
				index = index + 1
			end
			self.OriginFlyEndAnimTime = maxTime
		end
	end
end

--刷新飞机飞行结束动画时间
function _P.RefreshFlyEndAnimTime(self)
	local FlyEndAnimTime = self.OriginFlyEndAnimTime
	if self.airCraftAnimCsv and self.airCraftAnimCsv.fly_time then
		FlyEndAnimTime = FlyEndAnimTime + self.airCraftAnimCsv.fly_time
	end
	local effectID = _P.GetCsvEffectIDByName(self, FlyingStopEffect)
	if effectID then
		local csvEffect = Csv.Effect[effectID]
		local time = (csvEffect and csvEffect.dura) or 1
		FlyEndAnimTime = FlyEndAnimTime + time 
	end
	MAircraft.FlyEndAnimTime = FlyEndAnimTime
end

--初始化界面特效
function _P.InitEffect(self)
	CCommon.CreateEffect(self.moudle:Get("bottomCloud"), BottomCloudEffect)
	CCommon.CreateEffect(self.moudle:Get("topCloud"), TopCloudEffect)
	CCommon.CreateEffect(self.moudle:Get("foreCloud"), ForeCloudEffect)
	
	local background = self.moudle:Get("background")
	self.bgHeight = background.SizeDelta.y
	self.bgOriginY = background.LocalPosition.y
	self.topInfoHeight = self.moudle:Get("topInfo").SizeDelta.y
	self.backEffectCanvas = self.moudle:Get("backEffectCanvas")
	self.foreEffectCanvas = self.moudle:Get("foreEffectCanvas")
	self.backEffectOriginPos = self.backEffectCanvas.LocalPosition
	self.foreEffectOriginPos = self.foreEffectCanvas.LocalPosition

	self.propeller = self.moudle:Get("propeller")
	self.landWave = self.moudle:Get("landWave")
	self.flyEffectNode = self.moudle:Get("flyEffect")
end

--刷新界面特效动画
function _R.RefreshEffect(self)
	if _P.GetStartFlyEndState(self) then
		_P.SetFlyingHightestState(self)
	elseif not self.IsPlayEndLearn then
		local isAlreadyStart = MAircraft.IsStuding or MAircraft.IsHaveCompleted
		self.propeller.Activity = not isAlreadyStart
		if not isAlreadyStart then
			self.propeller.SpriteName = self.airCraftAnimCsv.prop_name
			local pos = self.airCraftAnimCsv.prop_pos
			if pos then
				if nil == pos[1] or nil == pos[2] then
					error("表 AircraftAnimation 对应的资源图片名 " .. self.airCraft.SpriteName or "nil" .. " prop_pos 字段配置错误")
				end
			else
				error("表 AircraftAnimation 对应的资源图片名 " .. self.airCraft.SpriteName or "nil" .. " prop_pos 字段为空")
			end
			self.propeller.LocalPosition = Vector2(pos[1], pos[2])
		end
		if MAircraft.IsStuding then
			_P.SetFlyingState(self)
			_P.PlayAircraftTween(self, TweenFlying)
		elseif MAircraft.IsHaveCompleted then
			_P.DestroyAirCraftTween(self)
			_P.RestoreAircraftAnimPos(self)
			CCommon.CreateEffect(self.flyEffectNode, _P.GetCsvEffectIDByName(self, FlyingEffect))
		else
			_P.DestroyAirCraftTween(self)
			_P.RestoreAircraftAnimPos(self)
			self.flyEffectNode:DestroyChildren()
		end
	end
end

--获取判断是否播放飞行降落动画
function _P.GetStartFlyEndState(self)
	local lessTime = 0
	if MAircraft.SchoolTime and 0 ~= MAircraft.SchoolTime then
		lessTime = MAircraft.SchoolTime - HeartBeat.ServSecond()
	end
	if MAircraft.IsStuding and MAircraft.FlyEndAnimTime - 1 >= lessTime then
		return true
	else
		return false
	end
end

--设置飞机飞行最高点状态
function _P.SetFlyingHightestState(self)
	self.IsPlayEndLearn = true
	self.propeller.Activity = false
	_P.SetFlyingState(self)
	_R.PlayEndFly(self)
end

--设置飞机飞行状态
function _P.SetFlyingState(self)
	CCommon.CreateEffect(self.flyEffectNode, _P.GetCsvEffectIDByName(self, FlyingEffect))
	_P.SetBackgroundHightestPos(self)
end

--设置飞机位置到最高点
function _P.SetBackgroundHightestPos(self)
	local posX = self.backEffectCanvas.LocalPosition.x
	self.backEffectCanvas.LocalPosition = Vector2(posX, _P.GetHeighestY(self))
	posX = self.foreEffectCanvas.LocalPosition.x
	self.foreEffectCanvas.LocalPosition = Vector2(posX, _P.GetHeighestY(self))
end

--还原飞机原始位置
function _P.RestoreAircraftAnimPos(self)
	self.backEffectCanvas.LocalPosition = self.backEffectOriginPos
	self.foreEffectCanvas.LocalPosition = self.foreEffectOriginPos
	self.airCraft.LocalPosition = self.airCraftOriginPos
	self.airCraft.LocalRotation = self.airCraftOriginRotation
end

--播放飞机Tween动画
function _P.PlayAircraftTween(self, TweenName, OnComplete)
	_P.DestroyAirCraftTween(self)
	self.airCraftTween = self.airCraft.CachedTran:GetJTweener(TweenName)
	if OnComplete then
		self.airCraftTween:SetOnComplete(OnComplete)
	end
	self.airCraftTween:Play()
end

--销毁飞机Tween动画
function _P.DestroyAirCraftTween(self)
	if self.airCraftTween then
		self.airCraftTween:DOKill()
		self.airCraftTween = nil
	end
end

--获取飞机动画表对应的飞行特效ID
function _P.GetCsvEffectIDByName(self, effectID)
	if self.airCraftAnimCsv.propEffect then
		local csvValue = self.airCraftAnimCsv.propEffect[effectID]
		if csvValue then
			return csvValue
		else
			error("表 AircraftAnimation 对应的资源图片名 " .. self.airCraft.SpriteName or "nil" 
							 .. " pro_effect 字段对应位置 " .. effectID or "nil" .. " 配置错误")
		end
	else
		error("表 AircraftAnimation 对应的资源图片名 " .. self.airCraft.SpriteName or "nil" .. " pro_effect 字段为空")
	end
	return nil
end

function _R.JudgePlayStartFly(self)
	if _P.GetStartFlyEndState(self) then
		_P.SetFlyingHightestState(self)
	else
		_P.PlayStartFly(self)
	end
end

--播放起飞动画
function _P.PlayStartFly(self)
	local effectID = _P.GetCsvEffectIDByName(self, FlyStartEffect)
	if nil == effectID then 
		return 
	end
	self.propeller.Activity = false
	CCommon.CreateEffect(self.flyEffectNode, effectID, nil, function()
		_P.PlayFlyLow(self, true)
	end)
	_P.StartWaveEffect(self)
end

--播放降落动画
function _R.PlayEndFly(self)
	_P.PlayAircraftTween(self, TweenFlyEnd, function ()
		_P.PlayFlyHeigher(self, false)
	end)
end

--播放冲击波动画
function _P.StartWaveEffect(self)
	CCommon.CreateEffect(self.landWave, self.airCraftAnimCsv.wave_effect)
end

--获取最高点Y坐标
function _P.GetHeighestY(self)
	return self.bgOriginY - self.bgHeight / 2 - self.airCraftAnimCsv.fly_dic - self.topInfoHeight
end

--播放低空飞行动画
function _P.PlayFlyLow(self, isUp)
	local distance = 0
	local effectID
	if isUp then
		distance = -self.airCraftAnimCsv.fly_dic
	else 
		distance = 0
		effectID = _P.GetCsvEffectIDByName(self, FlyingStopEffect)
	end
	if isUp then
		CCommon.CreateEffect(self.flyEffectNode, _P.GetCsvEffectIDByName(self, FlyingEffect))
	else
		CCommon.CreateEffect(self.flyEffectNode, effectID, nil, function()
			if MAircraft.IsHaveCompleted then
				CCommon.CreateEffect(self.flyEffectNode, _P.GetCsvEffectIDByName(self, FlyingEffect))
			else
				self.propeller.Activity = true
			end
		end)
		_P.StartWaveEffect(self)
	end
	local csvEffect = Csv.Effect[effectID]
	local time = (csvEffect and csvEffect.dura) or 1
	self.backEffectCanvas:DOAnchorPosY(distance, time)
	local temp = self.foreEffectCanvas:DOAnchorPosY(distance, time)
	if isUp then
		temp:OnComplete(function ()
			_P.PlayFlyHeigher(self, true)
		end)
	end
end

--播放高空飞行动画
function _P.PlayFlyHeigher(self, isUp)
	local distance = 0
	if isUp then
		distance = _P.GetHeighestY(self)
		self.flyEffectNode:DestroyChildren()
		CCommon.CreateEffect(self.flyEffectNode, _P.GetCsvEffectIDByName(self, FlyingEffect))
	else
		distance = -self.airCraftAnimCsv.fly_dic
	end
	self.backEffectCanvas:DOAnchorPosY(distance, self.airCraftAnimCsv.fly_time)
	local temp = self.foreEffectCanvas:DOAnchorPosY(distance, self.airCraftAnimCsv.fly_time)
	temp:OnComplete(function ()
		if isUp then
			_P.PlayAircraftTween(self, TweenFlyStart)
		else
			self.IsPlayEndLearn = false
			if not MAircraft.IsHaveCompleted then
				self.flyEffectNode:DestroyChildren()
			end
			_P.PlayFlyLow(self, false)
		end
	end)
end

--刷新全部信息
function _R.RefreshView(self)
	_R.RefreshAircraftInfo(self)
	_P.RefreshSkinBuff(self)
	_R.RefreshAircraftRedPoint(self)
	_R.RefreshEffect(self)
end

--刷新飞机信息
function _R.RefreshAircraftInfo(self)
	local csvAircraft = Csv.Aircraft[MAircraft.AircraftID]
	local csvAircraftSkin = Csv.AircraftSkin[MAircraft.SkinID]

	if csvAircraft then
		if csvAircraft.name_asset then
			self.nameLevel.SpriteName = csvAircraft.name_asset
		else
			error("表 Aircraft 对应的ID " .. MAircraft.AircraftID .. " 没有 name_asset 字段")
			return
		end
	else
		error("表 Aircraft 没有对应的ID " .. MAircraft.AircraftID)
		return
	end

	self.textAllPower.Text = MAircraft.AllPower

	if nil == MAircraft.SkinID or 0 == MAircraft.SkinID or nil == csvAircraftSkin then
		if nil == MAircraft.SkinID then
			if csvAircraft.name then
				self.textName.Text = csvAircraft.name
			else
				error("表 Aircraft 对应的ID " .. MAircraft.AircraftID .. " 没有 name 字段")
				return
			end
			if csvAircraft.asset then
				self.airCraft.SpriteName = csvAircraft.asset
			else
				error("表 Aircraft 对应的ID " .. MAircraft.AircraftID .. " 没有 asset 字段")
				return
			end
		else
			csvAircraft = Csv.Aircraft[MAircraft.SkinID]
			if csvAircraft then
				if csvAircraft.name then
					self.textName.Text = csvAircraft.name
				else
					error("表 Aircraft 对应的ID " .. MAircraft.SkinID .. " 没有 name 字段")
					return
				end
				if csvAircraft.asset then
					self.airCraft.SpriteName = csvAircraft.asset
				else
					error("表 Aircraft 对应的ID " .. MAircraft.SkinID .. " 没有 asset 字段")
					return
				end
			else
				error("表 Aircraft 没有对应的ID " .. MAircraft.SkinID)
				return
			end
		end
	else
		if csvAircraftSkin.name then
			self.textName.Text = csvAircraftSkin.name
		else
			error("表 AircraftSkin 对应的ID " .. MAircraft.SkinID .. " 没有 name 字段")
			return
		end
		if csvAircraftSkin.asset then
			self.airCraft.SpriteName = csvAircraftSkin.asset
		else
			error("表 AircraftSkin 对应的ID " .. MAircraft.SkinID .. " 没有 asset 字段")
			return
		end
	end

	self.airCraftAnimCsv = Csv.AircraftAnimation[self.airCraft.SpriteName]
	if nil == self.airCraftAnimCsv then
		error("表 AircraftAnimation 没有对应的资源图片名 " .. self.airCraft.SpriteName)
		return
	end

	local pos = self.airCraftAnimCsv.pos
	if pos then
		if nil == pos[1] or nil == pos[2] then
			error("表 AircraftAnimation 对应的资源图片名 " .. self.airCraft.SpriteName or "nil" .. " pos 字段配置错误")
		end
	else
		error("表 AircraftAnimation 对应的资源图片名 " .. self.airCraft.SpriteName or "nil" .. " pos 字段为空")
	end
	self.airCraft.LocalPosition = Vector2(pos[1], pos[2])

	_P.RefreshPowerInfo(self)
	self.textSeat.Text = Csv.Text("aircraft_seat_num", {num = MAircraft.MaxSeatNum})

	_P.RefreshFlyEndAnimTime(self)
end

--刷新皮肤信息
function _R.RefreshAircraftSkinInfo(self)
	_P.RefreshPowerInfo(self)
	_P.RefreshSkinBuff(self)
end

--刷新飞机红点
function _R.RefreshAircraftRedPoint(self)
	_P.RefreshTimeState(self)
	self.redpoint.Activity = MAircraft.IsHaveCompleted or (not MAircraft.IsStuding and MAircraft.StudyLeftTimes > 0)
	self.redpointSkin.Activity = MAircraft.IsAircraftHaveUnActivative()
end

return _M
local WindowBase = JRequire "Libs.WindowMgr.WindowBase"
local MMain = JRequire "Dev.Main.MMain"
local TabGroup = JRequire "Dev.Common.TabGroup"
local SoundMgr = JRequire "Libs.Sound.SoundMgr"
local URechargeAwardDay = JRequire "Dev.Activity.URechargeAwardDay"
local URechargeAwardTotal = JRequire "Dev.Activity.URechargeAwardTotal"
local URechargeAwardTotalDay = JRequire "Dev.Activity.URechargeAwardTotalDay"
local MActivity = JRequire "Dev.Activity.MActivity"
local URechargeRewardDailyGift = JRequire "Dev.Activity.URechargeRewardDailyGift"
local URechargeReward_Single = JRequire "Dev.Activity.URechargeReward_Single"
local CCommon = JRequire "Dev.Common.CCommon"

local _M = Class(WindowBase)

local _P = {}
local _R = {}

local RechargeTypeForID = {}
RechargeTypeForID[Define.SysId.RechargeReward_Day] = Define.ActivityType.RechargeReward_Day
RechargeTypeForID[Define.SysId.RechargeReward_Total] = Define.ActivityType.RechargeReward_Total
RechargeTypeForID[Define.SysId.RechargeReward_TotalDay] = Define.ActivityType.RechargeReward_TotalDay
RechargeTypeForID[Define.SysId.RechargeReward_DailyGift] = Define.ActivityType.RechargeReward_DailyGift
RechargeTypeForID[Define.SysId.RechargeReward_Single] = Define.ActivityType.RechargeReward_Single

local RechargeIDForType = {}
RechargeIDForType[Define.ActivityType.RechargeReward_Day] = Define.SysId.RechargeReward_Day
RechargeIDForType[Define.ActivityType.RechargeReward_Total] = Define.SysId.RechargeReward_Total
RechargeIDForType[Define.ActivityType.RechargeReward_TotalDay] = Define.SysId.RechargeReward_TotalDay
RechargeIDForType[Define.ActivityType.RechargeReward_DailyGift] = Define.SysId.RechargeReward_DailyGift
RechargeIDForType[Define.ActivityType.RechargeReward_Single] = Define.SysId.RechargeReward_Single

--事件派发
function _M:Dispatch(funcName, ...)
	local fun = _R[funcName]
	if fun ~= nil then 
		fun(self, ...)
	end
end

function _M:BeforeDestroy()
	if self.ChooseMoudle ~= nil then
		self.ChooseMoudle:delete()
		self.ChooseMoudle = nil
	end
	if self.tabHandle ~= nil then
		self.tabHandle:delete()
		self.tabHandle = nil
	end
end

function _M:OnPopCreate( ... )
	self:OnCreate(...)
end

function _P.OnChoose(self, funcId)
	if self.ChooseMoudle ~= nil then
		self.ChooseMoudle:Destroy()
		self.ChooseMoudle:delete()
		self.ChooseMoudle = nil
	end
	local funcData = Csv.Func[funcId]
	if funcData and funcData.name then
		self.mMoudle:Get("title").Text = funcData.name
	end
	if funcId == Define.SysId.RechargeReward_Day then
		self.ChooseMoudle = URechargeAwardDay.new(self.PageNode)
	elseif funcId == Define.SysId.RechargeReward_Total then
		self.ChooseMoudle = URechargeAwardTotal.new(self.PageNode)
	elseif funcId == Define.SysId.RechargeReward_TotalDay then
		self.ChooseMoudle = URechargeAwardTotalDay.new(self.PageNode)
	elseif funcId == Define.SysId.RechargeReward_DailyGift then
		self.ChooseMoudle = URechargeRewardDailyGift.new(self.PageNode)
	elseif funcId == Define.SysId.RechargeReward_Single then
		self.ChooseMoudle = URechargeReward_Single.new(self.PageNode)
	end
	self.mFuncId = funcId
end

--刷新页签
function _P.RefreshPage(self, actType)
	local isShow = false
	isShowCloseTips = _P.JudgeToRemovePage(self, RechargeIDForType[actType], actType)
	if isShowCloseTips and not self.isShow then
		self.isShow = true
		CCommon.ShowError(Csv.Text("err_lottery_activity_close"))
		self.mMoudle.SelfRect:AddOnTime(function ()
			self.isShow = false
		end, nil, 10)
	end
	if #self.pageIDCache == 0 then
		self:Destroy()
	end
end

--判断移除页签
function _P.JudgeToRemovePage(self, sysID, actType)
	local typeData = MActivity.GetListFromType(actType)
	if nil == typeData then
		self.tabHandle:Remove(sysID).image:Destroy()
		local pageIDCache = {}
		for _, value in ipairs(self.pageIDCache) do
			if value ~= sysID then
				table.insert(pageIDCache, value)
			end
		end
		self.pageIDCache = pageIDCache
		if self.mFuncId == sysID and #self.pageIDCache ~= 0 then
			self.tabHandle:Choose(self.pageIDCache[1])
		end
		return true
	else
		return false
	end
end

--界面构建
function _M:OnCreate()
	local moudle = self:CreateMoudle(self._RootNode, "M_DailyRecharge")
	self.mMoudle = moudle
	moudle:Get("back_btn"):AddOnButton(function ( ... )
		SoundMgr.Play(10002)
		if self.ChooseMoudle ~= nil then
			self.ChooseMoudle:Destroy()
		end
		self:Destroy()
	end, nil, 1.2)
	local node = moudle:Get("PageNode")
	self.PageNode = node
	local funcs = MActivity.GetRechargeOpenFunc()
	local count = #funcs
	if count > 0 then
		--Table标签控制
		self.tabHandle = TabGroup.new(function (funcId)
			_P.OnChoose(self, funcId)
		end, "HXbian_001_23", "HXbian_001_23", nil, Color(1, 1, 1, 1))
	
		local index = 0
		self.pageIDCache = {}
		for k,v in pairs(funcs) do
			index = index + 1
			self.pageIDCache[index] = v.id
			self.tabHandle:Add(v.id, moudle:Get("Label"..index), moudle:Get("C_text_"..index), v.name, moudle:Get("select_" .. index))

			--注册小红点
			self:RegistRedpoint(moudle:Get("redpoint_" .. index), v.id)
		end
		self.tabHandle:Choose(funcs[1].id)
	end
	if count < 5 then
		for i=count + 1,5 do
			moudle:Get("btn"..i).Activity = false
		end
	end
end

function _R.RefreshItemState(self,data,actType)
	if self.ChooseMoudle ~= nil then
		if (self.mFuncId == Define.SysId.RechargeReward_DailyGift and actType == Define.ActivityType.RechargeReward_DailyGift) then
			self.ChooseMoudle:RefreshItemState(data)
		end
	end
end

function _R.RefreshItemGetState(self,data,actType)
	if self.ChooseMoudle ~= nil then
		if (self.mFuncId == Define.SysId.RechargeReward_Day and actType == Define.ActivityType.RechargeReward_Day)
		or (self.mFuncId == Define.SysId.RechargeReward_Total and actType == Define.ActivityType.RechargeReward_Total)
		or (self.mFuncId == Define.SysId.RechargeReward_TotalDay and actType == Define.ActivityType.RechargeReward_TotalDay)
		or (self.mFuncId == Define.SysId.RechargeReward_DailyGift and actType == Define.ActivityType.RechargeReward_DailyGift)
		or (self.mFuncId == Define.SysId.RechargeReward_Single and actType == Define.ActivityType.RechargeReward_Single) then
			self.ChooseMoudle:RefreshItemGetState(data)
		end
	end
end

function _R.OnRefreshView(self,actType)
	_P.RefreshPage(self, actType)
	if self.ChooseMoudle ~= nil then
		if (self.mFuncId == Define.SysId.RechargeReward_Day and actType == Define.ActivityType.RechargeReward_Day)
		or (self.mFuncId == Define.SysId.RechargeReward_Total and actType == Define.ActivityType.RechargeReward_Total)
		or (self.mFuncId == Define.SysId.RechargeReward_TotalDay and actType == Define.ActivityType.RechargeReward_TotalDay)
		or (self.mFuncId == Define.SysId.RechargeReward_DailyGift and actType == Define.ActivityType.RechargeReward_DailyGift)
		or (self.mFuncId == Define.SysId.RechargeReward_Single and actType == Define.ActivityType.RechargeReward_Single) then
			self.ChooseMoudle:RefreshView()
		end
	end
end

return _M
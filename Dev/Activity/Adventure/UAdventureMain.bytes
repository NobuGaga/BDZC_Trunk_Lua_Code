-- 奇遇主界面
local WindowBase = JRequire "Libs.WindowMgr.WindowBase"
local WindowType = JRequire "Libs.WindowMgr.WindowType"
local CCommon = JRequire "Dev.Common.CCommon"
local SoundMgr = JRequire "Libs.Sound.SoundMgr"
local MActivity = JRequire "Dev.Activity.MActivity"
local CActivity = JRequire "Dev.Activity.CActivity"
local HeartBeat = JRequire "Dev.Player.HeartBeat"
local MBag = JRequire "Dev.Bag.MBag"

local _M = Class(WindowBase)
local _P = {}
local _R = {}

local MAX_EVENT = 6 --最大事件上限数量


function _M:Dispatch(funcName, ...)
	local fun = _R[funcName]
	if fun ~= nil then 
		fun(self, ...)
	end
end

--红点刷新
function _R.UpdataRed(self)
	self.mModule:Get("rankRedpoint").Activity = MActivity.AdventureRankRed
	self.mModule:Get("eventRedpoint").Activity = MActivity.AdventureShopRed
end

function _P.SetView(self)
	_P.SetListData(self)
end

--设置热度值
function _P.SetHotVal(self)
end

--刷新中间事件格子
function _P.SetListData(self)
	local contentTransform = self.mModule:Get("Content")
	contentTransform:DestroyChildren()

	self.eventTableDatas = _P.GetEventData(self)
	for k,v in ipairs(self.eventTableDatas) do
		self.mRawTableItems[v.id] = _P.OnCreateItem(self, v, contentTransform)
	end
end

function _P.GetEventData(self)
	local eventDatas = {}
	--构造假数据
	for i=1,4 do
		local one = {
			actId = 40000,
			id = 1000+i,
			eventsIndex = i,
			eventInfo = {{index = 1, attrInfo = {{type = 2, val = 40},{type = 5, val = 1}}},
			{index = 2, attrInfo = {{type = 3, val = 50},{type = 6, val = 1}}},
			{index = 3, attrInfo = {{type = 4, val = 40},{type = 6, val = 2}}},
			},
			eventTriggerTime = HeartBeat.ServSecond()
		}
		eventDatas[i] = one
	end
	return eventDatas
end

function _P.RefreshTime(self)
	local time = self.time - HeartBeat.ServSecond() 
	local isFinish = time <= 0
	if isFinish then
		self.timeText.Text = CS.Utility.Utils.FormatSeconds(0, Csv.Text("xinguan_rank_countdown"))
	else
		self.timeText.Text = CS.Utility.Utils.FormatSeconds(time, Csv.Text("xinguan_rank_countdown"))
	end
	return isFinish
end

function _P.OnTimeUpdate(self)
	print("时间到了！！！！！")
end


--创建格子
function _P.OnCreateItem(self,data,contentTransform)
	local event = {}
	local itemMoudle = JGuiManager.GetMoudle(contentTransform, "M_Adventure_MainItem", WindowType.UI, 0)
	--Todo:显示是否即将刷新
	itemMoudle:Get("Tips").Text = Csv.Text("adventure_time_tips")

	if _P.IsNeedUpdate(self,data.eventsIndex) then
		print("UpdateIndex", data.eventsIndex)
		self.timeText = itemMoudle:Get("Time")
		self.time = HeartBeat.ServSecond() + 1800
		self.timeText.Text = CS.Utility.Utils.FormatSeconds(self.time - HeartBeat.ServSecond(), Csv.Text("xinguan_rank_countdown"))
		itemMoudle:Get("TimeBg").Activity = true
		self.countTime = self.timeText:AddOnUpdate(function() 
			if _P.RefreshTime(self) then
				if self.countTime then
					--时间到了
					print("时间到了")
					_P.OnTimeUpdate(self)
					self.countTime:Destroy()
					self.countTime = nil
				end
			end
		end, nil, 1)
	else
		itemMoudle:Get("TimeBg").Activity = false
	end

	itemMoudle:Get("OutBox"):AddOnButton(function ( ... )
		SoundMgr.Play(10001)
		_P.OnClickItem(data)
		end, nil, 1)

	local csvEvent = Csv.AdventureMainEvent[data.id]

	local eventName = csvEvent.title
	local quality = csvEvent.quality

	local ImgIcon = itemMoudle:Get("iCON")
	ImgIcon.SpriteName = csvEvent.icon
	itemMoudle:Get("Name").Text = eventName

	event.module = itemMoudle
	return event
end

function _P.IsNeedUpdate(self,id)
	local minIndex = self.eventTableDatas[1].eventsIndex
	for i=1,#self.eventTableDatas do
		if minIndex > self.eventTableDatas[i].eventsIndex then
			minIndex = self.eventTableDatas[i].eventsIndex
		end
	end
	return minIndex == id --and #self.eventTableDatas == MAX_EVENT
end

function _P.OnClickItem(data)
	if data ~= nil then
		WindowMgr.Create("UAdventureStaff", data)
	end
end

--隔天刷新次数
function _P.OnDayout(self)

end

function _P.CreateFadeData(self)
	local data = {}
	local shopEventList = {}
	local shopRewardEventList = {}
	for i=1,10 do
		local one = {
			actId = 40000,
			eventsIndex = i,
			eventId = 1001,
			eventInfo = {
				index = 1,
				attrInfo = {{type = 1, val = 20, params = 10001}}
			},
			playerlist = {},
			triggerTime = HeartBeat.ServSecond() + i,
			playerInfo = {
				icon = "S_Boy_001",
				level = 10,
				power = 200,
				devote = 5000,
				staffId = 10002,
				job = 1,
				name = "test",
			},
			type = i%2,
		}

		for i=1,3 do
			local player = {
				icon = "S_Boy_001",
				level = 10+i,
				power = 400,
				devote = 1000,
				staffId = 10002,
				job = 2,
				name = "player"..i
			}
			table.insert(one.playerlist, player)
		end
		if one.type == 0 then
			shopRewardEventList[one.eventsIndex] = one
		else
			shopEventList[one.eventsIndex] = one
		end
	end
	data.shopRewardEventList = shopRewardEventList
	data.shopEventList = shopEventList
	data.actId = 40000
	print("shopRewardEventList", #data.shopRewardEventList)
	print("shopEventList", #data.shopEventList)
	return data
end

--界面构造
function _M:OnCreate(...)
	local module = self:CreateMoudle(self._RootNode, "M_Adventure_Main")
	self.mModule = module

	local closeBtn = self.mModule:Get("C_Back_Btn")
	closeBtn:AddOnButton(function ( ... )
		SoundMgr.Play(10002)
		self:Destroy()
	end, nil, 1.2)
	local BtnRule = module:Get("C_Full_Help_Btn")
	BtnRule:AddOnButton(function ( ... )
		SoundMgr.Play(10001)
		WindowMgr.Create("URuleTips",Define.SysId.Adventure)
		end, nil, 1.2)
	-- self.ActId = 0
	-- local data = MActivity.GetListFromType(Define.ActivityType.Adventure)
	-- if data ~= nil then
	-- 	for k,v in pairs(data) do
	-- 		self.ActId = k
	-- 		break
	-- 	end
	-- else
	-- 	error("Advanture info is nil")
	-- 	return
	-- end
	-- self.mData = data[self.ActId]

	local adventureConf = Csv.Adventure[40000]--activityId
	if not adventureConf then 
		error("adventure config is nil")
		return 
	end
	self.adventureConf = adventureConf

	self.mRawTableItems = {}
	module:Get("C_Text_0").Text = adventureConf.title
	module:Get("UpVip").Text = Csv.Text("adventure_vip_tips")
	module:Get("C_text").Text = Csv.Text("adventure_rank")
	module:Get("C_text_0").Text = Csv.Text("adventure_score_shop")
	module:Get("C_text_1").Text = Csv.Text("adventure_shop_event")
	self.timeText = module:Get("TimeText")
	self.hotText = module:Get("IconName")
	self.hotText.Text = Csv.Text("adventure_hot")
	self.slider = module:Get("Fill")
	self.rankBtn = module:Get("C_Btn_a")
	self.shopEventBtn = module:Get("C_Btn_b")
	self.exchangeBtn = module:Get("C_Btn_a_0")
	self.vipBtn = module:Get("Vip")
	self.leftTimes = module:Get("cishu")
	self.TipsBox = module:Get("TipsBox")
	self.scoreText = module:Get("TipsTezt")
	self.LkBtn = module:Get("LuckIcon")
	self.TipsBox.Activity = false
	self.scoreText.Text = adventureConf.popDesc
	-- hotOb = module:Get("HotObj")

	self.rankBtn:AddOnButton(function(...)
		SoundMgr.Play(10002)
		--打开排行榜界面
		-- if HeartBeat.ServSecond() >= self.mData.state.endTime then
		-- 	CCommon.ShowError(Csv.Text("timelimit_close"))
		-- else
			WindowMgr.Create("UAdventureRank", self.mData)
		-- end
	end, nil, 1.2)

	self.vipBtn:AddOnButton(function(...)
		SoundMgr.Play(10002)
		--打开充值界面
			WindowMgr.Create("URecharge")
		-- end
	end, nil, 1.2)

	self.exchangeBtn:AddOnButton(function(...)
		SoundMgr.Play(10002)
		--打开兑换界面
			WindowMgr.Create("UAdventureExchangePanel")
		-- end
	end, nil, 1.2)

	--注册12点重置监听
	self:RegistCallEvent(Define.EventListenId.DailyReset,function( ... )
		_P.OnDayout(self)
	end)
	
	self.shopEventBtn:AddOnButton(function(...)
		SoundMgr.Play(10002)
		--打开后续界面
		-- if HeartBeat.ServSecond() >= self.mData.state.endTime then
		-- 	CCommon.ShowError(Csv.Text("timelimit_close"))
		-- else
			WindowMgr.Create("UAdventureFollow", _P.CreateFadeData(self))
		-- end
	end,nil,1.2)
	
	self.LkBtn:AddOnPress(function(obj, arg, data)
		self.TipsBox.Activity = data.isPress
		-- hotOb:SetActive(data.isPress)
	end)
	_P.SetListData(self)
end

return _M
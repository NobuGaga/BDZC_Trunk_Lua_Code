local MExpedition = JRequire"Dev.Expedition.MExpedition"
local EventCenter = JRequire "Dev.EventCenter"
local CMain = JRequire "Dev.Main.CMain"
local MMain = JRequire "Dev.Main.MMain"

local _M = {}
local _P = {}

local ECmdId = {
	cMeetingBossInfo				= 2,--请求关卡boss 数据
	cMeetingFight					= 3,--点击战斗按钮
	cMeetingShopInfo				= 4,--请求兑换商店	
	cMettingExchange				= 5,--请求兑换物品 PMeeting.CMeetingExchange
	CMeetingReset					= 6,--重置
	CMeetingReward					= 7,--领奖励	PMeeting.CMeetingReward
	
	sMeetingInit					= 1,--初始化信息 PMeeting.SAMeetingInIt
	sMeetingBossInfo				= 2,--关卡boss 数据 PMeeting.SMeetingBossInfo
	sMeetingFight					= 3,--点击战斗按钮 PMeeting.SMeetingFight
	sMeetingShopInfo				= 4,--请求兑换商店PMeeting.SMeetingShopInfo
	sMettingExchange				= 5,--请求兑换物品 PMeeting.SMeetingShopInfo
	sMeetingReset					= 6,--重置 Pmeeting.SMeetingReset
	sMeetingReward					= 7,--领奖励	PMeeting.SMeetingReward
}

--清空模块
function _M.ModuleClean()
	MExpedition.Clean()
end

function _M.ModuleInit(isReload)
	local send = {
		[ECmdId.cMeetingBossInfo] = "",
		[ECmdId.cMeetingFight] = "",
		[ECmdId.cMeetingShopInfo] = "PMeeting.CMeetingShop",
		[ECmdId.cMettingExchange] = "PMeeting.CMeetingExchange",
		[ECmdId.CMeetingReset] = "",
		[ECmdId.CMeetingReward] = "PMeeting.CMeetingReward",
	}
	local recv = {
		[ECmdId.sMeetingInit]	=	{proto = "PMeeting.SMettingInit",	handle = _P.RepMeetingInit},
		[ECmdId.sMeetingBossInfo]	=	{proto = "PMeeting.SMeetingBossInfo",	handle = _P.RepBossInfo},
		[ECmdId.sMeetingFight]	=	{proto = "PMeeting.SMeetingFight",	handle = _P.RepMeetingFight},
		[ECmdId.sMeetingShopInfo]	=	{proto = "PMeeting.SMeetingShopInfo",	handle = _P.RepShopInfo},
		[ECmdId.sMettingExchange]	=	{proto = "PMeeting.SMeetingShopInfo",	handle = _P.RepExchange},
		[ECmdId.sMeetingReset]	=	{proto = "PMeeting.SMettingInit",	handle = _P.RepReset},
		[ECmdId.sMeetingReward]	=	{proto = "PMeeting.SMeetingReward",	handle = _P.RepReward},

	}
	
	_M.Send = SocketMgr.Regist(Define.SysId.Expedition, send, recv, isReload)
end

--注册12点重置监听
EventCenter.RegistCallEvent(Define.EventListenId.DailyReset,function( ... )
		--刷新商店
		if WindowMgr.IsCreated("UExpeditionShop") then
			_M.ReqShopInfo(false)
		end
end, true)

---------------------------------------------------
--Client -> Server 
----------------------------------------------------\
function _M.ReqBossInfo()
	_M.Send(ECmdId.cMeetingBossInfo)
end

function _M.ReqFight()
	_M.Send(ECmdId.cMeetingFight)
end

function _M.ReqShopInfo(isRefresh)
	_M.Send(ECmdId.cMeetingShopInfo, {refresh = isRefresh})
end

function _M.ReqExchange(_id)
	_M.Send(ECmdId.cMettingExchange,{id = _id})
end

function _M.ReqReset()
	_M.Send(ECmdId.CMeetingReset)
end

function _M.ReqReward(_id)
	_M.Send(ECmdId.CMeetingReward,{id = _id})
end

---------------------------------------------------
-- Server -> Client
----------------------------------------------------
function _P.RepMeetingInit(data)
	local lastId = MExpedition.CurID

	MExpedition.Init(data)

	if lastId ~= MExpedition.CurID then
		WindowMgr.Call("UExpeditionBattle","RefreshReset")
	end

	WindowMgr.Call("UExpedition","RefreshReset")

	_P.CheckRed()
end

function _P.RepBossInfo(data)
	WindowMgr.Call("UExpedition","RepBossInfo",data)
end

function _P.RepMeetingFight(data)
	WindowMgr.Call("UExpeditionBattle","RepMeetingFight",data)

	--胜利直接开通下一关卡
	MExpedition.Score = data.score
	if data.result then
		MExpedition.CurID = data.id + 1
	end

	_P.CheckRed()
end

function _P.RepShopInfo(data)
	MExpedition.OnShopInfo(data)

	WindowMgr.Call("UExpeditionShop","RefreshShop")
end

function _P.RepExchange(data)
	MExpedition.OnShopInfo(data)

	WindowMgr.Call("UExpeditionShop","RepExchange")
end

function _P.RepReset(data)
	_P.RepMeetingInit(data)
	_P.CheckRed()
end

function _P.RepReward(data)
	MExpedition.SetRewards(data)

	WindowMgr.Call("UExpedition","FlyRewardItem",data)
	_P.CheckRed()
	--WindowMgr.Call("UExpedition","RefreshRward")
end

function _P.CheckRed()
	local isRed = false
	if MMain.FuncIsOpen(Define.SysId.Expedition) then
		if MExpedition.ResetTimes > 0 then
			isRed = true
		else
			for i = 1,12,1 do
				local csvMeeting = Csv.Meeting[i]
				if csvMeeting ~= nil and csvMeeting.award2 ~= nil then
					if MExpedition.CurID > i and not MExpedition.CheckGotReward(i) then
						isRed = true
						break
					end
				end
			end
		end
	end
	CMain.UpdateRedpoint(isRed,Define.SysId.Expedition)
end


return _M
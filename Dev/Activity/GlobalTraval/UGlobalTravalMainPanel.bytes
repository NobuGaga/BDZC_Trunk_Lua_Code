-- 环球旅行界面
local WindowBase = JRequire "Libs.WindowMgr.WindowBase"
local WindowType = JRequire "Libs.WindowMgr.WindowType"
local CActivity = JRequire "Dev.Activity.CActivity"
local MActivity = JRequire "Dev.Activity.MActivity"
local JTweenerManager = CS.JTween.JTweenerManager
local SoundMgr = JRequire "Libs.Sound.SoundMgr"
local MPlayer = JRequire "Dev.Player.MPlayer"
local CCommon = JRequire "Dev.Common.CCommon"
local luaUtil = JRequire"Libs.LuaUtil"
local MBag = JRequire "Dev.Bag.MBag"

local _M = Class(WindowBase)
local _P = {}
local _R = {}


local MOUDLE_FADEOUT = "T_MOUDLE_FADEOUT"
local MOUDLE_FADEIN = "T_MOUDLE_FADEIN"
local DoubleActorId = 10163
local DiceEffectID = 10159
local HeadBoxEffectId = 10160
local RewardEffectId = 10161
local OffestX = 48
local OffestY = 42
local QualityScaleNumArr = Csv.Const(20159)


function _M:Dispatch(funcName, ...)
	local fun = _R[funcName]
	if fun ~= nil then 
		fun(self, ...)
	end
end


function _M:OnCreate()
	local module = self:CreateMoudle(self._RootNode, "M_GlobalTravel")
	self.mModule = module

	local actId = MActivity.ActIdForType[Define.ActivityType.GlobalTraval]
	if actId ~= nil then
		self.ActInfo = MActivity.GetFromId(actId)
	end

	if module == nil or self.ActInfo == nil then
		return
	end

	local vipLv = MPlayer.GetVip()
	self.extraBuyTime = Csv.Vip[vipLv].GlobalTravalCount

	local closeBtn = module:Get("BackBtn")
	closeBtn:AddOnButton(function ( ... )
		SoundMgr.Play(10002)
		self:Destroy()
	end, nil, 1.2)

	local helpBtn = module:Get("C_Full_Help_Btn")
	if helpBtn ~= nil then
		if Csv.Rule[self._SysId] ~= nil then
			helpBtn:AddOnButton(function ( ... )
				SoundMgr.Play(10001)
				WindowMgr.Create("URuleTips", self._SysId)
			end, nil,  1.2)
		else
			helpBtn.Activity = false
		end
	end

	local exchangeBtn = module:Get("ExchangeBtn")
	exchangeBtn:AddOnButton(function ( ... )
		SoundMgr.Play(10001)
		WindowMgr.Create("UGlobalTravalExchange", self.ActInfo)
	end, nil, 0.9)

	CCommon.CreateEffect(module:Get("ExActorPanel"), RewardEffectId)
	_P.UpdateExchangeEffect(self, self.ActInfo.numberCount)

	local enterBtn = module:Get("EnterBtn")
	enterBtn:AddOnButton(function ( ... )
		SoundMgr.Play(10001)
		_P.OnEnterTraval(self)
	end, nil, 0.9)
	module:Get("EnterText").Text = Csv.Text("global_forward")

	local addBtn = module:Get("AddBtn")
	addBtn:AddOnButton(function ( ... )
		SoundMgr.Play(10001)
		_P.OnBuyTravalCount(self)
	end, nil, 0.9)

	self.MaxGridNum = #Csv.GlobalTravalItem
	_P.SetGridDetail(self, self.ActInfo.curPosId)

	local diceNum = MBag.GetItemNum(MActivity.TravalDicsItemId)
	module:Get("Title").Text = Csv.Text("global_title")
	self.LeaveText = module:Get("SliderText")
	self.LeaveText.Text = Csv.Text("global_left_times", {num = diceNum})

	local travalConf = Csv.GlobalTraval[self.ActInfo.actId]
	local state = self.ActInfo.state
	self.DiceNameArrs = travalConf.diceIcon
	module:Get("date").Text = Csv.Text("global_date", {startTime = _P.TransToYMD(state.startTime),
														endTime = _P.TransToYMD(state.startTime + travalConf.settleTime)})
	module:Get("time").Text = Csv.Text("gloabl_duan")

	module:Get("Head").SpriteName = MPlayer.GetHeadIcon()
	CCommon.CreateEffect(module:Get("IconActorPanel"), HeadBoxEffectId)
	self.HeadBox = module:Get("IconRect")

	_P.SetMapData(self)
end


function _P.TransToYMD(time)
	return os.date("%Y.%m.%d", time)
end


function _P.SetGridDetail(self, curPosId)
	local gridConf = Csv.GlobalTravalItem[curPosId]
	if gridConf then
		self.mModule:Get("Tips").Text = gridConf.desc
	end
end


function _P.SetMapData(self)
	local cityList = self.ActInfo.posReward
	if cityList == nil then return end

	for k,v in pairs(cityList) do
		_P.SetOneCityData(self, v, self.ActInfo.travalLoopCount, true)
	end
end


function _P.SetOneCityData(self, data, travalLoopCount, isSetHeadPos)
	local module = self.mModule
	if data ~= nil and next(data) ~= nil and data.itemId ~= 0 then
		local iconImg = module:Get("Icon" .. data.posId)
		local qualityImg  = module:Get("BtnBox" .. data.posId)
		
		local itemConf = Csv.Item[data.itemId]
		qualityImg.SpriteName = itemConf.colorIcon

		local scaleNum = QualityScaleNumArr[(itemConf.color or 1)]
		iconImg.SpriteName = itemConf.icon
		iconImg:AddOnButton(function ( ... )
			SoundMgr.Play(10001)
			_P.OnClickIcon(itemConf.id)
		end, nil, 1)

		local offestX = (iconImg.SizeDelta.x * (1 - scaleNum) / 4)
		local offestY = (iconImg.SizeDelta.y * (1 - scaleNum) / 4)
		iconImg.LocalScale = Vector3(scaleNum, scaleNum, scaleNum)
		iconImg.LocalPosition = Vector2(iconImg.LocalPosition.x - offestX, iconImg.LocalPosition.y - offestY)

		local curTruePos = (((not isSetHeadPos) and travalLoopCount and travalLoopCount > 1 and 1) or 0) * self.MaxGridNum + data.posId
		_P.SetItemGray(self, curTruePos <= self.ActInfo.curPosId, data.posId)
	end

	if isSetHeadPos and data.posId ~= nil and data.posId == self.ActInfo.curPosId then
		local qualityImg = module:Get("BtnBox" .. data.posId)
		self.HeadBox.LocalPosition = Vector2(qualityImg.LocalPosition.x + OffestX , qualityImg.LocalPosition.y + OffestY)
		_P.SetMapPosData(self)
	end
end


-- 打开道具详情界面
function _P.OnClickIcon(id)
	if id ~= nil then
		WindowMgr.Create("UBagDetailPop", id)
	end
end


function _P.SetItemGray(self, isCannotClick, posId)
	local iconImg = self.mModule:Get("Icon" .. posId)
	local qualityImg  = self.mModule:Get("BtnBox" .. posId)

	if isCannotClick then
		local isShow = _P.CheckIsInArr(self.ActInfo.passPosList, posId)
		iconImg.Activity = not isShow
		iconImg.IsGray = not isShow
		iconImg.RaycastTarget = isShow
		qualityImg.IsGray = not isShow
		qualityImg.RaycastTarget = isShow
	else
		iconImg.Activity = true
		iconImg.IsGray = false
		iconImg.RaycastTarget = true
		qualityImg.IsGray = false
		qualityImg.RaycastTarget = true
	end
end


function _P.CheckIsInArr(listData, posId)
	if listData == nil or next(listData) == nil then
		return false
	end

	for k,v in pairs(listData) do
		if v == posId then
			return true
		end
	end

	return false
end


function _P.OnEnterTraval(self)
	local itemNum = MBag.GetItemNum(MActivity.TravalDicsItemId)
	if itemNum <= 0 then
		CCommon.ShowError(Csv.Text("global_itemErr"))
	else
		CActivity.OnEnterTravalReq()
	end
end


function _P.OnBuyTravalCount(self)
	local needCost = _P.GetNeedCostNum(self)
	CCommon.CheckTips(function(isSure,rg)
		if isSure == true then
			local travalConf = Csv.GlobalTraval[self.ActInfo.actId]
			local hasNum = MBag.GetItemNum(Define.AssetsType.Gold)
			if hasNum < needCost then
				CCommon.ShowError(Csv.Text("err_shop_buytype"))
			else
				if self.ActInfo.buyCount >= travalConf.buyLimit + self.extraBuyTime then
					CCommon.ShowError(Csv.Text("err_siege_actime_max"))
				else
					CActivity.OnBuyTravalReq()
				end
			end
		end
	end, {content = Csv.Text("global_buyShow", {num = needCost})})
end


function _P.OnMoveHead(self, data, callBack)
	local pos = self.HeadMovePos[1].pos
	local curIndex = self.HeadMovePos[1].index
	if pos then
		_P.SetMapSide(self, pos)

		local headMoveAnim = self.HeadBox:DOAnchorPos(Vector2(pos[1], pos[2]), 0.35)
			headMoveAnim:OnComplete(function ()
				if curIndex == self.MaxGridNum and self.ActInfo.curPosId + data.diceNumber > self.MaxGridNum then
					_P.OnPlayGetAnim(self, {curPosId = self.MaxGridNum})

					self.mModule.SelfRect:AddOnTime(function()
						_P.UpdateMapData(self, data.posReward, data.passPosList, data.travalLoopCount, function()
							_P.SetItemGray(self, curIndex ~= self.MaxGridNum, curIndex)

							table.remove(self.HeadMovePos, 1)
							if next(self.HeadMovePos) ~= nil then
								_P.OnMoveHead(self, data, callBack)
							else
								if callBack ~= nil then
									callBack()
								end
							end
						end)
					end, nil, 0.5)
				else
					_P.SetItemGray(self, true, curIndex)

					table.remove(self.HeadMovePos, 1)
					if next(self.HeadMovePos) ~= nil then
						_P.OnMoveHead(self, data, callBack)
					else
						if callBack ~= nil then
							callBack()
						end
					end
				end
			end)
	else
		if callBack ~= nil then
			callBack()
		end
	end
end


-- 界面变暗，刷新整个城市数据
function _P.UpdateMapData(self, cityList, passPosList, travalLoopCount, callBack)
	local cityMap = self.mModule:Get("Map")
	self.ActInfo.posReward = cityList
	self.ActInfo.passPosList = passPosList
	_P.SetCityActive(self, false)

	local fadeOutTween = cityMap.CachedTran:GetJTweener(MOUDLE_FADEOUT)
	fadeOutTween:Play()

	for k,v in pairs(cityList) do
		_P.SetOneCityData(self, v, travalLoopCount, false)
	end

	cityMap:AddOnTime(function()
		local fadeInTween = cityMap.CachedTran:GetJTweener(MOUDLE_FADEIN)
		fadeInTween:Play()

		_P.SetCityActive(self, true)
		if callBack then
			callBack()
		end
	end, nil, 1)
end


function _P.SetCityActive(self, isShow)
	for i=1,self.MaxGridNum do
		local cityNode = self.mModule:Get("BtnBox" .. i)
		cityNode.Activity = isShow
	end
end


-- 飘奖励动画，若摇到6播放2次
function _P.OnPlayGetAnim(self, data)
	local getItemData = nil
	for k,v in pairs(self.ActInfo.posReward) do
		if v.posId == data.curPosId then
			getItemData = v
			break
		end
	end

	local showNum = ((data.diceNumber and data.diceNumber == 6) and 2) or 1
	local animRect = self.mModule:Get("AnimRect")
	local curCityPos = self.mModule:Get("BtnBox" .. data.curPosId).RootCanvasPos
	animRect.LocalPosition = Vector2(curCityPos.x + 21, curCityPos.y + 40)

	for i=1,showNum do
		local flyTime = (i - 1) * 0.5
		if getItemData.itemId > 0 then
			CCommon.ShowFlyItem(animRect, getItemData.itemId, getItemData.count, flyTime)
		end
	end
end


-- 分左右两边，要么显示左边，要么显示右边
function _P.SetMapSide(self, pos)
	local width = CS.JGui.JGuiManager.GuiRoot.Width
	local mapRect = self.mModule:Get("Map")
	local mapPosX = mapRect.LocalPosition.x
	local mapPosY = mapRect.LocalPosition.y
	local moveX = nil

	if pos[1] >= width and mapPosX >= -width then
		moveX = - width
	elseif pos[1] < width and (mapPosX < -width or mapPosX ~= 0) then
		moveX = 0
	end

	if moveX then
		mapRect:DOAnchorPosX(moveX, 0.5)
	end
end


function _P.SetMapPosData(self)
	local mapRect = self.mModule:Get("Map")
	local cityRect = self.mModule:Get("BtnBox" .. self.ActInfo.curPosId)
	local width = CS.JGui.JGuiManager.GuiRoot.Width

	local moveX = width / 2 - cityRect.LocalPosition.x
	if moveX > 0 then
		moveX = 0
	elseif moveX < -width then
		moveX = -width
	end

	mapRect.LocalPosition = Vector2(moveX, mapRect.LocalPosition.y)
end


function _P.GetNeedCostNum(self)
	local travalConf = Csv.GlobalTraval[self.ActInfo.actId]
	if travalConf == nil then
		return 0
	end

	local nextBuyCount = self.ActInfo.buyCount + 1
	for k,v in pairs(travalConf.buyCost) do
		if nextBuyCount >= v[1] and nextBuyCount <= v[2] then
			return v[3]
		end
	end

	return 0
end


function _R.OnTravalEnterCallBack(self, data, callback)
	local actorPanel = self.mModule:Get("ActorPanel")
	local diceImg = self.mModule:Get("DiceImg")

	if data.passPosList ~= nil or next(data.passPosList) ~= nil then
		self.ActInfo.passPosList = data.passPosList
	end

	diceImg.SpriteName = self.DiceNameArrs[data.diceNumber]
	CCommon.CreateEffect(actorPanel, DiceEffectID, nil, function( ... )
		diceImg.Activity = true

		diceImg:AddOnTime(function()
			diceImg.Activity = false

			local posList = {}
			local maxCount = 0
			if self.ActInfo.curPosId + data.diceNumber > self.MaxGridNum then
				maxCount = ((data.travalLoopCount > 1 and 1) or 0) * self.MaxGridNum + data.curPosId
			else
				maxCount = data.curPosId
			end

			for i = self.ActInfo.curPosId + 1, maxCount do
				local index = ((i % self.MaxGridNum) == 0 and self.MaxGridNum) or (i % self.MaxGridNum)
				local rootPos = self.mModule:Get("BtnBox" .. index).LocalPosition
				if rootPos then
					posList[#posList + 1] = {pos = {[1] = rootPos.x + OffestX, [2] = rootPos.y + OffestY}, index = index}
				end
			end

			if next(posList) ~= nil then
				self.HeadMovePos = posList
				self:Lock()

				local MoveFunc = function ( ... )
					_P.OnMoveHead(self, data, function()
						if data.diceNumber == 6 then-- 移动完成后
							-- 播放骰子摇到6特效
							CCommon.CreateEffect(actorPanel, DoubleActorId, nil, function( ... ) 
								_P.OnPlayGetAnim(self, data)
								callback()
								self:Unlock()
							end)
						else
							_P.OnPlayGetAnim(self, data)
							callback()
							self:Unlock()
						end
	
						_P.SetGridDetail(self, data.curPosId)
						_P.UpdateExchangeEffect(self, data.numberCount)
					end)
				end
				
				-- 如果正好在42格，先刷新数据后移动
				if self.ActInfo.curPosId == self.MaxGridNum then
					_P.UpdateMapData(self, data.posReward, data.passPosList, data.travalLoopCount, function()
						MoveFunc()
					end)
				else
					MoveFunc()
				end
			end
		end, nil, 0.5)
	end)

	local diceNum = MBag.GetItemNum(MActivity.TravalDicsItemId)
	self.LeaveText.Text = Csv.Text("global_left_times", {num = diceNum})
end


-- 更新特效状态
function _P.UpdateExchangeEffect(self, numberCount)
	local exchangeActorPanel = self.mModule:Get("ExActorPanel")
	local isShowBtnEffect = MActivity.CheckHasExchange(numberCount)
	exchangeActorPanel.Activity = isShowBtnEffect
end


function _R.OnTravalBuyCallBack(self, data)
	CCommon.ShowError(Csv.Text("global_buySuccess"))

	local diceNum = MBag.GetItemNum(MActivity.TravalDicsItemId)
	self.LeaveText.Text = Csv.Text("global_left_times", {num = diceNum})
	self.ActInfo.buyCount = data.buyCount
end


function _R.UpdateExchangeData(self)
	_P.UpdateExchangeEffect(self, self.ActInfo.numberCount)
end


return _M
local WindowBase = JRequire "Libs.WindowMgr.WindowBase"
local MBag = JRequire "Dev.Bag.MBag"
local MStaff = JRequire "Dev.Staff.MStaff"
local CStaff = JRequire "Dev.Staff.CStaff"
local CCommon = JRequire "Dev.Common.CCommon"
local SoundMgr = JRequire "Libs.Sound.SoundMgr"
local _M = Class(WindowBase)
local _P = {}
local _R = {}

local levelUpActorId = 10010
local NUM_TWEEN = "T_Club_NumSacle"
local UnityTime = CS.UnityEngine.Time

local _MODE_TYPE =
{
	--明星授课
	MODE_1 = 1,
	--员工通用书籍经验
	MODE_2 = 2,
	--高级明星授课
	MODE_3 = 3,
	--属性资质经验
	MODE_4 = 4,
}

_P.ModeSort =
{
	_MODE_TYPE.MODE_1,
	_MODE_TYPE.MODE_2,
	_MODE_TYPE.MODE_3,
	_MODE_TYPE.MODE_4
}

_P.ModeParam =
{
	[_MODE_TYPE.MODE_1] = {
		checkShow = function()
			return true
		end,
		checkEnough = function(staffId, bookCsv, bookLvCsv)
			return MBag.CheckItemEnough(bookCsv.lvUpItem, bookLvCsv.itemNum)
		end,
		pressFunc = function(staffId, bookCsv, bookLvCsv, isEnough)
			if isEnough then
				CStaff.StaffBookUp(staffId, bookCsv.id, _MODE_TYPE.MODE_1)
			end
		end,
		getItemId = function(staffId, bookCsv, bookLvCsv)
			return bookCsv.lvUpItem
		end,
		updateInfoFunc = function(info, staffId, bookCsv, bookLvCsv, isMaxLevel)
			info.Cost.Text =
				Csv.Text("staff_bookC",{name = Csv.Item[bookCsv.lvUpItem].name, num = MBag.GetItemNum(bookCsv.lvUpItem), max = bookLvCsv.itemNum})
			info.UpChance.Text = Csv.Text("staff_chance",{num = bookLvCsv.itemPerC/100})
		end,
	},
	[_MODE_TYPE.MODE_2] = {
		checkShow = function()
			return true
		end,
		checkEnough = function(staffId, bookCsv, bookLvCsv)
			local costExp = bookLvCsv.expNum
			local staffBookExp = MStaff.GetStaffDataByID(staffId).bookexp
			if costExp > staffBookExp then
				return false
			else
				return true
			end
		end,
		pressFunc = function(staffId, bookCsv, bookLvCsv, isEnough)
			if isEnough then
				CStaff.StaffBookUp(staffId, bookCsv.id, _MODE_TYPE.MODE_2)
			else
				WindowMgr.Create("UItemTrack", Define.AssetsType.Bookexp, bookLvCsv.expNum, MStaff.GetStaffDataByID(staffId).bookexp)
			end
		end,
		getItemId = function(staffId, bookCsv, bookLvCsv)
			return Define.AssetsType.Bookexp
		end,
		updateInfoFunc = function(info, staffId, bookCsv, bookLvCsv, isMaxLevel, bookexp)
			info.Cost.Text =
				Csv.Text("staff_bookC",{name = Csv.Text("staff_bookexp"),num = bookexp,max = bookLvCsv.expNum})
			info.UpChance.Text = Csv.Text("staff_chance",{num = bookLvCsv.exPerC})
		end,
	},
	[_MODE_TYPE.MODE_3] = {
		checkShow = function(staffId, bookCsv, bookLvCsv)
			return bookLvCsv.upLevelCost ~= nil
		end,
		checkEnough = function(staffId, bookCsv, bookLvCsv)
			return MBag.CheckItemEnough(bookLvCsv.upLevelCost[1], bookLvCsv.upLevelCost[2])
		end,
		pressFunc = function(staffId, bookCsv, bookLvCsv, isEnough)
			if isEnough then
				CStaff.StaffBookUp(staffId, bookCsv.id, _MODE_TYPE.MODE_3)
			end
		end,
		getItemId = function(staffId, bookCsv, bookLvCsv)
			return bookLvCsv.upLevelCost[1]
		end,
		updateInfoFunc = function(info, staffId, bookCsv, bookLvCsv, isMaxLevel)
			info.Cost.Text =
				Csv.Text("staff_bookC",{name = Csv.Item[bookLvCsv.upLevelCost[1]].name, num = MBag.GetItemNum(bookLvCsv.upLevelCost[1]), max = bookLvCsv.upLevelCost[2]})
			info.UpChance.Text = Csv.Text("staff_chance",{num = bookLvCsv.upLevelPerC/100})
		end,
	},
	[_MODE_TYPE.MODE_4] = {
		checkShow = function(staffId, bookCsv, bookLvCsv)
			return bookCsv.lvUpItem2 ~= nil
		end,
		checkEnough = function(staffId, bookCsv, bookLvCsv)
			return MBag.CheckItemEnough(bookCsv.lvUpItem2, bookLvCsv.upLevelCost2)
		end,
		pressFunc = function(staffId, bookCsv, bookLvCsv, isEnough)
			if isEnough then
				CStaff.StaffBookUp(staffId, bookCsv.id, _MODE_TYPE.MODE_4)
			end
		end,
		getItemId = function(staffId, bookCsv, bookLvCsv)
			return bookCsv.lvUpItem2
		end,
		updateInfoFunc = function(info, staffId, bookCsv, bookLvCsv, isMaxLevel)
			info.Cost.Text =
				Csv.Text("staff_bookC",{name = Csv.Item[bookCsv.lvUpItem2].name, num = MBag.GetItemNum(bookCsv.lvUpItem2), max = bookLvCsv.upLevelCost2})
			info.UpChance.Text = Csv.Text("staff_chance",{num = bookLvCsv.upLevelPer2C/100})

			if isMaxLevel then
				info.BtnUp.Activity = false
			else
				info.BtnUp.Activity = true
			end
		end,
	}
}

--事件派发
function _M:Dispatch(funcName, ...)
	local fun = _R[funcName]
	if fun ~= nil then
		fun(self, ...)
	end
end

function _P.IsLevelMax(self,staffid)
	local level = self.mBookLv
	local maxLevel = Csv.ColorUp[MStaff.GetStaffDataByID(staffid).color].bookMaxLv
	return level >= maxLevel
end

--界面构建
function _M:OnCreate(staffid,bookid,bookstar)
	local moudle = self:CreateMoudle(self._RootNode, "M_Staff_BookUpPop")
	self.mMoudle = moudle
	moudle:Get("BtnClose"):AddOnButton(function ( ... )
		SoundMgr.Play(10002)
		self:Destroy()
	end)
	self.LastPressTime = 0
	self.ModeList = {}
	local bookCsv = Csv.Book[bookid]
	local bookLv = MStaff.GetStaffDataByID(staffid).book[bookid]
	local bookLvCsv = Csv.BookLv[bookstar * 1000 + bookLv]
	self.mBookStar = bookstar
	self.mBookLv = bookLv
	self.NowShowText = bookCsv.addDesc
	self.TextNowNum = moudle:Get("NowEffectNum")
	self.TextUpNum = moudle:Get("UpEffectNum")
	self.Level = moudle:Get("Level")
	self.NowEffect = moudle:Get("NowEffect")
	self.UpEffect = moudle:Get("UpEffect")
	self.EffectPanel = moudle:Get("NumEffectPanel")
	self.ActorPanel = moudle:Get("ActorPanel")

	moudle:Get("Title").Text = Csv.Text("staff_bookup")
	moudle:Get("IconColor").SpriteName = bookCsv.colorIcon
	moudle:Get("Icon").SpriteName = bookCsv.icon
	for i=1,bookstar do
		local star = moudle:Get("star"..i)
		star.Activity = true
	end
	moudle:Get("Name").Text = bookCsv.name

	local content = moudle:Get("BG1")
	local modeIndex = 0
	for _,mode in pairs(_P.ModeSort) do
		local modeInfo = _P.ModeParam[mode]
		if modeInfo.checkShow(staffid, bookCsv, bookLvCsv) then
			modeIndex = modeIndex + 1

			local oneMoudle = self:CreateMoudle(content, "M_Staff_BookUpPopItem")
			local MaxText = oneMoudle:Get("MaxText1")
			MaxText.Text = Csv.Text("staff_lvmax")
			local TextUp = oneMoudle:Get("C_text")
			TextUp.Text = Csv.Text("staff_up")
			local BtnUp = oneMoudle:Get("BtnUp")

			self.ModeList[mode] =
			{
				MaxText = MaxText,
				TextUp = TextUp,
				BtnUp = BtnUp,
				Cost = oneMoudle:Get("Cost"),
				UpChance = oneMoudle:Get("UpChance")
			}

			BtnUp:AddOnButton(function()
				local uniTime = UnityTime.time
				if (uniTime - self.LastPressTime) < 0.3 then
					return
				end
				self.LastPressTime = uniTime

				SoundMgr.Play(10001)
				if _P.IsLevelMax(self,staffid) then
					CCommon.ShowError(Csv.Text("staff_booklvMax"))
				else
					modeInfo.pressFunc(staffid, bookCsv, bookLvCsv, modeInfo.checkEnough(staffid, bookCsv, bookLvCsv))
				end
			end)

			oneMoudle:Get("Project").Text = Csv.Text("staff_pro"..modeIndex)
			local itemCsv = Csv.Item[modeInfo.getItemId(staffid, bookCsv, bookLvCsv)]
			oneMoudle:Get("ItemIcon").SpriteName = itemCsv.icon
			local colorSp = oneMoudle:Get("ItemColor")
			colorSp.SpriteName = itemCsv.colorIcon
			colorSp:AddOnButton(function()
				SoundMgr.Play(10001)
				WindowMgr.Create("UBagDetailPop",itemCsv.id)
			end)
		end
	end

	_P.OnCreateData(self,staffid,bookid,bookstar,bookLv,false)
	self:RegistCallEvent(Define.EventListenId.ItemUpdateEvent, function (handle , itemid, itemcount, isAdd )
		local nowBookLv = MStaff.GetStaffDataByID(staffid).book[bookid]
		self.mBookLv = nowBookLv
		_P.OnCreateData(self,staffid,bookid,bookstar,nowBookLv, false)
	end)
end

function _R.CreateData(self,data)
	if data.success then
		CCommon.CreateEffect(self.ActorPanel, levelUpActorId, nil, function( ... )
			self.mBookLv = data.booklv
			_P.OnCreateData(self,data.staffid,data.bookid,self.mBookStar,data.booklv, true)
		end)

		local count = tonumber(self.TextUpNum.Text) - tonumber(self.TextNowNum.Text)
		for i=1, count do
			CCommon.ShowFlyText(self.EffectPanel, self.NowShowText .. "+1", i * 0.2,nil,nil,nil,function() SoundMgr.Play(10011) end)
		end
	else
		SoundMgr.Play(10012)
		CCommon.ShowError(Csv.Text("staff_upfail"))
	end
end

function _P.OnCreateData(self,staffid,bookid,bookstar,booklevel,isShowEffect)
	local data = MStaff.GetStaffDataByID(staffid)
	local bookCsv = Csv.Book[bookid]
	local bookLvCsv = Csv.BookLv[bookstar * 1000 + booklevel]
	local booklvNext = Csv.BookLv[bookstar * 1000 + booklevel + 1]
	self.NowShowText = bookCsv.addDesc
	self.Level.Text = Csv.Text("staff_LV",{num = booklevel})
	self.NowEffect.Text = Csv.Text("staff_bookN",{name = bookCsv.addDesc})

	if booklvNext ~= nil then
		self.UpEffect.Text = Csv.Text("staff_bookU",{name = bookCsv.addDesc})
		self.TextUpNum.Text = booklvNext.aptitude
	else
		self.UpEffect.Text = Csv.Text("staff_bookU",{name = ""})
		self.TextUpNum.Text = ""
	end

	-- 字体变大效果
	self.TextNowNum.Text = bookLvCsv.aptitude
	if isShowEffect and self.TextNowNum.Text ~= "" then
		self.TextNowNum.CachedTran:GetJTweener(NUM_TWEEN):Play()
	end
	if isShowEffect and self.TextUpNum.Text ~= "" then
		self.TextUpNum.CachedTran:GetJTweener(NUM_TWEEN):Play()
	end

	local isMaxLevel = _P.IsLevelMax(self,staffid)
	for mode,info in pairs(self.ModeList) do
		local modeInfo = _P.ModeParam[mode]
		modeInfo.updateInfoFunc(info, staffid, bookCsv, bookLvCsv, isMaxLevel, data.bookexp)
	end
end

return _M
local MLineUp = JRequire "Dev.LineUp.MLineUp"
local EventCenter = JRequire "Dev.EventCenter"
local CMain = JRequire "Dev.Main.CMain"
local MMain = JRequire "Dev.Main.MMain"
local MStaff = JRequire"Dev.Staff.MStaff"
local MEquipt = JRequire "Dev.Equipt.MEquipt"

local _M = {}
local _P = {}

local ECmdId = {
	cPLineUpAddStaff				= 1,--添加员工 	PLineUp.CAddStaff
	cPLineUpOpen					= 2,--开启格子
	cPLineUpDownStaff				= 4,--员工下阵
	cPLineUpAuto					= 5,--一键上阵
	
	sPLineUpInit					= 1,--初始化 	PLineUp.SPLineUpInit
	sPLineUpOpen					= 2,--开启格子	PLineUp.SPLineUpOpen
}

function _M.ModuleInit(isReload)
	local send = {
		[ECmdId.cPLineUpAddStaff] = "PLineUp.CAddStaff",
		[ECmdId.cPLineUpOpen] = "",
		[ECmdId.cPLineUpDownStaff] = "PLineUp.CDownStaff",
		[ECmdId.cPLineUpAuto] = "",
	}
	local recv = {
		[ECmdId.sPLineUpInit]		=		{proto = "PLineUp.SPLineUpInit",		handle = _M.OnLineUpInit},
		[ECmdId.sPLineUpOpen]		=		{proto = "PLineUp.SPLineUpOpen",		handle = _P.OnLineUpOpen}
	}
	_M.Send = SocketMgr.Regist(Define.SysId.LineUp, send, recv, isReload)
end

--清空模块
function _M.ModuleClean()
	MLineUp.Clean()
end

--一键上阵
function _M.ClickAutoChange()
	_M.Send(ECmdId.cPLineUpAuto)
end

function _M.CheckRedpoint()
	local LineUpList = MLineUp.LineUpList
	local SeatNum = MLineUp.SeatNum
	
	for i=1,SeatNum do
		local staffID = LineUpList[i]
		local isRed = false

		if staffID == nil or staffID <= 0 then
			isRed = true
		else
			local equipsType1 = MEquipt.GetEquipsByType(1)
			local equipsType2 = MEquipt.GetEquipsByType(2)

			if equipsType1 ~= nil and #equipsType1 > 0 then
				isRed = not MStaff.CheckIsEquip(staffID,1)
			end
			if equipsType2 ~= nil and #equipsType2 > 0 then
				isRed = not MStaff.CheckIsEquip(staffID,2)
			end
		end
		CMain.UpdateRedpoint(isRed, Define.SysId.Staff, Define.SysId.LineUp, i)
	end
end

function _M.LineUpAddStaff(staffid,pos)
	_M.Send(ECmdId.cPLineUpAddStaff,{id = staffid,index = pos})
end

function _M.LineUpDownStaff(pos)
	_M.Send(ECmdId.cPLineUpDownStaff,{index = pos})
end

function _M.LineUpOpen()
	_M.Send(ECmdId.cPLineUpOpen)
end

function _M.OnLineUpInit(data)
	-- print("OnLineUpInit!!!")
	MLineUp.InitLine(data)
	_M.CheckRedpoint()

	WindowMgr.Call("UStaff","LineSetList")
	WindowMgr.Call("ULineUpCheck","LineSetList")
end

function _P.OnLineUpOpen(data)
	MLineUp.LineUpOpen(data)
	_M.CheckRedpoint()

	if WindowMgr.IsCreated("UStaff") then
		WindowMgr.Call("UStaff","OnLineUpOpen")
	end
end


return _M
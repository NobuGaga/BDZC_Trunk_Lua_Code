-- 座驾主界面
local WindowBase = JRequire "Libs.WindowMgr.WindowBase"
local WindowOpen = JRequire "Libs.WindowMgr.WindowOpen"
local WindowType = JRequire "Libs.WindowMgr.WindowType"
local TabGroup = JRequire "Dev.Common.TabGroup2"
local SoundMgr = JRequire "Libs.Sound.SoundMgr"
local CCommon = JRequire "Dev.Common.CCommon"
local MPlayer = JRequire "Dev.Player.MPlayer"
local MStaff = JRequire "Dev.Staff.MStaff"
local MMain = JRequire "Dev.Main.MMain"
local CCar = JRequire "Dev.Car.CCar"
local MCar = JRequire "Dev.Car.MCar"
local MBag = JRequire "Dev.Bag.MBag"

local _M = Class(WindowBase)
local _P = {}
local _R = {}

local QualityIconNameArr = {"zj_009_4", "zj_009_3", "zj_009_2", "zj_009_1", "zj_009_5", "zj_009_6"}
local PointerRotateActs = {0, -53, -110, -178, -232}
local DefaultColor = Color(243/255, 210/255, 47/255, 1)
local LightColor = Color(0/255, 195/255, 1, 1)
local StarPosVec = {{136, 290},{148, 308},{151.6, 332.1},{148, 356.6},{137.5, 374.1}}
local StarUpAtorId = 10080
local LevelUpAtorId = 10081
local CarPointerAngleRotate = "T_Car_PointerAngleZ"
local ChangeCarMoveTween = "T_Car_ChangeMove"
local SelectParkingTween = "T_Car_SelectTween"
local OldCarPosVec = Vector2(-750, 156)
local UnityTime = CS.UnityEngine.Time
local lastTime = 0
local MaxAptiUpNum = Csv.Const(87)
local DefaultPos = Vector2(274, -73)
local AptiUpPos = Vector2(158, -19)

function _M:OnPopCreate( ... )
	self:OnCreate(...)
end


--事件派发
function _M:Dispatch(funcName, ...)
	local fun = _R[funcName]
	if fun ~= nil then 
		fun(self, ...)
	end
end

function _M:BeforeDestroy( ... )
	SoundMgr.Destroy(10030)

	if self.tabHandle ~= nil then
		self.tabHandle:delete()
		self.tabHandle = nil
	end
end


--界面构建
function _M:OnCreate(...)
	local module = self:CreateMoudle(self._RootNode, "M_Car_Main")
	self.mModule = module

	SoundMgr.Play(10030)
	local closeBtn = module:Get("C_Back_Btn")
	closeBtn:AddOnButton(function ( ... )
		SoundMgr.Play(10002)
		self:Destroy()
	end, nil, 1.2)

	local helpBtn = module:Get("C_Full_Help_Btn")
	helpBtn:AddOnButton(function ( ... )
		SoundMgr.Play(10001)
		WindowMgr.Create("URuleTips", Define.SysId.Car)
	end, nil, 1.2)

	module:Get("GarageText").Text = Csv.Text("car_garage_title1")
	local garageBtn = module:Get("GarageBtn")
	garageBtn:AddOnButton(function ( ... )
		SoundMgr.Play(10001)
		WindowMgr.Create("UCarGarageMain", self._SysId)
	end, nil, 0.9)

	module:Get("C_text").Text = Csv.Text("car_aptiUp_qianghua")
	local intensifyExpBtn = module:Get("Btn1")
	intensifyExpBtn:AddOnButton(function ( ... )
		SoundMgr.Play(10001)
		_P.OnClickIntensify(self, 1)
	end, nil, 0.9)

	module:Get("C_text_0").Text = Csv.Text("car_aptiUp_qianghua")
	local intensifyItemBtn = module:Get("Btn2")
	intensifyItemBtn:AddOnButton(function ( ... )
		SoundMgr.Play(10001)
		_P.OnClickIntensify(self, 2)
	end, nil, 0.9)

	self.UpRect = module:Get("UpRect")
	self.IntensifyRect = module:Get("IntensifyRect")
	self.upItemGrid = module:Get("ItemList")
	self.FrontActorPanel1 = module:Get("FrontActorPanel1")
	self.LaterActorPanel1 = module:Get("LaterActorPanel1")
	self.FrontActorPanel2 = module:Get("FrontActorPanel2")
	self.LaterActorPanel2 = module:Get("LaterActorPanel2")
	self.CarTweenRect = module:Get("CarInfo")
	self.NoneText = module:Get("NoneText")
	self.OldCarIcon = module:Get("BigCarIcon")
	self.NewCarIcon = module:Get("ChangeCarIcon")
	self.NoneText.Text = Csv.Text("car_main_none")
	self.MaxText = module:Get("MaxText")
	self.upText = module:Get("C_text_0_0")
	self.totalPower = module:Get("ZDLNum")
	self.LockRect = module:Get("LockRect")
	self.btnRect = module:Get("BtnRect")
	module:Get("BtnText").Text = Csv.Text("car_main_change")
	module:Get("C_Text").Text = Csv.Text("car_main_title")

	_P.CreateCarParking(self)

	local funcs = _P.GetFuncs(MMain.GetOpenedFuncs(self._SysId, true))
	local count = #funcs
	if count > 0 then
		self.tabHandle = TabGroup.new(function (funcId)
			_P.OnChoose(self, funcId)
		end, "yth_023", "yth_023", Color.white, Color.black)

		for k,v in pairs(funcs) do
			self.tabHandle:Add(v.id, module:Get("Tab".. k), module:Get("TabText" .. k), v.name)
		end

		self.tabHandle:Choose(funcs[1].id)
	end

	self:RegistCallEvent(Define.EventListenId.ItemUpdateEvent, function (eventHandle , itemid , itemcount , isAdd )
		if self.SelectPageId and self.SelectPageId == Define.SysId.Car_StarUp then
			_P.UpdateCostItemData(self, itemid)
		elseif self.SelectPageId and self.SelectPageId == Define.SysId.Car_LevelUp and itemid == self.levelUpCostId then
			_P.UpdateLevelUpCost(self)
		elseif self.SelectPageId and self.SelectPageId == Define.SysId.Car_AptiUp then
			_P.UpdateAptiUpCostData(self, itemid)
		end

		_P.UpdateRed(self, itemid)
	end)
end


-- 设置车位数据
function _P.CreateCarParking(self)
	local contentTransform = self.mModule:Get("CarList")
	contentTransform:DestroyChildren()

	local seatData = MCar.CarSeatList
	self.mCarSeatItems = {}
	for i,v in ipairs(seatData) do
		self.mCarSeatItems[i] = _P.OnCreateParkingItem(self, contentTransform, v)
	end

	if not self.curSelectSeat then
		_P.UpdateSelectState(self, 1, false)
	end

	self.totalPower.Text = _P.GetTotalPowerNum(self)
end


-- 得到座驾总战力
function _P.GetTotalPowerNum(self)
	local totalNum = 0
	for k,v in pairs(self.mCarSeatItems) do
		local data = v.data
		if data.state == MCar.SeatStateEnum.Equiping then
			local carData = MCar.GetCurCarData(data.carid)
			if carData then
				totalNum = totalNum + carData.score
			end
		end
	end

	return totalNum
end


function _P.OnCreateParkingItem(self, itemGrid, data)
	local seatItem = {}
	local itemModule = JGuiManager.GetMoudle(itemGrid, "M_Car_SeatItem", WindowType.UI, 0)
	if itemModule ~= nil then
		local seatBtn = itemModule:Get("CarBg")
		seatBtn:AddOnButton(function ( ... )
			SoundMgr.Play(10001)
			_P.OnClickCarSeat(self, data)
		end, nil, 0.95)

		local selectImg = itemModule:Get("LightImg")
		if selectImg then
			local selectTween = selectImg.CachedTran:GetJTweener(SelectParkingTween)
			selectTween:Play()
		end
		
		_P.UpdateParkingData(itemModule, data)
	end

	seatItem.module = itemModule
	seatItem.data = data
	return seatItem
end


-- 更新车位数据
function _P.UpdateParkingData(itemModule, data)
	local hasRect = itemModule:Get("HasRect")
	local addImg = itemModule:Get("AddImg")
	local openText = itemModule:Get("OpenText")
	local stopImg = itemModule:Get("StopImg")
	local redImg = itemModule:Get("Spot")
	local qualityImg = itemModule:Get("CarBg")
	openText.Text = Csv.Text("car_main_open")

	hasRect.Activity = data.state == MCar.SeatStateEnum.Equiping
	addImg.Activity = data.state == MCar.SeatStateEnum.UnEquip
	openText.Activity = data.state == MCar.SeatStateEnum.UnOpen
	stopImg.Activity = data.state == MCar.SeatStateEnum.Stop

	local isShowRed = false
	if data.state == MCar.SeatStateEnum.Equiping then
		local carData = MCar.GetCurCarData(data.carid)
		if carData then
			local itemConf = Csv.Item[carData.carid]
			local carConf = Csv.Car[carData.carid]
			if itemConf then
				qualityImg.SpriteName = itemConf.colorIcon
				qualityImg.SizeDelta = Vector2(120, 120)
				itemModule:Get("CarIcon").SpriteName = carConf.icon
				itemModule:Get("CarLv").Text = "Lv" .. carData.level
				itemModule:Get("CarStarLv").Text = Csv.Text("car_main_jieji") .. carData.star

				local qualityNum = (carData.color > 6 and 6) or carData.color
				itemModule:Get("CarQualifications").SpriteName = QualityIconNameArr[qualityNum]
			end
		end

		isShowRed = MCar.CheckShowRed(data.state, carData)
	else
		qualityImg.SpriteName = "ty_018"
		qualityImg.SizeDelta = Vector2(120, 120)

		isShowRed = MCar.CheckShowRed(data.state, nil)
	end

	redImg.Activity = isShowRed
end


-- 点击车位
function _P.OnClickCarSeat(self, data, isPlay)
	if data.state == MCar.SeatStateEnum.Equiping and self.curSelectSeat.index == data.index then return end

	if data.state == MCar.SeatStateEnum.Equiping then
		_P.OnPlayChangeAnim(self, data, true)
	elseif data.state == MCar.SeatStateEnum.UnEquip then
		WindowMgr.Create("UCarGarageGive", MCar.GarageTypeEnum.Equiping, data.index)
	elseif data.state == MCar.SeatStateEnum.UnOpen then
		WindowMgr.Create("UCarOpenSeat", data.index)
	elseif data.state == MCar.SeatStateEnum.Stop then
		CCommon.ShowError(Csv.Text("car_main_openErr"))
	end
end


-- 选中图标，播放更换座驾动画
function _P.OnPlayChangeAnim(self, data, isPlay)
	local curSelectItem = self.mCarSeatItems[data.index]
	local carData = MCar.GetCurCarData(curSelectItem.data.carid)
	local carConf = nil
	if carData then
		carConf = Csv.Car[carData.carid]
		self.NewCarIcon.SpriteName = carConf.body
		local carCheelPos1 = carConf.carCheelFrontPos or {0, 0}
		local carCheelPos2 = carConf.carCheelLaterPos or {0, 0}
		self.FrontActorPanel2.LocalPosition = Vector2(carCheelPos1[1], carCheelPos1[2])
		self.LaterActorPanel2.LocalPosition = Vector2(carCheelPos2[1], carCheelPos2[2])
	end

	if carConf ~= nil and carConf.engineSound ~= nil and carConf.engineSound ~= 0 then
		SoundMgr.Play(carConf.engineSound)
	end

	_P.OnSelectParking(self, data.index, curSelectItem)

	self:Lock()
	self.LockRect.Activity = true
	local changeTween = self.CarTweenRect.CachedTran:GetJTweener(ChangeCarMoveTween)
	changeTween:SetOnComplete(function()
		self:Unlock()
		self.LockRect.Activity = false

		if carConf then
			self.OldCarIcon.SpriteName = carConf.body
		end
		self.OldCarIcon.LocalPosition = Vector2.zero
		self.NewCarIcon.LocalPosition = OldCarPosVec
	end)
	changeTween:Play()

	local animTimer = self.FrontActorPanel1:AddOnTime(function()
		if animTimer then
			animTimer:Destroy()
		end

		local curCarConf = _P.GetCurCarConf(self)
		if curCarConf then
			CCommon.CreateEffect(self.FrontActorPanel1, curCarConf.carCheelFrontId)
			CCommon.CreateEffect(self.LaterActorPanel1, curCarConf.carCheelLaterId)
		end

		if carConf then
			CCommon.CreateEffect(self.FrontActorPanel2, carConf.carCheelFrontId)
			CCommon.CreateEffect(self.LaterActorPanel2, carConf.carCheelLaterId)
		end
	end, nil, 0.1)

	local destroyTimer = self.LaterActorPanel1:AddOnTime(function()
		if destroyTimer then
			destroyTimer:Destroy()
		end

		_P.DestroyEffect(self)
	end, nil, 1.1)

	local updateTimer = self.mModule.SelfRect:AddOnTime(function()
		if updateTimer then
			updateTimer:Destroy()
		end

		self.curSelectSeat = curSelectItem.data
		_P.SetCarData(self, self.curSelectSeat.carid, isPlay)
	end, nil, 0.6)
end


-- 更新当前选中图片状态
function _P.UpdateSelectState(self, index, isPlaySound)
	local curSelectItem = self.mCarSeatItems[index]
	_P.OnSelectParking(self, index, curSelectItem)

	self.curSelectSeat = curSelectItem.data
	_P.SetCarData(self, self.curSelectSeat.carid, isPlaySound)
end


function _P.OnSelectParking(self, index, curSelectItem)
	if self.curSelectSeat and self.curSelectSeat then
		local lastIndex = self.curSelectSeat.index
		local lastSelectData = self.mCarSeatItems[lastIndex]
		if lastSelectData then
			lastSelectData.module:Get("LightImg").Activity = false
		end
	end

	local hasItem = curSelectItem and curSelectItem.data.carid
	if hasItem then
		curSelectItem.module:Get("LightImg").Activity = true
	end
end


-- 设置座驾数据
function _P.SetCarData(self, id, isPlaySound)
	local carData = MCar.GetCurCarData(id)
	self.NoneText.Activity = not carData
	self.CarTweenRect.Activity = carData
	if not carData then return end

	local carId = carData.carid
	local carConf = Csv.Car[carId]

	self.OldCarIcon.SpriteName = carConf.body
	local carCheelPos1 = carConf.carCheelFrontPos or {0, 0}
	local carCheelPos2 = carConf.carCheelLaterPos or {0, 0}
	self.FrontActorPanel1.LocalPosition = Vector2(carCheelPos1[1], carCheelPos1[2])
	self.LaterActorPanel1.LocalPosition = Vector2(carCheelPos2[1], carCheelPos2[2])
	
	local changeBtn = self.mModule:Get("ChangeBtn")
	changeBtn:AddOnButton(function ( ... )
		SoundMgr.Play(10001)
		WindowMgr.Create("UCarGarageGive", MCar.GarageTypeEnum.Change, self.curSelectSeat.index, nil, self.curSelectSeat.carid)
	end, nil, 0.9)

	_P.SetCarAttrData(self, carData, carId)
	_P.SetCarGraphData(self, carConf, carData)
	_P.SetCarStaffData(self, carConf, _P.GetSortCarStaff(carData.staffs))
	_P.SetCarUpData(self, carConf, carData)

	if isPlaySound and carConf.engineSound then
		SoundMgr.Play(carConf.engineSound) -- 播放引擎声
	end
end


-- 座驾员工按照位置排序
function _P.GetSortCarStaff(list)
	if not list then return nil end

	local sortList = {}
	for k,v in pairs(list) do
		sortList[v.key] = v
	end

	return sortList
end


-- 设置资质值
function _P.SetCarAttrData(self, data, carId)
	local attrData = data.Attr
	local totalAttr = MCar.GetTotalAttrs(attrData)
	self.mModule:Get("WholeAttr").Text = Csv.Text("Target_company_zizhi")
	self.mModule:Get("WholeAttrNum").Text = totalAttr
	self.mModule:Get("Score").Text = Csv.Text("car_main_pinfeng")
	self.mModule:Get("ScoreNum").Text = data.score

	local attrLightList = {}
	attrLightList[1] = MCar.GetAttrLightNum(attrData.Wuli, 1, carId)
	attrLightList[2] = MCar.GetAttrLightNum(attrData.Zhili, 2, carId)
	attrLightList[3] = MCar.GetAttrLightNum(attrData.Zhengzhi, 3, carId)
	attrLightList[4] = MCar.GetAttrLightNum(attrData.Meili, 4, carId)
	
	for i=1, 4 do
		local lightNum = attrLightList[i]
		local nameStr = "Attr" .. i .. "Value"
		for j=1, MCar.CarSeatOpenMax do
			local valueImg = self.mModule:Get(nameStr .. j)
			if valueImg then
				valueImg.Activity = j <= lightNum
			end
		end

		self.mModule:Get("AttrText" .. i).Text = Csv.Text("car_main_attri" .. i)
		
		local numText = self.mModule:Get("AttrNum" .. i)
		if i == 1 then
			numText.Text = attrData.Wuli
		elseif i == 2 then
			numText.Text = attrData.Zhili
		elseif i == 3 then
			numText.Text = attrData.Zhengzhi
		else
			numText.Text = attrData.Meili
		end
	end
end


-- 设置座驾评分数据
function _P.SetCarGraphData(self, carConf, carData)
	self.mModule:Get("CarName").Text = carConf.name
	self.mModule:Get("CarModel").Text = carConf.model
	self.mModule:Get("CarLevel").Text = Csv.Text("car_main_level") .. carData.level
	self.mModule:Get("Num").Text = carData.star

	local qualityData = MCar.GetCarStarIcon(carData.star)
	local qualityNum = (carData.color > 6 and 6) or carData.color
	self.mModule:Get("CarQuality").SpriteName = QualityIconNameArr[qualityNum]
	self.mModule:Get("Circular").SpriteName = qualityData.name

	for i=1, MCar.CarSeatOpenMax do
		self.mModule:Get("Arc" .. i).Activity = i <= qualityData.num
	end

	self.mModule:Get("PointerRect").LocalEulerAngles = Vector3(0, 0, PointerRotateActs[qualityData.index])
end


-- 设置座驾员工数据
function _P.SetCarStaffData(self, carConf, staffList)
	local contentTransform = self.mModule:Get("StaffList")
	contentTransform:DestroyChildren()

	self.mCarStaffItems = {}
	local seatNum = carConf.seatNum
	for i=1, seatNum do
		if staffList then
			self.mCarStaffItems[i] = _P.OnCreateStaffItem(self, contentTransform, staffList[i], i)
		else
			self.mCarStaffItems[i] = _P.OnCreateStaffItem(self, contentTransform, nil, i)
		end
	end
end


function _P.OnCreateStaffItem(self, itemGrid, staffData, index)
	local staffItem = {}
	local itemModule = JGuiManager.GetMoudle(itemGrid, "M_Car_Main_Staff_Item", WindowType.UI, 0)
	if itemModule ~= nil then
		local iconBtn = itemModule.SelfRect
		iconBtn:AddOnButton(function ( ... )
			SoundMgr.Play(10001)
			_P.OnClickStaffItem(self, index)
		end, nil, 0.9)
		
		_P.UpdateOneStaffData(self, itemModule, staffData)
	end

	staffItem.data = staffData
	staffItem.module = itemModule
	return staffItem
end


function _P.OnClickStaffItem(self, index)
	local data = self.mCarStaffItems[index].data
	if data then
		_P.OnClickCarStaff(self, data.value, index)
	else
		_P.OnClickCarStaff(self, nil, index)
	end
end


-- 设置单个员工item数据
function _P.UpdateOneStaffData(self, itemModule, staffData)
	local iconImg = itemModule:Get("StaffIcon")
	local addImg = itemModule:Get("AddImg")
	local staffName = itemModule:Get("Name")
	iconImg.Activity = staffData
	addImg.Activity = not staffData

	if staffData then
		local staffConf = Csv.Personnel[staffData.value]
		if staffConf then
			iconImg.SpriteName = staffConf.asset
			staffName.Text = staffConf.name
		end
	end
end


-- 点击座驾员工
function _P.OnClickCarStaff(self, staffid, index)
	if staffid then
		WindowMgr.Create("UCarRideDetail", MStaff.GetStaffDataByID(staffid), self.curSelectSeat.carid, index)
	else
		WindowMgr.Create("UCarSelectStaff", self.curSelectSeat.carid, index, false)
	end
end


-- 设置座驾升星、升级数据
function _P.SetCarUpData(self, carConf, carData)
	self.TabImg1 = self.mModule:Get("Tab1")
	self.TabImg2 = self.mModule:Get("Tab2")
	self.TabImg3 = self.mModule:Get("Tab3")
	-- 先屏蔽资质强化
	self.levelUpRect = self.mModule:Get("LevelUpRect")
	self.mModule:Get("Tips").Text = Csv.Text("car_main_leveluptip")

	self.upBtn = self.mModule:Get("C_Btn_b")
	self.upBtn:AddOnButton(function ( ... )
		if not _P.CheckBtnIsClick(1) then
			return
		end

		SoundMgr.Play(10001)
		_P.OnClickUp(self)
	end, nil, 0.9)

	local redImg = self.mModule:Get("sport2")
	local isShowRed = MCar.CheckIsHasUp(carData)
	redImg.Activity = isShowRed

	local redUpImg = self.mModule:Get("sport3")
	local isShow = MCar.CheckIsCanUpApti(carData)
	redUpImg.Activity = isShow

	self.upItemGrid:DestroyChildren()
	if self.SelectPageId == Define.SysId.Car_LevelUp then
		_P.SetCarLevelUpData(self)
	elseif self.SelectPageId == Define.SysId.Car_StarUp then
		_P.SetCarStarUpData(self)
	elseif self.SelectPageId == Define.SysId.Car_AptiUp then
		_P.SetAptiUpData(self)
	end
end


-- 请求升级或者升星
function _P.OnClickUp(self)
	local carData = self.SelectPageUpData
	if not carData then return end

	local costArr = {}
	if self.SelectPageId == Define.SysId.Car_LevelUp then
		if carData.level >= MCar.CarMaxLevel then
			CCommon.ShowError(Csv.Text("err_Car_LevelMax"))
			return
		end

		local costId = carData.color * 1000 + carData.level
		local costConf = Csv.CarUpgradeCost[costId]

		-- 等级不足
		local nowLevel = MPlayer.GetLevel()
		if nowLevel < costConf.playerLv then
			CCommon.ShowError(Csv.Text("car_main_rechiveUp", {num = costConf.playerLv}))
			return
		end

		costArr = costConf.cost
	else
		if carData.star >= MCar.CarMaxStarLevel then
			CCommon.ShowError(Csv.Text("err_Car_LevelMax"))
			return
		end

		local costId = carData.color * 1000 + carData.star
		local costConf = Csv.CarUpStarCost[costId]
		if costConf then
			costArr = costConf.cost
		end
	end

	-- 物品不足跳转
	if costArr then
		if not MBag.CheckItemEnoughForArray(costArr) then
			return
		end
	end

	if self.SelectPageId == Define.SysId.Car_LevelUp then
		CCar.CarLevelUpReq(carData.id)
	else
		CCar.CarStarUpReq(carData.id)
	end
end


function _P.GetFuncs(funcTable)
	local sortTable = {}
	for k,v in pairs(funcTable) do
		if v.id ~= Define.SysId.Car and v.sort <= 3 then
			sortTable[#sortTable + 1] = v
		end
	end

	table.sort(sortTable,function(a,b)
		return a.sort < b.sort
	end)

	return sortTable
end


function _P.OnChoose(self, funcId)
	if self.SelectPageId == funcId then return end

	self.SelectPageId = funcId
	self.upItemGrid:DestroyChildren()

	if funcId == Define.SysId.Car_LevelUp then
		self.UpRect.Activity = true
		self.IntensifyRect.Activity = false
		self.MaxText.Text = Csv.Text("car_main_max")
		self.MaxText.LocalPosition = DefaultPos
		_P.SetCarLevelUpData(self)
	elseif funcId == Define.SysId.Car_StarUp then
		self.UpRect.Activity = true
		self.IntensifyRect.Activity = false
		self.MaxText.Text = Csv.Text("car_main_starMax")
		self.MaxText.LocalPosition = DefaultPos
		_P.SetCarStarUpData(self)
	elseif funcId == Define.SysId.Car_AptiUp then
		self.UpRect.Activity = false
		self.IntensifyRect.Activity = true
		self.MaxText.Text = Csv.Text("car_aptiUp_max")
		self.MaxText.LocalPosition = AptiUpPos
		_P.SetAptiUpData(self)
	end

	self.upText.Text = Csv.Func[funcId].name
end


-- 升级数据
function _P.SetCarLevelUpData(self)
	local carData = MCar.GetCurCarData(self.curSelectSeat.carid)
	if not carData then return end
	local carConf = Csv.Car[carData.carid]

	self.SelectPageUpData = carData
	-- self.TabImg1.Color = DefaultColor
	-- self.TabImg2.Color = LightColor
	-- self.TabImg3.Color = LightColor

	local isMax = carData.level >= MCar.CarMaxLevel
	self.MaxText.Activity = isMax
	self.upBtn.Activity = not isMax

	for i=1, 4 do
		local curAttrNum = 0
		local nextAttrNum = 0
		if i == 1 then
			curAttrNum = MCar.GetCarAttrNum(carData.Attr.Wuli, carData.level)
			nextAttrNum = MCar.GetCarAttrNum(carData.Attr.Wuli, carData.level + 1)
		elseif i == 2 then
			curAttrNum = MCar.GetCarAttrNum(carData.Attr.Zhili, carData.level)
			nextAttrNum = MCar.GetCarAttrNum(carData.Attr.Zhili, carData.level + 1)
		elseif i == 3 then
			curAttrNum = MCar.GetCarAttrNum(carData.Attr.Zhengzhi, carData.level)
			nextAttrNum = MCar.GetCarAttrNum(carData.Attr.Zhengzhi, carData.level + 1)
		else
			curAttrNum = MCar.GetCarAttrNum(carData.Attr.Meili, carData.level)
			nextAttrNum = MCar.GetCarAttrNum(carData.Attr.Meili, carData.level + 1)
		end
		
		self.mModule:Get("CurAttr" .. i).Text = '+' .. ((curAttrNum == -1 and "MAX") or curAttrNum)
		self.mModule:Get("NextAttr" .. i).Text = '+' .. ((nextAttrNum == -1 and "MAX") or nextAttrNum)
	end
	self.levelUpRect.Activity = true

	local costId = carData.color * 1000 + carData.level
	local costConf = Csv.CarUpgradeCost[costId]
	if costConf then
		local costData = costConf.cost[1]
		local itemConf = Csv.Item[costData[1]]
		local curGetNum = MBag.GetItemNum(itemConf.id)
		self.mModule:Get("CostIcon").SpriteName = itemConf.icon

		_P.SetCostTextData(self, isMax, curGetNum, costData[2])
		self.levelUpCostId = itemConf.id
	end
end


function _P.SetCostTextData(self, isMax, curGetNum, maxNum)
	local numText = self.mModule:Get("CostNumText")
	if isMax then
		numText.Text = Csv.Text("car_main_maxShow", {num = curGetNum})
	else
		if curGetNum >= maxNum then
			numText.Text = Csv.Text("car_main_greenShow", {num = curGetNum, need = maxNum})
		else
			numText.Text = Csv.Text("car_main_redShow", {num = curGetNum, need = maxNum})
		end
	end
end


-- 升星数据
function _P.SetCarStarUpData(self)
	local carData = MCar.GetCurCarData(self.curSelectSeat.carid)
	if not carData then return end
	local carConf = Csv.Car[carData.carid]
	self.SelectPageUpData = carData
	-- self.TabImg1.Color = LightColor
	-- self.TabImg2.Color = DefaultColor
	-- self.TabImg3.Color = LightColor

	local isMax = carData.star >= MCar.CarMaxStarLevel
	self.MaxText.Activity = isMax
	self.upBtn.Activity = not isMax
	self.upItemGrid.Activity = not isMax
	
	for i=1, 4 do
		local curAttrNum = 0
		local nextAttrNum = 0
		if i == 1 then
			curAttrNum = MCar.GetCarStarAddNum(carData.star, carConf.id, 1)
			nextAttrNum = MCar.GetCarStarAddNum(carData.star + 1, carConf.id, 1)
		elseif i == 2 then
			curAttrNum = MCar.GetCarStarAddNum(carData.star, carConf.id, 2)
			nextAttrNum = MCar.GetCarStarAddNum(carData.star + 1, carConf.id, 2)
		elseif i == 3 then
			curAttrNum = MCar.GetCarStarAddNum(carData.star, carConf.id, 3)
			nextAttrNum = MCar.GetCarStarAddNum(carData.star + 1, carConf.id, 3)
		else
			curAttrNum = MCar.GetCarStarAddNum(carData.star, carConf.id, 4)
			nextAttrNum = MCar.GetCarStarAddNum(carData.star + 1, carConf.id, 4)
		end
		
		self.mModule:Get("CurAttr" .. i).Text = Csv.Text("car_main_attrPro" .. i, {num = ((curAttrNum == -1 and "MAX") or curAttrNum)})
		self.mModule:Get("NextAttr" .. i).Text = (nextAttrNum == -1 and "MAX") or Csv.Text("car_main_addPro", {num = nextAttrNum})
	end
	self.levelUpRect.Activity = false

	if not isMax then
		_P.SetCostItemData(self, carData)
	end
end


function _P.SetCostItemData(self, carData)
	local costId = carData.color * 1000 + carData.star
	local costConf = Csv.CarUpStarCost[costId]
	if costConf then
		self.upItemGrid:DestroyChildren()
		for k,v in pairs(costConf.cost) do
			local itemModule = JGuiManager.GetMoudle(self.upItemGrid, "M_Car_CostItem", WindowType.UI, 0)
			if itemModule ~= nil then
				local itemConf = Csv.Item[v[1]]
				local selfRect = itemModule.SelfRect
				local curGetNum = MBag.GetItemNum(itemConf.id)

				selfRect.SpriteName = itemConf.colorIcon
				itemModule:Get("Icon").SpriteName = itemConf.icon

				local numText = itemModule:Get("Num")
				if curGetNum >= v[2] then
					numText.Text = Csv.Text("car_main_greenShow", {num = curGetNum, need = v[2]})
				else
					numText.Text = Csv.Text("car_main_redShow", {num = curGetNum, need = v[2]})
				end

				selfRect:AddOnButton(function ( ... )
					SoundMgr.Play(10001)
					WindowMgr.Create("UBagDetailPop", v[1])
				end, nil, 0.9)
			end
		end
	end
end


-- 座驾资质强化数据
function _P.SetAptiUpData(self)
	local module = self.mModule
	local carData = MCar.GetCurCarData(self.curSelectSeat.carid)
	if not carData then return end
	local carConf = Csv.Car[carData.carid]

	self.SelectPageUpData = carData
	-- self.TabImg1.Color = LightColor
	-- self.TabImg2.Color = LightColor
	-- self.TabImg3.Color = DefaultColor

	local isMax = carData.intensifylv >= MaxAptiUpNum
	self.MaxText.Activity = isMax
	self.btnRect.Activity = not isMax

	module:Get("LevelTitle").Text = Csv.Text("car_aptiUp_level")

	local levelStr = (isMax and 'car_aptiUp_levelNumMax') or 'car_aptiUp_levelNum'
	module:Get("LevelNum").Text = Csv.Text(levelStr, {curNum = carData.intensifylv or 0, maxNum = MaxAptiUpNum})

	-- 资质经验消耗
	local intensifyConf = Csv.CarUpQualification[carData.carid * 1000 + (carData.intensifylv or 0)]
	if intensifyConf == nil then return end

	_P.SetAptiUpAttrData(self, carData, intensifyConf)
	_P.SetAptiUpCostData(self, intensifyConf)
end


function _P.SetAptiUpCostData(self, intensifyConf)
	local module = self.mModule
	local costExp = intensifyConf.aptiExpUpCost
	if costExp and #costExp == 2 then
		local costExpConf = Csv.item[costExp[1]]
		if costExpConf then
			module:Get("icon1").SpriteName = costExpConf.icon
			module:Get("gl1").Text = Csv.Text("car_aptiUp_pro")
			module:Get("glnum1").Text = Csv.Text("car_aptiUp_proNum", {num = intensifyConf.aptiExpUpPro / 100})

			local costText = module:Get("num1")
			local curGetNum = MBag.GetItemNum(costExpConf.id)
			local maxNum = costExp[2]
			if curGetNum >= maxNum then
				costText.Text = Csv.Text("car_main_greenShow", {num = curGetNum, need = maxNum})
			else
				costText.Text = Csv.Text("car_main_redShow", {num = curGetNum, need = maxNum})
			end
		end
	end
	

	-- 道具消耗
	local costItem = intensifyConf.aptiItemUpCost
	if costItem and #costItem == 2 then
		local costItemConf = Csv.item[costItem[1]]
		if costItemConf then
			module:Get("icon2").SpriteName = costItemConf.icon
			module:Get("gl2").Text = Csv.Text("car_aptiUp_pro")
			module:Get("glnum2").Text = Csv.Text("car_aptiUp_proNum", {num = intensifyConf.aptiItemUpPro / 100})

			local costItemText = module:Get("num2")
			local curItemGetNum = MBag.GetItemNum(costItemConf.id)
			local maxItemNum = costItem[2]
			if curItemGetNum >= maxItemNum then
				costItemText.Text = Csv.Text("car_main_greenShow", {num = curItemGetNum, need = maxItemNum})
			else
				costItemText.Text = Csv.Text("car_main_redShow", {num = curItemGetNum, need = maxItemNum})
			end
		end
	end
end


function _P.SetAptiUpAttrData(self, data, intensifyConf)
	local attrData = data.Attr
	local attrLightList = {}
	local carId = data.carid
	attrLightList[1] = MCar.GetAttrLightNum(attrData.Wuli, 1, carId)
	attrLightList[2] = MCar.GetAttrLightNum(attrData.Zhili, 2, carId)
	attrLightList[3] = MCar.GetAttrLightNum(attrData.Zhengzhi, 3, carId)
	attrLightList[4] = MCar.GetAttrLightNum(attrData.Meili, 4, carId)
	
	for i=1, 4 do
		--self.mModule:Get("AptiShow" .. i).Text = Csv.Text("car_main_attri" .. i) .. ':'
		local numText = self.mModule:Get("AptiNum" .. i)
		if i == 1 then
			numText.Text = attrData.Wuli
		elseif i == 2 then
			numText.Text = attrData.Zhili
		elseif i == 3 then
			numText.Text = attrData.Zhengzhi
		else
			numText.Text = attrData.Meili
		end

		-- 加成
		local addText = self.mModule:Get("AptiAdd" .. i)
		local curAddNum = _P.GetCurAttrNum(intensifyConf.aptiUpAdd, i)
		addText.Activity = curAddNum > 0
		addText.Text = '+' .. curAddNum
	end
end


function _P.GetCurAttrNum(list, typeId)
	for k,v in pairs(list) do
		if k == typeId and #v == 2 then
			return v[2]
		end
	end

	return 0
end


-- 开启车位成功返回
function _R.OpenSeatBack(self, index)
	CCommon.ShowError(Csv.Text("car_openSeat_success"))

	local updateItem = self.mCarSeatItems[index]
	if updateItem then
		updateItem.data.state = MCar.SeatStateEnum.UnEquip
		_P.UpdateParkingData(updateItem.module, updateItem.data)
	end

	local nextItem = self.mCarSeatItems[index + 1]
	if nextItem then
		nextItem.data.state = MCar.SeatStateEnum.UnOpen
		_P.UpdateParkingData(nextItem.module, nextItem.data)
	end
end


-- 装备座驾成功返回
function _R.EquipCarBack(self, index, id)
	local updateItem = self.mCarSeatItems[index]
	updateItem.data.state = MCar.SeatStateEnum.Equiping
	updateItem.data.carid = id
	_P.UpdateParkingData(updateItem.module, updateItem.data)
	_P.UpdateSelectState(self, index, true)
	_P.UpdateParkingRed(self)

	-- 更新总战力
	self.totalPower.Text = _P.GetTotalPowerNum(self)
end


-- 更换座驾成功返回
function _R.ChangeCarBack(self, index, carData)
	local carConf = Csv.Car[carData.carid]
	self.NewCarIcon.SpriteName = carConf.body
	local carCheelPos1 = carConf.carCheelFrontPos or {0, 0}
	local carCheelPos2 = carConf.carCheelLaterPos or {0, 0}
	self.FrontActorPanel2.LocalPosition = Vector2(carCheelPos1[1], carCheelPos1[2])
	self.LaterActorPanel2.LocalPosition = Vector2(carCheelPos2[1], carCheelPos2[2])

	if carConf ~= nil and carConf.engineSound ~= nil and carConf.engineSound ~= 0 then
		SoundMgr.Play(carConf.engineSound)
	end

	self:Lock()
	self.LockRect.Activity = true
	local changeTween = self.CarTweenRect.CachedTran:GetJTweener(ChangeCarMoveTween)
	changeTween:SetOnComplete(function()
		self:Unlock()
		self.LockRect.Activity = false

		self.OldCarIcon.SpriteName = carConf.body
		self.OldCarIcon.LocalPosition = Vector2.zero
		self.NewCarIcon.LocalPosition = OldCarPosVec
	end)
	changeTween:Play()

	local animTimer = self.FrontActorPanel1:AddOnTime(function()
		if animTimer then
			animTimer:Destroy()
		end

		local curCarConf = _P.GetCurCarConf(self)
		if curCarConf then
			CCommon.CreateEffect(self.FrontActorPanel1, curCarConf.carCheelFrontId)
			CCommon.CreateEffect(self.LaterActorPanel1, curCarConf.carCheelLaterId)
		end
		CCommon.CreateEffect(self.FrontActorPanel2, carConf.carCheelFrontId)
		CCommon.CreateEffect(self.LaterActorPanel2, carConf.carCheelLaterId)
	end, nil, 0.1)

	local destroyTimer = self.LaterActorPanel1:AddOnTime(function()
		if destroyTimer then
			destroyTimer:Destroy()
		end

		_P.DestroyEffect(self)
	end, nil, 1.1)

	local updateTimer = self.mModule.SelfRect:AddOnTime(function()
		if updateTimer then
			updateTimer:Destroy()
		end

		local updateItem = self.mCarSeatItems[index]
		updateItem.data.carid = carData.id
		_P.UpdateParkingData(updateItem.module, updateItem.data)
		_P.UpdateSelectState(self, index, true)

		-- 更新下方升级数据
		if self.SelectPageId == Define.SysId.Car_LevelUp then
			_P.SetCarLevelUpData(self)
		elseif self.SelectPageId == Define.SysId.Car_StarUp then
			_P.SetCarStarUpData(self)
		elseif self.SelectPageId == Define.SysId.Car_AptiUp then
			_P.SetAptiUpData(self)
		end

		-- 更新总战力
		self.totalPower.Text = _P.GetTotalPowerNum(self)
	end, nil, 0.6)
end


function _P.DestroyEffect(self)
	self.FrontActorPanel1:DestroyChildren()
	self.FrontActorPanel2:DestroyChildren()
	self.LaterActorPanel1:DestroyChildren()
	self.LaterActorPanel2:DestroyChildren()
end


-- 座驾升级成功返回
function _R.CarLevelUpBack(self, data)
	self:Lock()
	self.LockRect.Activity = true
	SoundMgr.Play(10027)
	CCommon.CreateEffect(self.mModule:Get("LevelUpActorPanel"), LevelUpAtorId, nil, function( ... )
		-- 更新下方数据
		_P.SetCarLevelUpData(self)

		self:Unlock()
		self.LockRect.Activity = false

		-- 更新上头数据
		local updateItem = self.mCarSeatItems[self.curSelectSeat.index]
		_P.UpdateParkingData(updateItem.module, updateItem.data)

		-- 更新等级文本
		self.mModule:Get("CarLevel").Text = Csv.Text("car_main_level") .. data.level
		self.mModule:Get("ScoreNum").Text = data.score

		-- 更新总战力
		self.totalPower.Text = _P.GetTotalPowerNum(self)
	end)

	local redUpImg = self.mModule:Get("sport3")
	local isShowRed = MCar.CheckIsCanUpApti(data)
	redUpImg.Activity = isShowRed
end


-- 座驾升星成功返回
function _R.CarStarUpBack(self, data)
	self:Lock()
	self.LockRect.Activity = true
	SoundMgr.Play(10027)
	CCommon.CreateEffect(self.mModule:Get("LevelUpActorPanel"), LevelUpAtorId, nil, function( ... )
		self:Unlock()
		self.LockRect.Activity = false

		-- 更新下方数据
		_P.SetCarStarUpData(self)
		self.mModule:Get("ScoreNum").Text = data.score
		
		local curStar = data.star
		local starData = MCar.GetCarStarIcon(curStar)
		if curStar > 5 and starData.num == 1 then
			local nextAngles = PointerRotateActs[starData.index]
			local tweenRect = self.mModule:Get("PointerRect")
			local angleTween = tweenRect.CachedTran:GetJTweener(CarPointerAngleRotate)
			local tweenData = angleTween:GetTweenForType(16)
			if tweenData then
				tweenData.ToAngleZ = nextAngles
			end
	
			angleTween:SetOnComplete(function()
				self.mModule:Get("Circular").SpriteName = starData.name
				
				for i=1, 5 do
					local animStar = self.mModule:Get("Arc" .. i)
					animStar.Activity = false
				end
	
				_P.OnPlayStarAnim(self, 1, true)
				_P.OnPlayAnimFinish(self, data)
			end)
			angleTween:Play()
		else
			local animStar = self.mModule:Get("Arc" .. starData.num)
			local actorPanel = self.mModule:Get("StarUpActorPanel")
			local actorPos = StarPosVec[starData.num]
			if actorPos then
				actorPanel.LocalPosition = Vector2(actorPos[1], actorPos[2])
			end
	
			animStar.Activity = true
			CCommon.CreateEffect(actorPanel, StarUpAtorId, nil, function( ... )
				_P.OnPlayAnimFinish(self, data)
			end)
		end
	
		-- 更新红点
		_P.UpdateStarUpRed(self, data)

		-- 更新总战力
		self.totalPower.Text = _P.GetTotalPowerNum(self)
	end)
end


-- 播放单个星级特效
function _P.OnPlayStarAnim(self, index, isShow)
	local animStar = self.mModule:Get("Arc" .. index)
	local actorPanel = self.mModule:Get("StarUpActorPanel")
	local actorPos = StarPosVec[index]
	actorPanel.LocalPosition = Vector2(actorPos[1], actorPos[2])
	
	CCommon.CreateEffect(actorPanel, StarUpAtorId, nil, function( ... )
		animStar.Activity = isShow
	end)
end


function _P.OnPlayAnimFinish(self, data)
	-- 更新上头数据
	local updateItem = self.mCarSeatItems[self.curSelectSeat.index]
	_P.UpdateParkingData(updateItem.module, updateItem.data)

	-- 更新等级文本
	self.mModule:Get("Num").Text = data.star
end


-- 员工驾乘成功返回
function _R.StaffRideCarBack(self, updateStaff, data)
	local updateItem = self.mCarStaffItems[data.seatid]
	updateItem.data = updateStaff
	_P.UpdateOneStaffData(self, updateItem.module, updateStaff)

	-- 播放加成动画
	if data and data.addAttr then
		local addAnim = self.mModule:Get("AddAnim")
		addAnim.LocalPosition = updateItem.module.SelfRect.RootCanvasPos

		local staffData = MStaff.GetStaffDataByID(data.staffid)
		local staffConf = Csv.Personnel[staffData.id]
		local attr = data.addAttr
		local playAnimList = {}
		if attr.Wuli and attr.Wuli > 0 then playAnimList[#playAnimList + 1] = Csv.Text("car_main_attrget1", {name = staffConf.name, num = attr.Wuli}) end
		if attr.Zhili and attr.Zhili > 0 then playAnimList[#playAnimList + 1] = Csv.Text("car_main_attrget2", {name = staffConf.name, num = attr.Zhili}) end
		if attr.Zhengzhi and attr.Zhengzhi > 0 then playAnimList[#playAnimList + 1] = Csv.Text("car_main_attrget3", {name = staffConf.name, num = attr.Zhengzhi}) end
		if attr.Meili and attr.Meili > 0 then playAnimList[#playAnimList + 1] = Csv.Text("car_main_attrget4", {name = staffConf.name, num = attr.Meili}) end
		
		for i,v in ipairs(playAnimList) do
			CCommon.ShowFlyText(addAnim, v , (i - 1) * 0.5)
		end
	end
end


-- 防止多次点击
function _P.CheckBtnIsClick(delayTime)
	if (UnityTime.time - lastTime) < delayTime then
		return false
	end

	lastTime = UnityTime.time
	return true
end


-- 装备后更新红点
function _P.UpdateParkingRed(self)
	local seatList = self.mCarSeatItems
	for k,v in pairs(seatList) do
		local itemModule = v.module
		local data = v.data
		if itemModule then
			local redImg = itemModule:Get("Spot")
			local isShowRed = false
			if data.state == MCar.SeatStateEnum.Equiping then
				local carData = MCar.GetCurCarData(data.carid)
				isShowRed = MCar.CheckShowRed(data.state, carData)
			else
				isShowRed = MCar.CheckShowRed(data.state, nil)
			end

			redImg.Activity = isShowRed
		end
	end
end


-- 升阶后更新升阶红点
function _P.UpdateStarUpRed(self, carData)
	local redImg = self.mModule:Get("sport2")
	local isShowRed = MCar.CheckIsHasUp(carData)
	redImg.Activity = isShowRed

	_P.UpdateParkingRed(self)
end


-- 当材料数量发生变化时，更新数据
function _P.UpdateCostItemData(self, itemid)
	local itemConf = Csv.Item[itemid]
	if itemConf and itemConf.type == 6 then
		local carData = MCar.GetCurCarData(self.curSelectSeat.carid)
		_P.SetCostItemData(self, carData)
	end
end


function _P.UpdateRed(self, itemid)
	local itemConf = Csv.Item[itemid]
	if itemConf and itemConf.type == 6 then
		local carData = MCar.GetCurCarData(self.curSelectSeat.carid)
		_P.UpdateStarUpRed(self, carData)
	end
end


-- 升级材料发生变化
function _P.UpdateLevelUpCost(self, itemid)
	local carData = MCar.GetCurCarData(self.curSelectSeat.carid)
	if not carData then return end

	local isMax = carData.level >= MCar.CarMaxLevel
	local costId = carData.color * 1000 + carData.level
	local costConf = Csv.CarUpgradeCost[costId]
	if costConf then
		local costData = costConf.cost[1]
		local curGetNum = MBag.GetItemNum(costData[1])

		_P.SetCostTextData(self, isMax, curGetNum, costData[2])
		self.levelUpCostId = costData[1]
	end
end


-- 当材料数量发生变化时，更新数据
function _P.UpdateAptiUpCostData(self, itemid)
	local itemConf = Csv.Item[itemid]
	if itemConf and itemConf.type == 6 then
		local carData = MCar.GetCurCarData(self.curSelectSeat.carid)

		-- 资质经验消耗
		local intensifyConf = Csv.CarUpQualification[carData.carid * 1000 + (carData.intensifylv or 0)]
		if intensifyConf and (intensifyConf.aptiExpUpCost[1] == itemid or intensifyConf.aptiItemUpCost[1] == itemid) then
			_P.SetAptiUpCostData(self, intensifyConf)
		end
	end
end


-- 分解后更新上方红点
function _R.UpdateParkingSeatRed(self)
	_P.UpdateParkingRed(self)
end


-- 得到当前选中座位的座驾数据
function _P.GetCurCarConf(self)
	local carData = MCar.GetCurCarData(self.curSelectSeat.carid)
	if carData then
		return Csv.Car[carData.carid]
	end
end


function _P.OnClickIntensify(self, type)
	local carData = MCar.GetCurCarData(self.curSelectSeat.carid)
	if not carData then return end

	if carData.level <= carData.intensifylv then
		CCommon.ShowError(Csv.Text("car_aptiUp_levelErr"))
		return
	end

	-- 资质经验消耗
	local intensifyConf = Csv.CarUpQualification[carData.carid * 1000 + (carData.intensifylv or 0)]
	if intensifyConf == nil then return end

	-- 资质经验消耗
	local costData = nil
	if type == 1 then
		costData = intensifyConf.aptiExpUpCost
	else
		costData = intensifyConf.aptiItemUpCost
	end

	-- 材料不够
	if costData == nil or #costData ~= 2 then return end
	if not MBag.CheckItemEnough(costData[1], costData[2]) then
		return
	end

	CCar.CarIntensifyReq(carData.id, type)
end


-- 强化之后
function _R.UpdateAptiUpBack(self, data)
	if data.upresult == nil or data.upresult == false then
		CCommon.ShowError(Csv.Text("err_car_intensifyErr"))

		-- 资质经验消耗
		local intensifyConf = Csv.CarUpQualification[data.carid * 1000 + (data.intensifylv or 0)]
		if intensifyConf == nil then return end

		_P.SetAptiUpCostData(self, intensifyConf)
	else
		self:Lock()
		self.LockRect.Activity = true
		SoundMgr.Play(10027)
		CCommon.CreateEffect(self.mModule:Get("LevelUpActorPanel"), LevelUpAtorId, nil, function( ... )
			-- 更新下方数据
			_P.SetAptiUpData(self)

			self:Unlock()
			self.LockRect.Activity = false

			-- 更新上头资质数据
			_P.SetCarAttrData(self, data, data.carid)

			-- 更新等级文本
			self.mModule:Get("ScoreNum").Text = data.score

			-- 更新总战力
			self.totalPower.Text = _P.GetTotalPowerNum(self)
		end)
	end

	local redUpImg = self.mModule:Get("sport3")
	local isShowRed = MCar.CheckIsCanUpApti(data)
	redUpImg.Activity = isShowRed
	_P.UpdateParkingRed(self)
end


return _M
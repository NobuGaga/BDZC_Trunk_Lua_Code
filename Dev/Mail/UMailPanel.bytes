----------------------文件引用--------------------------
-- 继承基类WindowBase
local WindowBase = JRequire "Libs.WindowMgr.WindowBase"
-- 邮件需要打开子界面，需用WindowOpen
local WindowOpen = JRequire "Libs.WindowMgr.WindowOpen"

-- @RefType [Dev.Quest.MQuest.bytes#_M]
local MMail = JRequire "Dev.Mail.MMail"
local WindowType = JRequire "Libs.WindowMgr.WindowType"
local luaUtil = JRequire"Libs.LuaUtil"
local SoundMgr = JRequire "Libs.Sound.SoundMgr"
local ScrollVertical = JRequire "Dev.Common.ScrollVertical"
local CCommon = JRequire "Dev.Common.CCommon"
local CMail = JRequire"Dev.Mail.CMail"

-------------------------------------------------------

local _M = Class(WindowBase)
local _P = {}
local _R = {}

local itemWidth = 636
local itemHeight = 197
local space = 8
local pageNum = 7
local pageHeight = 910

--事件派发
function _M:Dispatch(funcName, ...)
	local fun = _R[funcName]
	if fun ~= nil then 
		fun(self, ...)
	end
end

function _R.DeleteAllMails(self,lists)
	if lists ~= nil then
		CCommon.ShowError(Csv.Text("mail_onekey_deleteSuccess",{num = #lists}))
		_P.RefreshMail(self)
	else
		CCommon.ShowError(Csv.Text("mail_onekey_noDelete"))
	end
end

function _R.GainAllMails(self,awardMails)
	if awardMails ~= nil then
		CCommon.ShowError(Csv.Text("mail_onekey_getSuccess"))
		_P.ShowGainAwards(self,awardMails)
	end
end

function _M:BeforeDestroy()
	if self.scrollController ~= nil then
		self.scrollController:delete()
		self.scrollController = nil
	end
end

--界面构建
function _M:OnCreate(...)
	local module = self:CreateMoudle(self._RootNode, "M_Mail_UMain")
	self.mModule = module
	self.mRawTableItems = {}
	_P.OnCreateMailList(self)

	local TitleText = module:Get("C_Text")
	local NumShowText = module:Get("text1")
	self.NumText = module:Get("NumText")

	TitleText.Text = Csv.Text("mail_title")
	NumShowText.Text = Csv.Text("mail_current")
	self.NumText.Text = _P.GetUnReadNum(self) .. '/' .. #self.mSortMailDatas

	local BtnClose = module:Get("C_Back_Btn")
	BtnClose:AddOnButton(function ( ... )
		SoundMgr.Play(10002)
		self:Destroy()
		end, nil, 1.2)

	self.effectRect = module:Get("ItemEffect")
	module:Get("C_text").Text = Csv.Text("mail_onekey_get")
	module:Get("C_text_0").Text = Csv.Text("mail_onekey_delete")
	local oneKeyGet = module:Get("C_Btn_a")
	local oneKeyDelete = module:Get("C_Btn_e")
	oneKeyGet:AddOnButton(function()
		local awardMails =  MMail.GetHasAwardMails()
		if #awardMails <= 0 then
			CCommon.ShowError(Csv.Text("mail_onekey_noGet"))
		else
			CMail.GainAllMail()
		end
	end)
	oneKeyDelete:AddOnButton(function()
		local readedMails =  MMail.GetReadedMails()
		if #readedMails <= 0 then
			CCommon.ShowError(Csv.Text("mail_onekey_noDelete"))
		else
			CMail.DeleteAllMail()
		end
	end)
end

-- 创建列表
function _P.OnCreateMailList(self)
	local contentTransform = self.mModule:Get("content")
	contentTransform:DestroyChildren() -- 先移除所有的子item

	local mailTableDatas = _P.GetSortMails(MMail.MailTable)
	self.mSortMailDatas = mailTableDatas

	local scroll = self.mModule:Get("scrollView")
	if self.scrollController ~= nil then
		self.scrollController:delete()
		self.scrollController = nil
	end
	self.scrollController = ScrollVertical.new(scroll, contentTransform, "M_Mail_Item", 
							function(index, value, module)_P.ScrollCallBack(self, index, value ,module)end)
	self.scrollController:CreateScroll(pageNum, pageHeight, itemWidth, itemHeight, space, mailTableDatas)
end


-- 设置当个item数据
function _P.ScrollCallBack(self, index, data, itemModule)
	if itemModule ~= nil then
		_P.SetItemData(itemModule, data)

		itemModule:Get("M_Mail_Item"):AddOnButton(function ( ... )
			SoundMgr.Play(10001)
			_P.OnClickItem(data)
		end, nil, 0.9)

		local mailTimeText = itemModule:Get("DateText")
		mailTimeText.Text = luaUtil.TransToYearMonthDay(data.sendtime)
		itemModule.SelfRect.LocalPosition = _P.GetPos(self, index)
	end
end


function _P.GetPos(self, index)
	local allNum = #self.mSortMailDatas
	local yPos = ((itemHeight + space) * allNum - space)/2 - ((index - 1) * (itemHeight + space) + itemHeight/2)
	return Vector2(0, yPos)
end


-- 获取未读邮件数量
function _P.GetUnReadNum(self)
	local count = 0
	for k,v in pairs(self.mSortMailDatas) do
		if v.read == false then
			count = count + 1
		end
	end

	return count
end

function _P.SetItemData(itemModule, data)
	local isRead = (data.read and true) or false
	local IconImg = itemModule:Get("MailIcon")
	IconImg.IsGray = isRead

	local BgImg = itemModule:Get("MailBox")
	BgImg.IsGray = isRead

	local LightImg = itemModule:Get("Ing")
	LightImg.Activity = not isRead

	local MailNameText = itemModule:Get("MailText")
	if data.sender ~= nil and data.title ~= nil then
		IconImg.SpriteName = (data.awardList ~= nil and "ty_082") or "ty_081"
		MailNameText.Text = "【" .. data.sender  .. "】" .. data.title
	end
end

-- 列表排序
function _P.GetSortMails(mailTable)
	if mailTable == nil then return end
	
	local sortTable = {}
	sortTable = mailTable

	table.sort(sortTable, function(a, b)return _P.OnSortMail(a, b)end)
	return sortTable
end

function _P.OnSortMail(a, b)
	if a.read ~= b.read then
		local readA = (a.read == false and 0) or 1
		local readB = (b.read == false and 0) or 1
		
		return readA < readB
	end
	return a.sendtime > b.sendtime
end

-- 更新某个item数据
function _P.UpdateItemData(self, data)
	local updateItem = self.mRawTableItems[data.mailid]
	if updateItem == nil then return end

	_P.SetItemData(updateItem.moudle, data)
end

function _P.OnClickItem(data)
	WindowMgr.Create("UMailDetailPanel", data)
end

-- 新邮件推送，整个列表刷新
function _P.AddNewMail(self, data)
	if data == nil then return end

	self.mSortMailDatas = {}
	self.mRawTableItems = {}
	_P.OnCreateMailList(self)
end

--一键删除邮件时刷新
function _P.RefreshMail(self)
	self.mSortMailDatas = {}
	self.mRawTableItems = {}
	_P.OnCreateMailList(self)
	self.NumText.Text = _P.GetUnReadNum(self) .. '/' .. #self.mSortMailDatas
end
--一键领取奖励
function _P.ShowGainAwards(self,awardMails)
	--奖励展示
	local delayCount = 0
	for k,v in pairs(awardMails) do
		CCommon.ShowFlyItem(self.effectRect, v.key, v.value, delayCount)
		delayCount = delayCount + 0.5
	end

	self.mSortMailDatas = {}
	self.mRawTableItems = {}
	_P.OnCreateMailList(self)
	self.NumText.Text = _P.GetUnReadNum(self) .. '/' .. #self.mSortMailDatas
end

function _R.OnRefreshItem(self, data)
	_P.AddNewMail(self, data)
	self.NumText.Text = _P.GetUnReadNum(self) .. '/' .. #self.mSortMailDatas
end

function _R.OnAddNewMail(self, data)
	_P.AddNewMail(self, data)
	self.NumText.Text = _P.GetUnReadNum(self) .. '/' .. #self.mSortMailDatas
end

return _M
----------------------文件引用--------------------------
--@RefType [Libs.WindowMgr.WindowBase.bytes#_M]
local WindowBase = JRequire "Libs.WindowMgr.WindowBase"
-- @RefType [Dev.Common.CCommon.bytes#_M]
local CCommon = JRequire "Dev.Common.CCommon"
local SoundMgr = JRequire "Libs.Sound.SoundMgr"

----------------------CS类引用--------------------------

----------------------常量定义--------------------------
local MoudleName = "M_List_ReceiveSuccess"

local ItemSizeX = 120
local ItemSizeY = 120

--外部接口模块 *** 只放置共有接口, 禁止放变量
local _M = Class(WindowBase)
--私有函数模块 *** 只放置私有函数, 禁止放变量
local _P = {}

--界面构建
function _M:OnCreate(rank, rewards, sysID, baseRewards)
	self.moudle = self:CreateMoudle(self._RootNode, MoudleName)
	self.sysID = sysID
	self.moudle:Get("text").Text = Csv.Text("rankreward_get_reward", {rank = rank})
	if rewards then
		SoundMgr.Play(11000)
		_P.InitData(self)
		_P.InitRewardList(self, rewards, baseRewards)
	end

	self._EventNode:AddOnClick(function()
		SoundMgr.Play(10001)
		self:Destroy()
	end)
end

--初始化数据
function _P.InitData(self)
	local backgroundGroup = {}
	backgroundGroup[#backgroundGroup + 1] = self.moudle:Get("Background")
	backgroundGroup[#backgroundGroup + 1] = self.moudle:Get("JX3")
	self.backgroundGroup = backgroundGroup
	self.bgDefaultHeight = {}
	for index, background in ipairs(self.backgroundGroup) do
		self.bgDefaultHeight[index] = background.SizeDelta.y
	end

	self.content = self.moudle:Get("GoodsItem")
	if self.content then
		self.layout = self.content:AddGridLayoutGroup()
		if self.layout then
			self.rewardColumnCount = self.layout.constraintCount
			self.rewardRowHeight = self.layout.cellSize.y + self.layout.spacing.y
		end
	end
end

--初始化奖励列表
function _P.InitRewardList(self, rewards, baseRewards)
	for _, reward in pairs(rewards) do
		_P.CreateItem(self, reward.key, reward.value)
	end
	local itemNum = #rewards
	if baseRewards then
		for _, reward in pairs(baseRewards) do
			_P.CreateItem(self, reward.key, reward.value)
		end
		itemNum = itemNum + #baseRewards
	end
	local row, rest = math.modf(itemNum / self.rewardColumnCount)
	if rest > 0 then
		row = row + 1
	end
	local offsetHeight = (row - 1) * self.rewardRowHeight
	for index, background in ipairs(self.backgroundGroup) do
		local width = background.SizeDelta.x
		background.SizeDelta = Vector2(width, self.bgDefaultHeight[index] + offsetHeight)
	end
end

function _P.CreateItem(self, itemID, itemNum)
	local rewardItem, effect = CCommon.CreateItem(self.content, itemID, CCommon.ShowItemTips, 
													{num = itemNum}, self.sysID)
	if effect then
		local originSize = effect.SelfRect.SizeDelta
		local sizeX = self.layout.cellSize.x / ItemSizeX * originSize.x
		local sizeY = self.layout.cellSize.y / ItemSizeY * originSize.y
		effect.SelfRect.SizeDelta = Vector2(sizeX, sizeY)
	end
end

return _M
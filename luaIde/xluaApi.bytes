--@SuperType [luaIde#CS.System.Object]
CS.HotUp = {}
--[[
	@_ReloadLua CS.System.Action`1{{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.HotUp:RegistReloadLuaFunc(_ReloadLua) end
--[[
	@_ReloadCsv CS.System.Action`1{{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.HotUp:RegistReloadCsvFunc(_ReloadCsv) end
--[[
	@luaName CS.System.String
--]]
function CS.HotUp:RegistLua(luaName) end
--[[
	@csvName CS.System.String
--]]
function CS.HotUp:RegistCsv(csvName) end
function CS.HotUp:HotReload() end

--@SuperType [luaIde#CS.System.Object]
CS.LuaValueInfo = {}
--[[
	@return [luaIde#CS.LuaValueInfo]
]]
function CS.LuaValueInfo() end
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.LuaValueInfo.name = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.LuaValueInfo.valueType = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.LuaValueInfo.valueStr = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.LuaValueInfo.isValue = nil

--@SuperType [luaIde#CS.System.Object]
CS.LuaDebugTool = {}
--[[
	@return [luaIde#CS.LuaDebugTool]
]]
function CS.LuaDebugTool() end
--[[
	@obj CS.System.Object
	return CS.System.Collections.Generic.List`1{{LuaValueInfo, Scripts, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.LuaDebugTool:getUserDataInfo(obj) end

--@SuperType [luaIde#CS.UnityEngine.MonoBehaviour]
CS.GameManager = {}
--[[
	@return [luaIde#CS.GameManager]
]]
function CS.GameManager() end
--[[
	@RefType [luaIde#CS.GameManager]
	 Get 
--]]
CS.GameManager.Inst = nil
--[[
	CS.YiXin.YiXinEnv
	 Get 
--]]
CS.GameManager.YiXinEnv = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.GameManager.ResolutionPer = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Camera]
	 Get 
--]]
CS.GameManager.MainCamera = nil
--[[
	CS.UnityEngine.AudioListener
	 Get 
--]]
CS.GameManager.AudioListener = nil
--[[
	@RefType [luaIde#CS.UnityEngine.GameObject]
	 Get 
--]]
CS.GameManager.CachedObj = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Transform]
	 Get 
--]]
CS.GameManager.CachedTran = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.GameManager.UpdateGCSpace = nil
--[[
	CS.System.String
	 Get 
--]]
CS.GameManager.PersistentDataPath = nil
--[[
	@text CS.JGui.JGuiText
	@rate CS.System.Single
--]]
function CS.GameManager:RegistFpsShow(text,rate) end
function CS.GameManager:RemoveFpsShow() end
--[[
	@per CS.System.Single
--]]
function CS.GameManager:SetResolution(per) end
--[[
	@jsonParam CS.LitJson.JsonData
	@fileList CS.System.Collections.Generic.Dictionary`2{{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.GameManager:Init(jsonParam,fileList) end
function CS.GameManager:GetJsonParam() end
function CS.GameManager:GC() end

--@SuperType [luaIde#CS.System.Object]
CS.CsvUnserialize = {}
function CS.CsvUnserialize:Clear() end
--[[
	@csvName CS.System.String
--]]
function CS.CsvUnserialize:Remove(csvName) end
--[[
	@csvName CS.System.String
	@table CS.YiXin.YiXinTable
	@metatable CS.YiXin.YiXinTable
--]]
function CS.CsvUnserialize:GetKeys(csvName,table,metatable) end
--[[
	@csvName CS.System.String
	@key CS.System.String
	@table CS.YiXin.YiXinTable
--]]
function CS.CsvUnserialize:GetLine(csvName,key,table) end

--@SuperType [luaIde#CS.System.Object]
CS.Loader.AudioClipPool = {}
--[[
	@return [luaIde#CS.Loader.AudioClipPool]
]]
function CS.Loader.AudioClipPool() end
--[[
	@path CS.System.String
	@audioName CS.System.String
	@audioSource CS.UnityEngine.AudioSource
	@onLoadCall CS.System.Action`1{{UnityEngine.AudioSource, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.Loader.AudioClipPool:Pop(path,audioName,audioSource,onLoadCall) end
--[[
	@audioSource CS.UnityEngine.AudioSource
--]]
function CS.Loader.AudioClipPool:Push(audioSource) end
function CS.Loader.AudioClipPool:CheckUnLoad() end

--@SuperType [luaIde#CS.Loader.ComponentPool`1[[UnityEngine.AudioSource, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]]
CS.Loader.AudioSourcePool = {}
--[[
	@RefType [luaIde#CS.Loader.AudioSourcePool]
	 Get 
--]]
CS.Loader.AudioSourcePool.Inst = nil
--[[
	CS.System.String
	 Get 
--]]
CS.Loader.AudioSourcePool.PoolName = nil

--@SuperType [luaIde#CS.System.Object]
CS.Loader.ComponentPool`1[[UnityEngine.AudioSource, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]] = {}
--[[
	@return [luaIde#CS.Loader.ComponentPool`1[[UnityEngine.AudioSource, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]]
]]
function CS.Loader.ComponentPool`1[[UnityEngine.AudioSource, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]() end
--[[
	CS.System.String
	 Get 
--]]
CS.Loader.ComponentPool`1[[UnityEngine.AudioSource, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]].PoolName = nil
--[[
	@parent CS.UnityEngine.Transform
	@return [luaIde#CS.UnityEngine.AudioSource]
--]]
function CS.Loader.ComponentPool`1[[UnityEngine.AudioSource, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]:Pop(parent) end
--[[
	@obj CS.UnityEngine.AudioSource
--]]
function CS.Loader.ComponentPool`1[[UnityEngine.AudioSource, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]:Push(obj) end

--@SuperType [luaIde#CS.System.Enum]
CS.UnityEngine.TextureFormat = {}
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.Alpha8 = 1
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ARGB4444 = 2
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.RGB24 = 3
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.RGBA32 = 4
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ARGB32 = 5
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.RGB565 = 7
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.R16 = 9
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.DXT1 = 10
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.DXT5 = 12
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.RGBA4444 = 13
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.BGRA32 = 14
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.RHalf = 15
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.RGHalf = 16
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.RGBAHalf = 17
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.RFloat = 18
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.RGFloat = 19
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.RGBAFloat = 20
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.YUY2 = 21
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.RGB9e5Float = 22
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.BC4 = 26
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.BC5 = 27
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.BC6H = 24
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.BC7 = 25
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.DXT1Crunched = 28
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.DXT5Crunched = 29
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.PVRTC_RGB2 = 30
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.PVRTC_RGBA2 = 31
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.PVRTC_RGB4 = 32
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.PVRTC_RGBA4 = 33
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ETC_RGB4 = 34
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ATC_RGB4 = 35
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ATC_RGBA8 = 36
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.EAC_R = 41
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.EAC_R_SIGNED = 42
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.EAC_RG = 43
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.EAC_RG_SIGNED = 44
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ETC2_RGB = 45
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ETC2_RGBA1 = 46
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ETC2_RGBA8 = 47
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ASTC_RGB_4x4 = 48
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ASTC_RGB_5x5 = 49
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ASTC_RGB_6x6 = 50
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ASTC_RGB_8x8 = 51
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ASTC_RGB_10x10 = 52
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ASTC_RGB_12x12 = 53
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ASTC_RGBA_4x4 = 54
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ASTC_RGBA_5x5 = 55
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ASTC_RGBA_6x6 = 56
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ASTC_RGBA_8x8 = 57
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ASTC_RGBA_10x10 = 58
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ASTC_RGBA_12x12 = 59
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ETC_RGB4_3DS = 60
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.ETC_RGBA8_3DS = 61
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.RG16 = 62
--[[
	CS.UnityEngine.TextureFormat
	 Get 	 Set 
--]]
CS.UnityEngine.TextureFormat.R8 = 63

--@SuperType [luaIde#CS.UnityEngine.Profiling.Sampler]
CS.UnityEngine.Profiling.CustomSampler = {}
--[[
	@name CS.System.String
	@return [luaIde#CS.UnityEngine.Profiling.CustomSampler]
--]]
function CS.UnityEngine.Profiling.CustomSampler:Create(name) end
function CS.UnityEngine.Profiling.CustomSampler:Begin() end
--[[
	@targetObject CS.UnityEngine.Object
--]]
function CS.UnityEngine.Profiling.CustomSampler:Begin(targetObject) end
function CS.UnityEngine.Profiling.CustomSampler:End() end

--@SuperType [luaIde#CS.System.Object]
CS.UnityEngine.Profiling.Profiler = {}
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.Profiling.Profiler.supported = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.UnityEngine.Profiling.Profiler.logFile = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Profiling.Profiler.enableBinaryLog = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Profiling.Profiler.enabled = nil
--[[
	CS.System.Int64
	 Get 
--]]
CS.UnityEngine.Profiling.Profiler.usedHeapSizeLong = nil
--[[
	@file CS.System.String
--]]
function CS.UnityEngine.Profiling.Profiler:AddFramesFromFile(file) end
--[[
	@name CS.System.String
--]]
function CS.UnityEngine.Profiling.Profiler:BeginSample(name) end
--[[
	@name CS.System.String
	@targetObject CS.UnityEngine.Object
--]]
function CS.UnityEngine.Profiling.Profiler:BeginSample(name,targetObject) end
function CS.UnityEngine.Profiling.Profiler:EndSample() end
--[[
	@o CS.UnityEngine.Object
	return CS.System.Int32
--]]
function CS.UnityEngine.Profiling.Profiler:GetRuntimeMemorySize(o) end
--[[
	@o CS.UnityEngine.Object
	return CS.System.Int64
--]]
function CS.UnityEngine.Profiling.Profiler:GetRuntimeMemorySizeLong(o) end
function CS.UnityEngine.Profiling.Profiler:GetMonoHeapSize() end
function CS.UnityEngine.Profiling.Profiler:GetMonoHeapSizeLong() end
function CS.UnityEngine.Profiling.Profiler:GetMonoUsedSize() end
function CS.UnityEngine.Profiling.Profiler:GetMonoUsedSizeLong() end
--[[
	@size CS.System.UInt32
	return CS.System.Boolean
--]]
function CS.UnityEngine.Profiling.Profiler:SetTempAllocatorRequestedSize(size) end
function CS.UnityEngine.Profiling.Profiler:GetTempAllocatorSize() end
function CS.UnityEngine.Profiling.Profiler:GetTotalAllocatedMemory() end
function CS.UnityEngine.Profiling.Profiler:GetTotalAllocatedMemoryLong() end
function CS.UnityEngine.Profiling.Profiler:GetTotalUnusedReservedMemory() end
function CS.UnityEngine.Profiling.Profiler:GetTotalUnusedReservedMemoryLong() end
function CS.UnityEngine.Profiling.Profiler:GetTotalReservedMemory() end
function CS.UnityEngine.Profiling.Profiler:GetTotalReservedMemoryLong() end

--@SuperType [luaIde#CS.System.Object]
CS.UnityEngine.Profiling.Recorder = {}
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.Profiling.Recorder.isValid = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Profiling.Recorder.enabled = nil
--[[
	CS.System.Int64
	 Get 
--]]
CS.UnityEngine.Profiling.Recorder.elapsedNanoseconds = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.Profiling.Recorder.sampleBlockCount = nil
--[[
	@samplerName CS.System.String
	@return [luaIde#CS.UnityEngine.Profiling.Recorder]
--]]
function CS.UnityEngine.Profiling.Recorder:Get(samplerName) end

--@SuperType [luaIde#CS.System.Object]
CS.UnityEngine.Profiling.Sampler = {}
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.Profiling.Sampler.isValid = nil
--[[
	CS.System.String
	 Get 
--]]
CS.UnityEngine.Profiling.Sampler.name = nil
function CS.UnityEngine.Profiling.Sampler:GetRecorder() end
--[[
	@name CS.System.String
	@return [luaIde#CS.UnityEngine.Profiling.Sampler]
--]]
function CS.UnityEngine.Profiling.Sampler:Get(name) end
--[[
	@names CS.System.Collections.Generic.List`1{{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	return CS.System.Int32
--]]
function CS.UnityEngine.Profiling.Sampler:GetNames(names) end

--@SuperType [luaIde#CS.DG.Tweening.Core.ABSSequentiable]
CS.DG.Tweening.Tween = {}
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.DG.Tweening.Tween.fullPosition = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.DG.Tweening.Tween.timeScale = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.DG.Tweening.Tween.isBackwards = nil
--[[
	@RefType [luaIde#CS.System.Object]
	 Get 	 Set 
--]]
CS.DG.Tweening.Tween.id = nil
--[[
	@RefType [luaIde#CS.System.Object]
	 Get 	 Set 
--]]
CS.DG.Tweening.Tween.target = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.DG.Tweening.Tween.easeOvershootOrAmplitude = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.DG.Tweening.Tween.easePeriod = nil

--@SuperType [luaIde#CS.DG.Tweening.Tween]
CS.DG.Tweening.Tweener = {}
--[[
	@newStartValue CS.System.Object
	@newDuration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.DG.Tweening.Tweener:ChangeStartValue(newStartValue,newDuration) end
--[[
	@newEndValue CS.System.Object
	@newDuration CS.System.Single
	@snapStartValue CS.System.Boolean
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.DG.Tweening.Tweener:ChangeEndValue(newEndValue,newDuration,snapStartValue) end
--[[
	@newEndValue CS.System.Object
	@snapStartValue CS.System.Boolean
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.DG.Tweening.Tweener:ChangeEndValue(newEndValue,snapStartValue) end
--[[
	@newStartValue CS.System.Object
	@newEndValue CS.System.Object
	@newDuration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.DG.Tweening.Tweener:ChangeValues(newStartValue,newEndValue,newDuration) end

--@SuperType [luaIde#CS.System.Object]
CS.DG.Tweening.DOTween = {}
--[[
	@return [luaIde#CS.DG.Tweening.DOTween]
]]
function CS.DG.Tweening.DOTween() end
--[[
	CS.DG.Tweening.LogBehaviour
	 Get 	 Set 
--]]
CS.DG.Tweening.DOTween.logBehaviour = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.DG.Tweening.DOTween.Version = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.DG.Tweening.DOTween.useSafeMode = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.DG.Tweening.DOTween.showUnityEditorReport = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.DG.Tweening.DOTween.timeScale = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.DG.Tweening.DOTween.useSmoothDeltaTime = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.DG.Tweening.DOTween.maxSmoothUnscaledTime = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.DG.Tweening.DOTween.drawGizmos = nil
--[[
	CS.DG.Tweening.UpdateType
	 Get 	 Set 
--]]
CS.DG.Tweening.DOTween.defaultUpdateType = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.DG.Tweening.DOTween.defaultTimeScaleIndependent = nil
--[[
	CS.DG.Tweening.AutoPlay
	 Get 	 Set 
--]]
CS.DG.Tweening.DOTween.defaultAutoPlay = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.DG.Tweening.DOTween.defaultAutoKill = nil
--[[
	CS.DG.Tweening.LoopType
	 Get 	 Set 
--]]
CS.DG.Tweening.DOTween.defaultLoopType = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.DG.Tweening.DOTween.defaultRecyclable = nil
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.DOTween.defaultEaseType = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.DG.Tweening.DOTween.defaultEaseOvershootOrAmplitude = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.DG.Tweening.DOTween.defaultEasePeriod = nil
--[[
	@recycleAllByDefault CS.System.Nullable`1{{System.Boolean, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@useSafeMode CS.System.Nullable`1{{System.Boolean, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@logBehaviour CS.System.Nullable`1{{DG.Tweening.LogBehaviour, DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null}}
	return CS.DG.Tweening.IDOTweenInit
--]]
function CS.DG.Tweening.DOTween:Init(recycleAllByDefault,useSafeMode,logBehaviour) end
--[[
	@tweenersCapacity CS.System.Int32
	@sequencesCapacity CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:SetTweensCapacity(tweenersCapacity,sequencesCapacity) end
--[[
	@destroy CS.System.Boolean
--]]
function CS.DG.Tweening.DOTween:Clear(destroy) end
function CS.DG.Tweening.DOTween:ClearCachedTweens() end
function CS.DG.Tweening.DOTween:Validate() end
--[[
	@getter CS.DG.Tweening.Core.DOGetter`1{{System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@setter CS.DG.Tweening.Core.DOSetter`1{{System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@endValue CS.System.Single
	@duration CS.System.Single
	return CS.DG.Tweening.Core.TweenerCore`3{{System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{DG.Tweening.Plugins.Options.FloatOptions, DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.DG.Tweening.DOTween:To(getter,setter,endValue,duration) end
--[[
	@getter CS.DG.Tweening.Core.DOGetter`1{{System.Double, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@setter CS.DG.Tweening.Core.DOSetter`1{{System.Double, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@endValue CS.System.Double
	@duration CS.System.Single
	return CS.DG.Tweening.Core.TweenerCore`3{{System.Double, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{System.Double, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{DG.Tweening.Plugins.Options.NoOptions, DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.DG.Tweening.DOTween:To(getter,setter,endValue,duration) end
--[[
	@getter CS.DG.Tweening.Core.DOGetter`1{{System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@setter CS.DG.Tweening.Core.DOSetter`1{{System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@endValue CS.System.Int32
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.DG.Tweening.DOTween:To(getter,setter,endValue,duration) end
--[[
	@getter CS.DG.Tweening.Core.DOGetter`1{{System.UInt32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@setter CS.DG.Tweening.Core.DOSetter`1{{System.UInt32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@endValue CS.System.UInt32
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.DG.Tweening.DOTween:To(getter,setter,endValue,duration) end
--[[
	@getter CS.DG.Tweening.Core.DOGetter`1{{System.Int64, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@setter CS.DG.Tweening.Core.DOSetter`1{{System.Int64, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@endValue CS.System.Int64
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.DG.Tweening.DOTween:To(getter,setter,endValue,duration) end
--[[
	@getter CS.DG.Tweening.Core.DOGetter`1{{System.UInt64, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@setter CS.DG.Tweening.Core.DOSetter`1{{System.UInt64, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@endValue CS.System.UInt64
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.DG.Tweening.DOTween:To(getter,setter,endValue,duration) end
--[[
	@getter CS.DG.Tweening.Core.DOGetter`1{{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@setter CS.DG.Tweening.Core.DOSetter`1{{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@endValue CS.System.String
	@duration CS.System.Single
	return CS.DG.Tweening.Core.TweenerCore`3{{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{DG.Tweening.Plugins.Options.StringOptions, DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.DG.Tweening.DOTween:To(getter,setter,endValue,duration) end
--[[
	@getter CS.DG.Tweening.Core.DOGetter`1{{UnityEngine.Vector2, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@setter CS.DG.Tweening.Core.DOSetter`1{{UnityEngine.Vector2, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@endValue CS.UnityEngine.Vector2
	@duration CS.System.Single
	return CS.DG.Tweening.Core.TweenerCore`3{{UnityEngine.Vector2, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{UnityEngine.Vector2, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{DG.Tweening.Plugins.Options.VectorOptions, DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.DG.Tweening.DOTween:To(getter,setter,endValue,duration) end
--[[
	@getter CS.DG.Tweening.Core.DOGetter`1{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@setter CS.DG.Tweening.Core.DOSetter`1{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@endValue CS.UnityEngine.Vector3
	@duration CS.System.Single
	return CS.DG.Tweening.Core.TweenerCore`3{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{DG.Tweening.Plugins.Options.VectorOptions, DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.DG.Tweening.DOTween:To(getter,setter,endValue,duration) end
--[[
	@getter CS.DG.Tweening.Core.DOGetter`1{{UnityEngine.Vector4, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@setter CS.DG.Tweening.Core.DOSetter`1{{UnityEngine.Vector4, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@endValue CS.UnityEngine.Vector4
	@duration CS.System.Single
	return CS.DG.Tweening.Core.TweenerCore`3{{UnityEngine.Vector4, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{UnityEngine.Vector4, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{DG.Tweening.Plugins.Options.VectorOptions, DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.DG.Tweening.DOTween:To(getter,setter,endValue,duration) end
--[[
	@getter CS.DG.Tweening.Core.DOGetter`1{{UnityEngine.Quaternion, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@setter CS.DG.Tweening.Core.DOSetter`1{{UnityEngine.Quaternion, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@endValue CS.UnityEngine.Vector3
	@duration CS.System.Single
	return CS.DG.Tweening.Core.TweenerCore`3{{UnityEngine.Quaternion, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{DG.Tweening.Plugins.Options.QuaternionOptions, DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.DG.Tweening.DOTween:To(getter,setter,endValue,duration) end
--[[
	@getter CS.DG.Tweening.Core.DOGetter`1{{UnityEngine.Color, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@setter CS.DG.Tweening.Core.DOSetter`1{{UnityEngine.Color, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@endValue CS.UnityEngine.Color
	@duration CS.System.Single
	return CS.DG.Tweening.Core.TweenerCore`3{{UnityEngine.Color, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{UnityEngine.Color, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{DG.Tweening.Plugins.Options.ColorOptions, DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.DG.Tweening.DOTween:To(getter,setter,endValue,duration) end
--[[
	@getter CS.DG.Tweening.Core.DOGetter`1{{UnityEngine.Rect, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@setter CS.DG.Tweening.Core.DOSetter`1{{UnityEngine.Rect, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@endValue CS.UnityEngine.Rect
	@duration CS.System.Single
	return CS.DG.Tweening.Core.TweenerCore`3{{UnityEngine.Rect, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{UnityEngine.Rect, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{DG.Tweening.Plugins.Options.RectOptions, DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.DG.Tweening.DOTween:To(getter,setter,endValue,duration) end
--[[
	@getter CS.DG.Tweening.Core.DOGetter`1{{UnityEngine.RectOffset, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@setter CS.DG.Tweening.Core.DOSetter`1{{UnityEngine.RectOffset, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@endValue CS.UnityEngine.RectOffset
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.DG.Tweening.DOTween:To(getter,setter,endValue,duration) end
--[[
	@getter CS.DG.Tweening.Core.DOGetter`1{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@setter CS.DG.Tweening.Core.DOSetter`1{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@endValue CS.System.Single
	@duration CS.System.Single
	@axisConstraint CS.DG.Tweening.AxisConstraint
	return CS.DG.Tweening.Core.TweenerCore`3{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{DG.Tweening.Plugins.Options.VectorOptions, DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.DG.Tweening.DOTween:ToAxis(getter,setter,endValue,duration,axisConstraint) end
--[[
	@getter CS.DG.Tweening.Core.DOGetter`1{{UnityEngine.Color, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@setter CS.DG.Tweening.Core.DOSetter`1{{UnityEngine.Color, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@endValue CS.System.Single
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.DG.Tweening.DOTween:ToAlpha(getter,setter,endValue,duration) end
--[[
	@setter CS.DG.Tweening.Core.DOSetter`1{{System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@startValue CS.System.Single
	@endValue CS.System.Single
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.DG.Tweening.DOTween:To(setter,startValue,endValue,duration) end
--[[
	@getter CS.DG.Tweening.Core.DOGetter`1{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@setter CS.DG.Tweening.Core.DOSetter`1{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@direction CS.UnityEngine.Vector3
	@duration CS.System.Single
	@vibrato CS.System.Int32
	@elasticity CS.System.Single
	return CS.DG.Tweening.Core.TweenerCore`3{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{UnityEngine.Vector3{}, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{DG.Tweening.Plugins.Options.Vector3ArrayOptions, DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.DG.Tweening.DOTween:Punch(getter,setter,direction,duration,vibrato,elasticity) end
--[[
	@getter CS.DG.Tweening.Core.DOGetter`1{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@setter CS.DG.Tweening.Core.DOSetter`1{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@duration CS.System.Single
	@strength CS.System.Single
	@vibrato CS.System.Int32
	@randomness CS.System.Single
	@ignoreZAxis CS.System.Boolean
	@fadeOut CS.System.Boolean
	return CS.DG.Tweening.Core.TweenerCore`3{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{UnityEngine.Vector3{}, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{DG.Tweening.Plugins.Options.Vector3ArrayOptions, DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.DG.Tweening.DOTween:Shake(getter,setter,duration,strength,vibrato,randomness,ignoreZAxis,fadeOut) end
--[[
	@getter CS.DG.Tweening.Core.DOGetter`1{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@setter CS.DG.Tweening.Core.DOSetter`1{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@duration CS.System.Single
	@strength CS.UnityEngine.Vector3
	@vibrato CS.System.Int32
	@randomness CS.System.Single
	@fadeOut CS.System.Boolean
	return CS.DG.Tweening.Core.TweenerCore`3{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{UnityEngine.Vector3{}, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{DG.Tweening.Plugins.Options.Vector3ArrayOptions, DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.DG.Tweening.DOTween:Shake(getter,setter,duration,strength,vibrato,randomness,fadeOut) end
--[[
	@getter CS.DG.Tweening.Core.DOGetter`1{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@setter CS.DG.Tweening.Core.DOSetter`1{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@endValues CS.UnityEngine.Vector3{}
	@durations CS.System.Single{}
	return CS.DG.Tweening.Core.TweenerCore`3{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{UnityEngine.Vector3{}, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{DG.Tweening.Plugins.Options.Vector3ArrayOptions, DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.DG.Tweening.DOTween:ToArray(getter,setter,endValues,durations) end
function CS.DG.Tweening.DOTween:Sequence() end
--[[
	@withCallbacks CS.System.Boolean
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:CompleteAll(withCallbacks) end
--[[
	@targetOrId CS.System.Object
	@withCallbacks CS.System.Boolean
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:Complete(targetOrId,withCallbacks) end
function CS.DG.Tweening.DOTween:FlipAll() end
--[[
	@targetOrId CS.System.Object
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:Flip(targetOrId) end
--[[
	@to CS.System.Single
	@andPlay CS.System.Boolean
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:GotoAll(to,andPlay) end
--[[
	@targetOrId CS.System.Object
	@to CS.System.Single
	@andPlay CS.System.Boolean
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:Goto(targetOrId,to,andPlay) end
--[[
	@complete CS.System.Boolean
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:KillAll(complete) end
--[[
	@complete CS.System.Boolean
	@idsOrTargetsToExclude CS.System.Object{}
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:KillAll(complete,idsOrTargetsToExclude) end
--[[
	@targetOrId CS.System.Object
	@complete CS.System.Boolean
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:Kill(targetOrId,complete) end
function CS.DG.Tweening.DOTween:PauseAll() end
--[[
	@targetOrId CS.System.Object
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:Pause(targetOrId) end
function CS.DG.Tweening.DOTween:PlayAll() end
--[[
	@targetOrId CS.System.Object
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:Play(targetOrId) end
--[[
	@target CS.System.Object
	@id CS.System.Object
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:Play(target,id) end
function CS.DG.Tweening.DOTween:PlayBackwardsAll() end
--[[
	@targetOrId CS.System.Object
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:PlayBackwards(targetOrId) end
--[[
	@target CS.System.Object
	@id CS.System.Object
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:PlayBackwards(target,id) end
function CS.DG.Tweening.DOTween:PlayForwardAll() end
--[[
	@targetOrId CS.System.Object
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:PlayForward(targetOrId) end
--[[
	@target CS.System.Object
	@id CS.System.Object
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:PlayForward(target,id) end
--[[
	@includeDelay CS.System.Boolean
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:RestartAll(includeDelay) end
--[[
	@targetOrId CS.System.Object
	@includeDelay CS.System.Boolean
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:Restart(targetOrId,includeDelay) end
--[[
	@target CS.System.Object
	@id CS.System.Object
	@includeDelay CS.System.Boolean
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:Restart(target,id,includeDelay) end
--[[
	@includeDelay CS.System.Boolean
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:RewindAll(includeDelay) end
--[[
	@targetOrId CS.System.Object
	@includeDelay CS.System.Boolean
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:Rewind(targetOrId,includeDelay) end
function CS.DG.Tweening.DOTween:SmoothRewindAll() end
--[[
	@targetOrId CS.System.Object
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:SmoothRewind(targetOrId) end
function CS.DG.Tweening.DOTween:TogglePauseAll() end
--[[
	@targetOrId CS.System.Object
	return CS.System.Int32
--]]
function CS.DG.Tweening.DOTween:TogglePause(targetOrId) end
--[[
	@targetOrId CS.System.Object
	@alsoCheckIfIsPlaying CS.System.Boolean
	return CS.System.Boolean
--]]
function CS.DG.Tweening.DOTween:IsTweening(targetOrId,alsoCheckIfIsPlaying) end
function CS.DG.Tweening.DOTween:TotalPlayingTweens() end
function CS.DG.Tweening.DOTween:PlayingTweens() end
function CS.DG.Tweening.DOTween:PausedTweens() end
--[[
	@id CS.System.Object
	@playingOnly CS.System.Boolean
	return CS.System.Collections.Generic.List`1{{DG.Tweening.Tween, DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.DG.Tweening.DOTween:TweensById(id,playingOnly) end
--[[
	@target CS.System.Object
	@playingOnly CS.System.Boolean
	return CS.System.Collections.Generic.List`1{{DG.Tweening.Tween, DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.DG.Tweening.DOTween:TweensByTarget(target,playingOnly) end

--@SuperType [luaIde#CS.System.Object]
CS.DG.Tweening.DOTweenUtils46 = {}
--[[
	@from CS.UnityEngine.RectTransform
	@to CS.UnityEngine.RectTransform
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.DG.Tweening.DOTweenUtils46:SwitchToRectTransform(from,to) end

--@SuperType [luaIde#CS.System.Object]
CS.DG.Tweening.ShortcutExtensions = {}

--@SuperType [luaIde#CS.System.Object]
CS.DG.Tweening.ShortcutExtensions43 = {}

--@SuperType [luaIde#CS.System.Object]
CS.DG.Tweening.ShortcutExtensions46 = {}

--@SuperType [luaIde#CS.System.Object]
CS.DG.Tweening.ShortcutExtensions50 = {}

--@SuperType [luaIde#CS.System.Enum]
CS.DG.Tweening.Ease = {}
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.Unset = 0
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.Linear = 1
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InSine = 2
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.OutSine = 3
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InOutSine = 4
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InQuad = 5
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.OutQuad = 6
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InOutQuad = 7
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InCubic = 8
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.OutCubic = 9
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InOutCubic = 10
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InQuart = 11
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.OutQuart = 12
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InOutQuart = 13
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InQuint = 14
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.OutQuint = 15
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InOutQuint = 16
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InExpo = 17
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.OutExpo = 18
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InOutExpo = 19
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InCirc = 20
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.OutCirc = 21
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InOutCirc = 22
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InElastic = 23
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.OutElastic = 24
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InOutElastic = 25
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InBack = 26
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.OutBack = 27
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InOutBack = 28
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InBounce = 29
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.OutBounce = 30
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InOutBounce = 31
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.Flash = 32
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InFlash = 33
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.OutFlash = 34
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.InOutFlash = 35
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.INTERNAL_Zero = 36
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.DG.Tweening.Ease.INTERNAL_Custom = 37

--@SuperType [luaIde#CS.System.Enum]
CS.DG.Tweening.LoopType = {}
--[[
	CS.DG.Tweening.LoopType
	 Get 	 Set 
--]]
CS.DG.Tweening.LoopType.Restart = 0
--[[
	CS.DG.Tweening.LoopType
	 Get 	 Set 
--]]
CS.DG.Tweening.LoopType.Yoyo = 1
--[[
	CS.DG.Tweening.LoopType
	 Get 	 Set 
--]]
CS.DG.Tweening.LoopType.Incremental = 2

--@SuperType [luaIde#CS.System.Enum]
CS.DG.Tweening.PathMode = {}
--[[
	CS.DG.Tweening.PathMode
	 Get 	 Set 
--]]
CS.DG.Tweening.PathMode.Ignore = 0
--[[
	CS.DG.Tweening.PathMode
	 Get 	 Set 
--]]
CS.DG.Tweening.PathMode.Full3D = 1
--[[
	CS.DG.Tweening.PathMode
	 Get 	 Set 
--]]
CS.DG.Tweening.PathMode.TopDown2D = 2
--[[
	CS.DG.Tweening.PathMode
	 Get 	 Set 
--]]
CS.DG.Tweening.PathMode.Sidescroller2D = 3

--@SuperType [luaIde#CS.System.Enum]
CS.DG.Tweening.PathType = {}
--[[
	CS.DG.Tweening.PathType
	 Get 	 Set 
--]]
CS.DG.Tweening.PathType.Linear = 0
--[[
	CS.DG.Tweening.PathType
	 Get 	 Set 
--]]
CS.DG.Tweening.PathType.CatmullRom = 1

--@SuperType [luaIde#CS.System.Enum]
CS.DG.Tweening.RotateMode = {}
--[[
	CS.DG.Tweening.RotateMode
	 Get 	 Set 
--]]
CS.DG.Tweening.RotateMode.Fast = 0
--[[
	CS.DG.Tweening.RotateMode
	 Get 	 Set 
--]]
CS.DG.Tweening.RotateMode.FastBeyond360 = 1
--[[
	CS.DG.Tweening.RotateMode
	 Get 	 Set 
--]]
CS.DG.Tweening.RotateMode.WorldAxisAdd = 2
--[[
	CS.DG.Tweening.RotateMode
	 Get 	 Set 
--]]
CS.DG.Tweening.RotateMode.LocalAxisAdd = 3

--@SuperType [luaIde#CS.DG.Tweening.Tween]
CS.DG.Tweening.Sequence = {}

--@SuperType [luaIde#CS.System.Object]
CS.DG.Tweening.TweenSettingsExtensions = {}

--@SuperType [luaIde#CS.System.Object]
CS.DG.Tweening.TweenExtensions = {}

--@SuperType [luaIde#CS.System.Object]
CS.Utility.Debugger = {}
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Utility.Debugger.useLog = nil
--[[
	CS.System.Action`2{{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{UnityEngine.LogType, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 	 Set 
--]]
CS.Utility.Debugger.logger = nil
--[[
	CS.System.Action`2{{System.Boolean, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	 Get 	 Set 
--]]
CS.Utility.Debugger.assertLogger = nil
--[[
	@str CS.System.String
--]]
function CS.Utility.Debugger:Log(str) end
--[[
	@message CS.System.Object
--]]
function CS.Utility.Debugger:Log(message) end
--[[
	@str CS.System.String
	@arg0 CS.System.Object
--]]
function CS.Utility.Debugger:Log(str,arg0) end
--[[
	@str CS.System.String
	@arg0 CS.System.Object
	@arg1 CS.System.Object
--]]
function CS.Utility.Debugger:Log(str,arg0,arg1) end
--[[
	@str CS.System.String
	@arg0 CS.System.Object
	@arg1 CS.System.Object
	@arg2 CS.System.Object
--]]
function CS.Utility.Debugger:Log(str,arg0,arg1,arg2) end
--[[
	@str CS.System.String
	@param CS.System.Object{}
--]]
function CS.Utility.Debugger:Log(str,param) end
--[[
	@str CS.System.String
--]]
function CS.Utility.Debugger:LogWarning(str) end
--[[
	@message CS.System.Object
--]]
function CS.Utility.Debugger:LogWarning(message) end
--[[
	@str CS.System.String
	@arg0 CS.System.Object
--]]
function CS.Utility.Debugger:LogWarning(str,arg0) end
--[[
	@str CS.System.String
	@arg0 CS.System.Object
	@arg1 CS.System.Object
--]]
function CS.Utility.Debugger:LogWarning(str,arg0,arg1) end
--[[
	@str CS.System.String
	@arg0 CS.System.Object
	@arg1 CS.System.Object
	@arg2 CS.System.Object
--]]
function CS.Utility.Debugger:LogWarning(str,arg0,arg1,arg2) end
--[[
	@str CS.System.String
	@param CS.System.Object{}
--]]
function CS.Utility.Debugger:LogWarning(str,param) end
--[[
	@str CS.System.String
--]]
function CS.Utility.Debugger:LogError(str) end
--[[
	@message CS.System.Object
--]]
function CS.Utility.Debugger:LogError(message) end
--[[
	@str CS.System.String
	@arg0 CS.System.Object
--]]
function CS.Utility.Debugger:LogError(str,arg0) end
--[[
	@str CS.System.String
	@arg0 CS.System.Object
	@arg1 CS.System.Object
--]]
function CS.Utility.Debugger:LogError(str,arg0,arg1) end
--[[
	@str CS.System.String
	@arg0 CS.System.Object
	@arg1 CS.System.Object
	@arg2 CS.System.Object
--]]
function CS.Utility.Debugger:LogError(str,arg0,arg1,arg2) end
--[[
	@str CS.System.String
	@param CS.System.Object{}
--]]
function CS.Utility.Debugger:LogError(str,param) end
--[[
	@condition CS.System.Boolean
	@str CS.System.String
--]]
function CS.Utility.Debugger:Assert(condition,str) end
--[[
	@condition CS.System.Boolean
	@message CS.System.Object
--]]
function CS.Utility.Debugger:Assert(condition,message) end
--[[
	@condition CS.System.Boolean
	@str CS.System.String
	@arg0 CS.System.Object
--]]
function CS.Utility.Debugger:Assert(condition,str,arg0) end
--[[
	@condition CS.System.Boolean
	@str CS.System.String
	@arg0 CS.System.Object
	@arg1 CS.System.Object
--]]
function CS.Utility.Debugger:Assert(condition,str,arg0,arg1) end
--[[
	@condition CS.System.Boolean
	@str CS.System.String
	@arg0 CS.System.Object
	@arg1 CS.System.Object
	@arg2 CS.System.Object
--]]
function CS.Utility.Debugger:Assert(condition,str,arg0,arg1,arg2) end
--[[
	@condition CS.System.Boolean
	@str CS.System.String
	@param CS.System.Object{}
--]]
function CS.Utility.Debugger:Assert(condition,str,param) end
--[[
	@e CS.System.Exception
--]]
function CS.Utility.Debugger:LogException(e) end
--[[
	@str CS.System.String
	@e CS.System.Exception
--]]
function CS.Utility.Debugger:LogException(str,e) end

--@SuperType [luaIde#CS.System.Object]
CS.Utility.Utils = {}
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Utility.Utils.SystemCopyBuffer = nil
--[[
	CS.System.Int64
	 Get 
--]]
CS.Utility.Utils.Ticks = nil
--[[
	@time CS.System.Int32
	@format CS.System.String
	return CS.System.String
--]]
function CS.Utility.Utils:FormatSeconds(time,format) end
--[[
	@xform CS.UnityEngine.Transform
	@layer CS.System.Int32
--]]
function CS.Utility.Utils:SetLayer(xform,layer) end
--[[
	@objTran CS.UnityEngine.Transform
	@parent CS.UnityEngine.Transform
--]]
function CS.Utility.Utils:ChangeParent(objTran,parent) end
--[[
	@obj CS.UnityEngine.Transform
	return CS.System.String
--]]
function CS.Utility.Utils:GetTranPath(obj) end
--[[
	@a CS.System.Single
	@b CS.System.Single
	@diffVar CS.System.Single
	return CS.System.Boolean
--]]
function CS.Utility.Utils:IsEqual(a,b,diffVar) end
--[[
	@arg CS.UnityEngine.Vector2
	return CS.LitJson.JsonData
--]]
function CS.Utility.Utils:Vector2Json(arg) end
--[[
	@arg CS.UnityEngine.Vector3
	return CS.LitJson.JsonData
--]]
function CS.Utility.Utils:Vector3Json(arg) end
--[[
	@arg CS.UnityEngine.Vector4
	return CS.LitJson.JsonData
--]]
function CS.Utility.Utils:Vector4Json(arg) end
--[[
	@arg CS.UnityEngine.Color
	return CS.LitJson.JsonData
--]]
function CS.Utility.Utils:ColorJson(arg) end
--[[
	@arg CS.UnityEngine.AnimationCurve
	return CS.LitJson.JsonData
--]]
function CS.Utility.Utils:AnimationCurveJson(arg) end
--[[
	@json CS.LitJson.JsonData
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.Utility.Utils:JsonToVector2(json) end
--[[
	@json CS.LitJson.JsonData
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.Utility.Utils:JsonToVector3(json) end
--[[
	@json CS.LitJson.JsonData
	@return [luaIde#CS.UnityEngine.Vector4]
--]]
function CS.Utility.Utils:JsonToVector4(json) end
--[[
	@json CS.LitJson.JsonData
	@return [luaIde#CS.UnityEngine.Color]
--]]
function CS.Utility.Utils:JsonToColor(json) end
--[[
	@json CS.LitJson.JsonData
	@return [luaIde#CS.UnityEngine.AnimationCurve]
--]]
function CS.Utility.Utils:JsonAnimationCurve(json) end
--[[
	@str CS.System.String
	return CS.System.Int32
--]]
function CS.Utility.Utils:UnicodeStringLength(str) end
--[[
	@str CS.System.String
	@num CS.System.Int32
	return CS.System.String
--]]
function CS.Utility.Utils:GetStringFont(str,num) end
--[[
	@bytes CS.System.Byte{}&
	@key1 CS.System.String
	@key2 CS.System.String
	return CS.System.Byte{}
--]]
function CS.Utility.Utils:EaseDecrypt(bytes,key1,key2) end

--@SuperType [luaIde#CS.System.Object]
CS.Utility.TimeDelay = {}
--[[
	@index CS.System.Int32
	@isValid CS.System.Boolean
--]]
function CS.Utility.TimeDelay:SetValid(index,isValid) end
--[[
	@index CS.System.Int32{}
	@isValid CS.System.Boolean
--]]
function CS.Utility.TimeDelay:SetValid(index,isValid) end
function CS.Utility.TimeDelay:SceneClear() end
function CS.Utility.TimeDelay:Clear() end
--[[
	@delay CS.System.Single
	@isSceneRemove CS.System.Boolean
	@call CS.System.Action`1{{System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	return CS.System.Int32
--]]
function CS.Utility.TimeDelay:DelayCall(delay,isSceneRemove,call) end
--[[
	@delay CS.System.Single
	@isSceneRemove CS.System.Boolean
	@call CS.System.Action`2{{System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@param CS.System.Object
	return CS.System.Int32
--]]
function CS.Utility.TimeDelay:DelayCall(delay,isSceneRemove,call,param) end
--[[
	@delay CS.System.Single
	@isSceneRemove CS.System.Boolean
	@call CS.System.Action`3{{System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@param1 CS.System.Object
	@param2 CS.System.Object
	return CS.System.Int32
--]]
function CS.Utility.TimeDelay:DelayCall(delay,isSceneRemove,call,param1,param2) end
function CS.Utility.TimeDelay:Update() end

--@SuperType [luaIde#CS.System.Object]
CS.Loader.LoadAccessor = {}
--[[
	@loadAttachBehaviour CS.UnityEngine.MonoBehaviour
	@coroutineCount CS.System.Int32
	@dataPath CS.System.String
	@cachedFileList CS.System.Collections.Generic.Dictionary`2{{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.Loader.LoadAccessor:Init(loadAttachBehaviour,coroutineCount,dataPath,cachedFileList) end
--[[
	@sceneIndex CS.System.Int32
--]]
function CS.Loader.LoadAccessor:RefreshSceneIndex(sceneIndex) end
--[[
	@session CS.Loader.LoadSession
	@onLoadScene CS.System.Action`1{{Loader.LoadSession, Scripts, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.Loader.LoadAccessor:LoadScene(session,onLoadScene) end
--[[
	@session CS.Loader.LoadSession
	@onLoadAsset CS.System.Action`2{{Loader.LoadSession, Scripts, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.Loader.LoadAccessor:LoadAsset(session,onLoadAsset) end
--[[
	@session CS.Loader.LoadSession
	@onLoadAsset CS.System.Action`2{{Loader.LoadSession, Scripts, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.Loader.LoadAccessor:LoadAssetPriority(session,onLoadAsset) end
--[[
	@session CS.Loader.LoadSession
	@onLoadAsset CS.System.Action`2{{Loader.LoadSession, Scripts, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.Loader.LoadAccessor:LoadAssetImmediate(session,onLoadAsset) end
--[[
	@fontName CS.System.String
	return CS.UnityEngine.Font
--]]
function CS.Loader.LoadAccessor:LoadFont(fontName) end
--[[
	@path CS.System.String
	return CS.System.String
--]]
function CS.Loader.LoadAccessor:LoadText(path) end
--[[
	@path CS.System.String
	return CS.System.Byte{}
--]]
function CS.Loader.LoadAccessor:LoadBytes(path) end
--[[
	@path CS.System.String
	return CS.System.Byte{}
--]]
function CS.Loader.LoadAccessor:LoadEncryptBytes(path) end
--[[
	@pathWithExtension CS.System.String
	return CS.System.String
--]]
function CS.Loader.LoadAccessor:ReadText(pathWithExtension) end
--[[
	@pathWithExtension CS.System.String
	return CS.System.String{}
--]]
function CS.Loader.LoadAccessor:ReadLines(pathWithExtension) end
--[[
	@pathWithExtension CS.System.String
	return CS.System.Byte{}
--]]
function CS.Loader.LoadAccessor:ReadBytes(pathWithExtension) end
--[[
	@pathWithExtension CS.System.String
	@text CS.System.String
--]]
function CS.Loader.LoadAccessor:WriteText(pathWithExtension,text) end
--[[
	@pathWithExtension CS.System.String
	@lines CS.System.String{}
--]]
function CS.Loader.LoadAccessor:WriteLines(pathWithExtension,lines) end
--[[
	@pathWithExtension CS.System.String
	@bytes CS.System.Byte{}
--]]
function CS.Loader.LoadAccessor:WriteBytes(pathWithExtension,bytes) end
--[[
	@pathWithExtension CS.System.String
	@text CS.System.String
--]]
function CS.Loader.LoadAccessor:AppendText(pathWithExtension,text) end

--@SuperType [luaIde#CS.System.Object]
CS.Loader.LoadSession = {}
--[[
	@return [luaIde#CS.Loader.LoadSession]
]]
function CS.Loader.LoadSession() end
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Loader.LoadSession.Name = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Loader.LoadSession.Path = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Loader.LoadSession.Error = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Loader.LoadSession.SceneIndex = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Loader.LoadSession.IsChangeSceneBreak = nil
--[[
	CS.System.Type
	 Get 	 Set 
--]]
CS.Loader.LoadSession.AssetType = nil
--[[
	@RefType [luaIde#CS.System.Object]
	 Get 	 Set 
--]]
CS.Loader.LoadSession.Param = nil
--[[
	@RefType [luaIde#CS.System.Object]
	 Get 	 Set 
--]]
CS.Loader.LoadSession.Param1 = nil
--[[
	@_name CS.System.String
	@_path CS.System.String
	@_param CS.System.Object
	@_param1 CS.System.Object
	@_IsChangeSceneBreak CS.System.Boolean
	@return [luaIde#CS.Loader.LoadSession]
--]]
function CS.Loader.LoadSession:Pop(_name,_path,_param,_param1,_IsChangeSceneBreak) end
--[[
	@_name CS.System.String
	@_path CS.System.String
	@return [luaIde#CS.Loader.LoadSession]
--]]
function CS.Loader.LoadSession:Pop(_name,_path) end
--[[
	@_name CS.System.String
	@_path CS.System.String
	@_param CS.System.Object
	@return [luaIde#CS.Loader.LoadSession]
--]]
function CS.Loader.LoadSession:Pop(_name,_path,_param) end
--[[
	@_name CS.System.String
	@_path CS.System.String
	@_param CS.System.Object
	@_param1 CS.System.Object
	@return [luaIde#CS.Loader.LoadSession]
--]]
function CS.Loader.LoadSession:Pop(_name,_path,_param,_param1) end
--[[
	@_name CS.System.String
	@_path CS.System.String
	@_IsChangeSceneBreak CS.System.Boolean
	@return [luaIde#CS.Loader.LoadSession]
--]]
function CS.Loader.LoadSession:Pop(_name,_path,_IsChangeSceneBreak) end
--[[
	@param CS.Loader.LoadSession
--]]
function CS.Loader.LoadSession:Push(param) end

--@SuperType [luaIde#CS.System.Object]
CS.JGui.JGuiManager = {}
--[[
	CS.JGui.IJGuiOperator
	 Get 	 Set 
--]]
CS.JGui.JGuiManager.Operator = nil
--[[
	CS.UnityEngine.Font
	 Get 
--]]
CS.JGui.JGuiManager.DefaultFont = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiRoot]
	 Get 
--]]
CS.JGui.JGuiManager.GuiRoot = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Material]
	 Get 
--]]
CS.JGui.JGuiManager.GrayMaterial = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Material]
	 Get 
--]]
CS.JGui.JGuiManager.HoleMaterial = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Material]
	 Get 
--]]
CS.JGui.JGuiManager.HoleRectMaterial = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Material]
	 Get 
--]]
CS.JGui.JGuiManager.BlurMaterial = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.JGui.JGuiManager.DefaultFontName = nil
--[[
	@fontName CS.System.String
	return CS.UnityEngine.Font
--]]
function CS.JGui.JGuiManager:GetFont(fontName) end
--[[
	@xform CS.UnityEngine.Transform
	@layer CS.System.Int32
--]]
function CS.JGui.JGuiManager:SetLayer(xform,layer) end
--[[
	@objTran CS.UnityEngine.Transform
	@parent CS.UnityEngine.Transform
--]]
function CS.JGui.JGuiManager:ChangeParent(objTran,parent) end
--[[
	@parent CS.UnityEngine.Transform
	@name CS.System.String
	@sortLayerID CS.System.String
	@canvasIndex CS.System.Int32
	@return [luaIde#CS.JGui.JGuiMoudle]
--]]
function CS.JGui.JGuiManager:GetMoudle(parent,name,sortLayerID,canvasIndex) end
--[[
	@parent CS.JGui.JGuiRect
	@name CS.System.String
	@sortLayerID CS.System.String
	@canvasIndex CS.System.Int32
	@return [luaIde#CS.JGui.JGuiMoudle]
--]]
function CS.JGui.JGuiManager:GetMoudle(parent,name,sortLayerID,canvasIndex) end
--[[
	@parent CS.UnityEngine.Transform
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiRect]
--]]
function CS.JGui.JGuiManager:CreateRect(parent,name) end
--[[
	@parent CS.JGui.JGuiRect
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiRect]
--]]
function CS.JGui.JGuiManager:CreateRect(parent,name) end
--[[
	@parent CS.UnityEngine.Transform
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiEmpty]
--]]
function CS.JGui.JGuiManager:CreateEmpty(parent,name) end
--[[
	@parent CS.JGui.JGuiRect
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiEmpty]
--]]
function CS.JGui.JGuiManager:CreateEmpty(parent,name) end
--[[
	@parent CS.UnityEngine.Transform
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiRadarChart]
--]]
function CS.JGui.JGuiManager:CreateRadarChart(parent,name) end
--[[
	@parent CS.JGui.JGuiRect
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiRadarChart]
--]]
function CS.JGui.JGuiManager:CreateRadarChart(parent,name) end
--[[
	@parent CS.UnityEngine.Transform
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiActor]
--]]
function CS.JGui.JGuiManager:CreateActor(parent,name) end
--[[
	@parent CS.JGui.JGuiRect
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiActor]
--]]
function CS.JGui.JGuiManager:CreateActor(parent,name) end
--[[
	@parent CS.UnityEngine.Transform
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiCanvas]
--]]
function CS.JGui.JGuiManager:CreateCanvas(parent,name) end
--[[
	@parent CS.JGui.JGuiRect
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiCanvas]
--]]
function CS.JGui.JGuiManager:CreateCanvas(parent,name) end
--[[
	@parent CS.UnityEngine.Transform
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiImage]
--]]
function CS.JGui.JGuiManager:CreateImage(parent,name) end
--[[
	@parent CS.JGui.JGuiRect
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiImage]
--]]
function CS.JGui.JGuiManager:CreateImage(parent,name) end
--[[
	@parent CS.UnityEngine.Transform
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiTexture]
--]]
function CS.JGui.JGuiManager:CreateTexture(parent,name) end
--[[
	@parent CS.JGui.JGuiRect
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiTexture]
--]]
function CS.JGui.JGuiManager:CreateTexture(parent,name) end
--[[
	@parent CS.UnityEngine.Transform
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiText]
--]]
function CS.JGui.JGuiManager:CreateText(parent,name) end
--[[
	@parent CS.JGui.JGuiRect
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiText]
--]]
function CS.JGui.JGuiManager:CreateText(parent,name) end
--[[
	@parent CS.UnityEngine.Transform
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiImageText]
--]]
function CS.JGui.JGuiManager:CreateImageText(parent,name) end
--[[
	@parent CS.JGui.JGuiRect
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiImageText]
--]]
function CS.JGui.JGuiManager:CreateImageText(parent,name) end
--[[
	@parent CS.UnityEngine.Transform
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiInput]
--]]
function CS.JGui.JGuiManager:CreateInput(parent,name) end
--[[
	@parent CS.JGui.JGuiRect
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiInput]
--]]
function CS.JGui.JGuiManager:CreateInput(parent,name) end
--[[
	@parent CS.UnityEngine.Transform
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiScrollbar]
--]]
function CS.JGui.JGuiManager:CreateScrollbar(parent,name) end
--[[
	@parent CS.JGui.JGuiRect
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiScrollbar]
--]]
function CS.JGui.JGuiManager:CreateScrollbar(parent,name) end
--[[
	@parent CS.UnityEngine.Transform
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiSlider]
--]]
function CS.JGui.JGuiManager:CreateSlider(parent,name) end
--[[
	@parent CS.JGui.JGuiRect
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiSlider]
--]]
function CS.JGui.JGuiManager:CreateSlider(parent,name) end
--[[
	@parent CS.UnityEngine.Transform
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiScrollView]
--]]
function CS.JGui.JGuiManager:CreateScrollView(parent,name) end
--[[
	@parent CS.JGui.JGuiRect
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiScrollView]
--]]
function CS.JGui.JGuiManager:CreateScrollView(parent,name) end
--[[
	@image CS.JGui.GUIImage
	@spName CS.System.String
	return CS.System.String
--]]
function CS.JGui.JGuiManager:LoadImage(image,spName) end
--[[
	@image CS.JGui.GUIImage
--]]
function CS.JGui.JGuiManager:OnDestroyImage(image) end
--[[
	@name CS.System.String
	return CS.System.Single
--]]
function CS.JGui.JGuiManager:GetImageWidth(name) end
--[[
	@name CS.System.String
	return CS.System.Single
--]]
function CS.JGui.JGuiManager:GetImageHeight(name) end
--[[
	@tweenerName CS.System.String
	return CS.LitJson.JsonData
--]]
function CS.JGui.JGuiManager:GetTweener(tweenerName) end
function CS.JGui.JGuiManager:UICloseClean() end
--[[
	@c CS.UnityEngine.Color
	return CS.System.String
--]]
function CS.JGui.JGuiManager:EncodeColor(c) end
--[[
	@c CS.UnityEngine.Color
	return CS.System.Int32
--]]
function CS.JGui.JGuiManager:ColorToInt(c) end
--[[
	@num CS.System.Int32
	return CS.System.String
--]]
function CS.JGui.JGuiManager:DecimalToHex(num) end
--[[
	@hex CS.System.String
	@return [luaIde#CS.UnityEngine.Color]
--]]
function CS.JGui.JGuiManager:HexToColor(hex) end
--[[
	@_AnchorType CS.JGui.JGuiManager.AnchorType
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.JGui.JGuiManager:GetAnchorPos(_AnchorType) end
--[[
	@position CS.UnityEngine.Vector2
	return CS.UnityEngine.GameObject{}
--]]
function CS.JGui.JGuiManager:RaycastAll(position) end
--[[
	@obj CS.UnityEngine.GameObject
	@position CS.UnityEngine.Vector2
--]]
function CS.JGui.JGuiManager:CallEvent(obj,position) end
function CS.JGui.JGuiManager:DisableAllAction() end
function CS.JGui.JGuiManager:EnableAllAction() end
--[[
	@rect CS.JGui.JGuiRect
--]]
function CS.JGui.JGuiManager:DestroyAllChildActor(rect) end
--[[
	@images CS.System.String{}
--]]
function CS.JGui.JGuiManager:PrevLoadImage(images) end

--@SuperType [luaIde#CS.System.Enum]
CS.JGui.JGuiManager.AnchorType = {}
--[[
	CS.JGui.JGuiManager.AnchorType
	 Get 	 Set 
--]]
CS.JGui.JGuiManager.AnchorType.Center = 0
--[[
	CS.JGui.JGuiManager.AnchorType
	 Get 	 Set 
--]]
CS.JGui.JGuiManager.AnchorType.TopLeft = 1
--[[
	CS.JGui.JGuiManager.AnchorType
	 Get 	 Set 
--]]
CS.JGui.JGuiManager.AnchorType.Top = 2
--[[
	CS.JGui.JGuiManager.AnchorType
	 Get 	 Set 
--]]
CS.JGui.JGuiManager.AnchorType.TopRight = 3
--[[
	CS.JGui.JGuiManager.AnchorType
	 Get 	 Set 
--]]
CS.JGui.JGuiManager.AnchorType.Left = 4
--[[
	CS.JGui.JGuiManager.AnchorType
	 Get 	 Set 
--]]
CS.JGui.JGuiManager.AnchorType.Right = 5
--[[
	CS.JGui.JGuiManager.AnchorType
	 Get 	 Set 
--]]
CS.JGui.JGuiManager.AnchorType.BottomLeft = 6
--[[
	CS.JGui.JGuiManager.AnchorType
	 Get 	 Set 
--]]
CS.JGui.JGuiManager.AnchorType.Bottom = 7
--[[
	CS.JGui.JGuiManager.AnchorType
	 Get 	 Set 
--]]
CS.JGui.JGuiManager.AnchorType.BottomRight = 8

--@SuperType [luaIde#CS.UnityEngine.MonoBehaviour]
CS.JGui.JGuiMoudle = {}
--[[
	@return [luaIde#CS.JGui.JGuiMoudle]
]]
function CS.JGui.JGuiMoudle() end
--[[
	@RefType [luaIde#CS.JGui.JGuiRect]
	 Get 
--]]
CS.JGui.JGuiMoudle.SelfRect = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.JGui.JGuiMoudle.SortingOrder = nil
--[[
	@isNeedToMoudle CS.System.Boolean
	@isResources CS.System.Boolean
--]]
function CS.JGui.JGuiMoudle:Make(isNeedToMoudle,isResources) end
--[[
	@sortLayerName CS.System.String
	@canvasIndex CS.System.Int32
--]]
function CS.JGui.JGuiMoudle:Init(sortLayerName,canvasIndex) end
--[[
	@name CS.System.String
	@return [luaIde#CS.JGui.JGuiRect]
--]]
function CS.JGui.JGuiMoudle:Get(name) end
function CS.JGui.JGuiMoudle:Destroy() end

--@SuperType [luaIde#CS.UnityEngine.MonoBehaviour]
CS.JGui.JGuiRect = {}
--[[
	@return [luaIde#CS.JGui.JGuiRect]
]]
function CS.JGui.JGuiRect() end
--[[
	@RefType [luaIde#CS.UnityEngine.GameObject]
	 Get 
--]]
CS.JGui.JGuiRect.CachedObj = nil
--[[
	@RefType [luaIde#CS.UnityEngine.RectTransform]
	 Get 
--]]
CS.JGui.JGuiRect.CachedTran = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.JGui.JGuiRect.Name = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiRect.Activity = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.JGui.JGuiRect.LocalPosition = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiRect.LocalPositionX = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiRect.LocalPositionY = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.JGui.JGuiRect.LocalPosition3D = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.JGui.JGuiRect.LocalScale = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Quaternion]
	 Get 	 Set 
--]]
CS.JGui.JGuiRect.LocalRotation = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.JGui.JGuiRect.LocalEulerAngles = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.JGui.JGuiRect.AnchorMax = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.JGui.JGuiRect.AnchorMin = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.JGui.JGuiRect.OffsetMax = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.JGui.JGuiRect.OffsetMin = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.JGui.JGuiRect.Pivot = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Rect]
	 Get 
--]]
CS.JGui.JGuiRect.Rect = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.JGui.JGuiRect.SizeDelta = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiRect]
	 Get 	 Set 
--]]
CS.JGui.JGuiRect.Parent = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 
--]]
CS.JGui.JGuiRect.ScreenPos = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 
--]]
CS.JGui.JGuiRect.RootCanvasPos = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiRect.RaycastTarget = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JGui.JGuiRect.EventPenetrateDepth = nil
--[[
	@tran CS.UnityEngine.RectTransform
--]]
function CS.JGui.JGuiRect:CopyRectFrom(tran) end
--[[
	@parent CS.UnityEngine.Transform
--]]
function CS.JGui.JGuiRect:SetParent(parent) end
--[[
	@screenPos CS.UnityEngine.Vector2
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.JGui.JGuiRect:ScreenPosToLocal(screenPos) end
--[[
	@anchorType CS.JGui.JGuiManager.AnchorType
--]]
function CS.JGui.JGuiRect:SetAnchor(anchorType) end
--[[
	@anchorType CS.JGui.JGuiManager.AnchorType
--]]
function CS.JGui.JGuiRect:SetPiovt(anchorType) end
function CS.JGui.JGuiRect:SetAllDirty() end
function CS.JGui.JGuiRect:SetNativeSize() end
--[[
	@addSize CS.System.Int32
--]]
function CS.JGui.JGuiRect:SetFullSize(addSize) end
function CS.JGui.JGuiRect:Destroy() end
function CS.JGui.JGuiRect:DestroyChildren() end
--[[
	@eventData CS.UnityEngine.EventSystems.PointerEventData
--]]
function CS.JGui.JGuiRect:OnPointerClick(eventData) end
--[[
	@eventData CS.UnityEngine.EventSystems.PointerEventData
--]]
function CS.JGui.JGuiRect:OnPointerDown(eventData) end
--[[
	@eventData CS.UnityEngine.EventSystems.PointerEventData
--]]
function CS.JGui.JGuiRect:OnPointerUp(eventData) end
--[[
	@eventData CS.UnityEngine.EventSystems.PointerEventData
--]]
function CS.JGui.JGuiRect:OnPointerDrag(eventData) end
--[[
	@call CS.System.Action`3{{JGui.JGuiRect, Gui, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{JGui.JGuiEventData, Gui, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@arg CS.System.Object
	@return [luaIde#CS.JGui.JGuiEvent]
--]]
function CS.JGui.JGuiRect:AddOnPress(call,arg) end
--[[
	@call CS.System.Action`3{{JGui.JGuiRect, Gui, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{JGui.JGuiEventData, Gui, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@arg CS.System.Object
	@return [luaIde#CS.JGui.JGuiEvent]
--]]
function CS.JGui.JGuiRect:AddOnClick(call,arg) end
--[[
	@call CS.System.Action`3{{JGui.JGuiRect, Gui, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{JGui.JGuiEventData, Gui, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@arg CS.System.Object
	@param CS.System.Single
	@return [luaIde#CS.JGui.JGuiEvent]
--]]
function CS.JGui.JGuiRect:AddOnButton(call,arg,param) end
--[[
	@call CS.System.Action`3{{JGui.JGuiRect, Gui, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{JGui.JGuiEventData, Gui, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@arg CS.System.Object
	@return [luaIde#CS.JGui.JGuiEvent]
--]]
function CS.JGui.JGuiRect:AddOnDrag(call,arg) end
--[[
	@call CS.System.Action`3{{JGui.JGuiRect, Gui, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{JGui.JGuiEventData, Gui, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@arg CS.System.Object
	@spaceTime CS.System.Single
	@return [luaIde#CS.JGui.JGuiEvent]
--]]
function CS.JGui.JGuiRect:AddOnUpdate(call,arg,spaceTime) end
--[[
	@call CS.System.Action`3{{JGui.JGuiRect, Gui, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{JGui.JGuiEventData, Gui, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@arg CS.System.Object
	@delayTime CS.System.Single
	@return [luaIde#CS.JGui.JGuiEvent]
--]]
function CS.JGui.JGuiRect:AddOnTime(call,arg,delayTime) end
function CS.JGui.JGuiRect:DelGridLayoutGroup() end
function CS.JGui.JGuiRect:AddGridLayoutGroup() end
function CS.JGui.JGuiRect:DelHorizontalLayoutGroup() end
function CS.JGui.JGuiRect:AddHorizontalLayoutGroup() end
function CS.JGui.JGuiRect:DelVerticalLayoutGroup() end
function CS.JGui.JGuiRect:AddVerticalLayoutGroup() end
function CS.JGui.JGuiRect:DelHorizontalOrVerticalLayoutGroup() end
function CS.JGui.JGuiRect:AddHorizontalOrVerticalLayoutGroup() end
function CS.JGui.JGuiRect:DelLayoutElement() end
function CS.JGui.JGuiRect:AddLayoutElement() end
function CS.JGui.JGuiRect:AddContentSizeFitter() end
function CS.JGui.JGuiRect:DelContentSizeFitter() end
function CS.JGui.JGuiRect:AddCanvasGroup() end
function CS.JGui.JGuiRect:DelCanvasGroup() end
--[[
	@tweenerName CS.System.String
	@finishCall CS.System.Action
--]]
function CS.JGui.JGuiRect:Tweener(tweenerName,finishCall) end
--[[
	@endValue CS.UnityEngine.Vector3
	@duration CS.System.Single
	@mode CS.DG.Tweening.RotateMode
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiRect:DOLocalRotate(endValue,duration,mode) end
--[[
	@endValue CS.UnityEngine.Quaternion
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiRect:DOLocalRotateQuaternion(endValue,duration) end
--[[
	@endValue CS.UnityEngine.Vector3
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiRect:DOScale(endValue,duration) end
--[[
	@endValue CS.System.Single
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiRect:DOScale(endValue,duration) end
--[[
	@endValue CS.System.Single
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiRect:DOScaleX(endValue,duration) end
--[[
	@endValue CS.System.Single
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiRect:DOScaleY(endValue,duration) end
--[[
	@endValue CS.System.Single
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiRect:DOScaleZ(endValue,duration) end
--[[
	@endValue CS.UnityEngine.Vector2
	@duration CS.System.Single
	@snapping CS.System.Boolean
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiRect:DOAnchorMax(endValue,duration,snapping) end
--[[
	@endValue CS.UnityEngine.Vector2
	@duration CS.System.Single
	@snapping CS.System.Boolean
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiRect:DOAnchorMin(endValue,duration,snapping) end
--[[
	@endValue CS.UnityEngine.Vector2
	@duration CS.System.Single
	@snapping CS.System.Boolean
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiRect:DOAnchorPos(endValue,duration,snapping) end
--[[
	@endValue CS.UnityEngine.Vector3
	@duration CS.System.Single
	@snapping CS.System.Boolean
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiRect:DOAnchorPos3D(endValue,duration,snapping) end
--[[
	@endValue CS.System.Single
	@duration CS.System.Single
	@snapping CS.System.Boolean
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiRect:DOAnchorPosX(endValue,duration,snapping) end
--[[
	@endValue CS.System.Single
	@duration CS.System.Single
	@snapping CS.System.Boolean
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiRect:DOAnchorPosY(endValue,duration,snapping) end
--[[
	@endValue CS.UnityEngine.Vector2
	@jumpPower CS.System.Single
	@numJumps CS.System.Int32
	@duration CS.System.Single
	@snapping CS.System.Boolean
	@return [luaIde#CS.DG.Tweening.Sequence]
--]]
function CS.JGui.JGuiRect:DOJumpAnchorPos(endValue,jumpPower,numJumps,duration,snapping) end
--[[
	@endValue CS.UnityEngine.Vector2
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiRect:DOPivot(endValue,duration) end
--[[
	@endValue CS.System.Single
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiRect:DOPivotX(endValue,duration) end
--[[
	@endValue CS.System.Single
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiRect:DOPivotY(endValue,duration) end
--[[
	@punch CS.UnityEngine.Vector2
	@duration CS.System.Single
	@vibrato CS.System.Int32
	@elasticity CS.System.Single
	@snapping CS.System.Boolean
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiRect:DOPunchAnchorPos(punch,duration,vibrato,elasticity,snapping) end
--[[
	@duration CS.System.Single
	@strength CS.System.Single
	@vibrato CS.System.Int32
	@randomness CS.System.Single
	@snapping CS.System.Boolean
	@fadeOut CS.System.Boolean
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiRect:DOShakeAnchorPos(duration,strength,vibrato,randomness,snapping,fadeOut) end
--[[
	@duration CS.System.Single
	@strength CS.UnityEngine.Vector2
	@vibrato CS.System.Int32
	@randomness CS.System.Single
	@snapping CS.System.Boolean
	@fadeOut CS.System.Boolean
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiRect:DOShakeAnchorPos(duration,strength,vibrato,randomness,snapping,fadeOut) end
--[[
	@endValue CS.UnityEngine.Vector2
	@duration CS.System.Single
	@snapping CS.System.Boolean
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiRect:DOSizeDelta(endValue,duration,snapping) end
function CS.JGui.JGuiRect:DOKill() end
function CS.JGui.JGuiRect:DOFlip() end
--[[
	@to CS.System.Single
	@andPlay CS.System.Boolean
	return CS.System.Int32
--]]
function CS.JGui.JGuiRect:DOGoto(to,andPlay) end
function CS.JGui.JGuiRect:DOPause() end
function CS.JGui.JGuiRect:DOPlay() end
function CS.JGui.JGuiRect:DOPlayBackwards() end
function CS.JGui.JGuiRect:DOPlayForward() end
function CS.JGui.JGuiRect:DORestart() end
function CS.JGui.JGuiRect:DORewind() end
function CS.JGui.JGuiRect:DOTogglePause() end

--@SuperType [luaIde#CS.JGui.JGuiRect]
CS.JGui.JGuiEmpty = {}
--[[
	@return [luaIde#CS.JGui.JGuiEmpty]
]]
function CS.JGui.JGuiEmpty() end
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiEmpty.RaycastTarget = nil
function CS.JGui.JGuiEmpty:SetNativeSize() end
function CS.JGui.JGuiEmpty:SetAllDirty() end

--@SuperType [luaIde#CS.JGui.JGuiMaskableGraphic]
CS.JGui.JGuiRadarChart = {}
--[[
	@return [luaIde#CS.JGui.JGuiRadarChart]
]]
function CS.JGui.JGuiRadarChart() end
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiRadarChart.IsFill = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiRadarChart.FillPercent = nil
--[[
	CS.System.Single{}
	 Get 	 Set 
--]]
CS.JGui.JGuiRadarChart.Values = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiRadarChart.AngleOffset = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiRadarChart.UseStateLine = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 	 Set 
--]]
CS.JGui.JGuiRadarChart.LineColor = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiRadarChart.LineWidth = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiRadarChart.LineLength = nil

--@SuperType [luaIde#CS.JGui.JGuiRect]
CS.JGui.JGuiActor = {}
--[[
	@return [luaIde#CS.JGui.JGuiActor]
]]
function CS.JGui.JGuiActor() end
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 	 Set 
--]]
CS.JGui.JGuiActor.SkeletonColor = nil
--[[
	@addSize CS.System.Int32
--]]
function CS.JGui.JGuiActor:SetFullSize(addSize) end
function CS.JGui.JGuiActor:SetNativeSize() end
function CS.JGui.JGuiActor:DestroyEffect() end
--[[
	@effectName CS.System.String
	@playTime CS.System.Single
--]]
function CS.JGui.JGuiActor:LoadEffect(effectName,playTime) end
--[[
	@sortingLayerName CS.System.String
	@sortingOrder CS.System.Int32
--]]
function CS.JGui.JGuiActor:SetEffectSortingLayer(sortingLayerName,sortingOrder) end
function CS.JGui.JGuiActor:SkeletonGetGraphic() end
--[[
	@target CS.UnityEngine.GameObject
	@boneName CS.System.String
	@followBoneRotation CS.System.Boolean
	@followSkeletonFlip CS.System.Boolean
	@followLocalScale CS.System.Boolean
	@followZPosition CS.System.Boolean
	@return [luaIde#CS.Spine.Unity.BoneFollowerGraphic]
--]]
function CS.JGui.JGuiActor:SkeletonFollowerGraphic(target,boneName,followBoneRotation,followSkeletonFlip,followLocalScale,followZPosition) end
--[[
	@animName CS.System.String
	@trackIndex CS.System.Int32
	@isLoop CS.System.Boolean
	@isImmediately CS.System.Boolean
	@return [luaIde#CS.Spine.TrackEntry]
--]]
function CS.JGui.JGuiActor:SkeletonSetAnimation(animName,trackIndex,isLoop,isImmediately) end
--[[
	@mixDuration CS.System.Single
	@trackIndex CS.System.Int32
	@return [luaIde#CS.Spine.TrackEntry]
--]]
function CS.JGui.JGuiActor:SkeletonSetEmptyAnimation(mixDuration,trackIndex) end
--[[
	@trackEntryDelegate CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.JGui.JGuiActor:SkeletonOnStart(trackEntryDelegate) end
--[[
	@trackEntryDelegate CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.JGui.JGuiActor:SkeletonOnComplete(trackEntryDelegate) end
--[[
	@trackEntryDelegate CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.JGui.JGuiActor:SkeletonOnInterrupt(trackEntryDelegate) end
--[[
	@trackEntryDelegate CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.JGui.JGuiActor:SkeletonOnEnd(trackEntryDelegate) end
--[[
	@trackEntryDelegate CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.JGui.JGuiActor:SkeletonOnDispose(trackEntryDelegate) end
--[[
	@trackIndex CS.System.Int32
	@return [luaIde#CS.Spine.TrackEntry]
--]]
function CS.JGui.JGuiActor:SkeletonGetAnimation(trackIndex) end
--[[
	@skinName CS.System.String
--]]
function CS.JGui.JGuiActor:SkeletonChangeSkin(skinName) end

--@SuperType [luaIde#CS.JGui.JGuiRect]
CS.JGui.JGuiCanvas = {}
--[[
	@return [luaIde#CS.JGui.JGuiCanvas]
]]
function CS.JGui.JGuiCanvas() end
--[[
	CS.UnityEngine.AdditionalCanvasShaderChannels
	 Get 	 Set 
--]]
CS.JGui.JGuiCanvas.AdditionalShaderChannels = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.JGui.JGuiCanvas.CachedSortingLayerValue = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiCanvas.NormalizedSortingGridSize = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiCanvas.OverridePixelPerfect = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiCanvas.OverrideSorting = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiCanvas.PixelPerfect = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Rect]
	 Get 
--]]
CS.JGui.JGuiCanvas.PixelRect = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiCanvas.PlaneDistance = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiCanvas.ReferencePixelsPerUnit = nil
--[[
	CS.UnityEngine.RenderMode
	 Get 	 Set 
--]]
CS.JGui.JGuiCanvas.RenderMode = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.JGui.JGuiCanvas.RenderOrder = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiCanvas]
	 Get 
--]]
CS.JGui.JGuiCanvas.RootCanvas = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiCanvas.ScaleFactor = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JGui.JGuiCanvas.SortingLayerID = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.JGui.JGuiCanvas.SortingLayerName = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JGui.JGuiCanvas.SortingOrder = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JGui.JGuiCanvas.TargetDisplay = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Camera]
	 Get 
--]]
CS.JGui.JGuiCanvas.WorldCamera = nil
function CS.JGui.JGuiCanvas:SetNativeSize() end
function CS.JGui.JGuiCanvas:DelCanvasGroup() end
function CS.JGui.JGuiCanvas:AddCanvasGroup() end
--[[
	@addSize CS.System.Int32
--]]
function CS.JGui.JGuiCanvas:SetFullSize(addSize) end
function CS.JGui.JGuiCanvas:ForceUpdateCanvases() end
function CS.JGui.JGuiCanvas:GetDefaultCanvasMaterial() end
function CS.JGui.JGuiCanvas:GetETC1SupportedCanvasMaterial() end

--@SuperType [luaIde#CS.JGui.JGuiRect]
CS.JGui.JGuiGraphic = {}
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiGraphic.RaycastTarget = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 	 Set 
--]]
CS.JGui.JGuiGraphic.Color = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiGraphic.Alpha = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Material]
	 Get 
--]]
CS.JGui.JGuiGraphic.DefaultGraphicMaterial = nil
--[[
	CS.UnityEngine.Canvas
	 Get 
--]]
CS.JGui.JGuiGraphic.Canvas = nil
--[[
	CS.UnityEngine.CanvasRenderer
	 Get 
--]]
CS.JGui.JGuiGraphic.CanvasRenderer = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Material]
	 Get 
--]]
CS.JGui.JGuiGraphic.DefaultMaterial = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.JGui.JGuiGraphic.Depth = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiGraphic.IsGray = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiGraphic.IsBlur = nil
--[[
	CS.UnityEngine.Texture
	 Get 
--]]
CS.JGui.JGuiGraphic.MainTexture = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Material]
	 Get 	 Set 
--]]
CS.JGui.JGuiGraphic.Material = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Material]
	 Get 
--]]
CS.JGui.JGuiGraphic.MaterialForRendering = nil
function CS.JGui.JGuiGraphic:SetAllDirty() end
--[[
	@scale CS.System.Single
--]]
function CS.JGui.JGuiGraphic:SetGray(scale) end
--[[
	@center CS.UnityEngine.Vector2
	@current CS.System.Single
--]]
function CS.JGui.JGuiGraphic:SetHole(center,current) end
--[[
	@center CS.UnityEngine.Vector2
	@current CS.UnityEngine.Vector2
--]]
function CS.JGui.JGuiGraphic:SetHole(center,current) end
--[[
	@alpha CS.System.Single
	@duration CS.System.Single
	@ignoreTimeScale CS.System.Boolean
--]]
function CS.JGui.JGuiGraphic:CrossFadeAlpha(alpha,duration,ignoreTimeScale) end
--[[
	@targetColor CS.UnityEngine.Color
	@duration CS.System.Single
	@ignoreTimeScale CS.System.Boolean
	@useAlpha CS.System.Boolean
--]]
function CS.JGui.JGuiGraphic:CrossFadeColor(targetColor,duration,ignoreTimeScale,useAlpha) end
--[[
	@targetColor CS.UnityEngine.Color
	@duration CS.System.Single
	@ignoreTimeScale CS.System.Boolean
	@useAlpha CS.System.Boolean
	@useRGB CS.System.Boolean
--]]
function CS.JGui.JGuiGraphic:CrossFadeColor(targetColor,duration,ignoreTimeScale,useAlpha,useRGB) end
function CS.JGui.JGuiGraphic:GetPixelAdjustedRect() end
function CS.JGui.JGuiGraphic:GraphicUpdateComplete() end
function CS.JGui.JGuiGraphic:LayoutComplete() end
--[[
	@point CS.UnityEngine.Vector2
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.JGui.JGuiGraphic:PixelAdjustPoint(point) end
--[[
	@sp CS.UnityEngine.Vector2
	@eventCamera CS.UnityEngine.Camera
	return CS.System.Boolean
--]]
function CS.JGui.JGuiGraphic:Raycast(sp,eventCamera) end
--[[
	@update CS.UnityEngine.UI.CanvasUpdate
--]]
function CS.JGui.JGuiGraphic:Rebuild(update) end
function CS.JGui.JGuiGraphic:SetLayoutDirty() end
function CS.JGui.JGuiGraphic:SetMaterialDirty() end
function CS.JGui.JGuiGraphic:SetVerticesDirty() end
--[[
	@action CS.UnityEngine.Events.UnityAction
--]]
function CS.JGui.JGuiGraphic:RegisterDirtyLayoutCallback(action) end
--[[
	@action CS.UnityEngine.Events.UnityAction
--]]
function CS.JGui.JGuiGraphic:RegisterDirtyMaterialCallback(action) end
--[[
	@action CS.UnityEngine.Events.UnityAction
--]]
function CS.JGui.JGuiGraphic:RegisterDirtyVerticesCallback(action) end
--[[
	@action CS.UnityEngine.Events.UnityAction
--]]
function CS.JGui.JGuiGraphic:UnregisterDirtyLayoutCallback(action) end
--[[
	@action CS.UnityEngine.Events.UnityAction
--]]
function CS.JGui.JGuiGraphic:UnregisterDirtyMaterialCallback(action) end
--[[
	@action CS.UnityEngine.Events.UnityAction
--]]
function CS.JGui.JGuiGraphic:UnregisterDirtyVerticesCallback(action) end
--[[
	@endValue CS.UnityEngine.Color
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiGraphic:DOBlendableColor(endValue,duration) end
--[[
	@endValue CS.UnityEngine.Color
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiGraphic:DOColor(endValue,duration) end
--[[
	@endValue CS.System.Single
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiGraphic:DOFade(endValue,duration) end

--@SuperType [luaIde#CS.JGui.JGuiGraphic]
CS.JGui.JGuiMaskableGraphic = {}
--[[
	@RefType [luaIde#CS.UnityEngine.UI.MaskableGraphic.CullStateChangedEvent]
	 Get 	 Set 
--]]
CS.JGui.JGuiMaskableGraphic.OnCullStateChanged = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiMaskableGraphic.Maskable = nil
--[[
	@baseMaterial CS.UnityEngine.Material
	@return [luaIde#CS.UnityEngine.Material]
--]]
function CS.JGui.JGuiMaskableGraphic:GetModifiedMaterial(baseMaterial) end
--[[
	@clipRect CS.UnityEngine.Rect
	@validRect CS.System.Boolean
--]]
function CS.JGui.JGuiMaskableGraphic:Cull(clipRect,validRect) end
--[[
	@clipRect CS.UnityEngine.Rect
	@validRect CS.System.Boolean
--]]
function CS.JGui.JGuiMaskableGraphic:SetClipRect(clipRect,validRect) end
function CS.JGui.JGuiMaskableGraphic:RecalculateClipping() end
function CS.JGui.JGuiMaskableGraphic:RecalculateMasking() end

--@SuperType [luaIde#CS.JGui.JGuiMaskableGraphic]
CS.JGui.JGuiTexture = {}
--[[
	@return [luaIde#CS.JGui.JGuiTexture]
]]
function CS.JGui.JGuiTexture() end
--[[
	CS.UnityEngine.Texture
	 Get 
--]]
CS.JGui.JGuiTexture.MainTexture = nil
--[[
	CS.UnityEngine.Texture
	 Get 	 Set 
--]]
CS.JGui.JGuiTexture.Texture = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Rect]
	 Get 	 Set 
--]]
CS.JGui.JGuiTexture.UvRect = nil
function CS.JGui.JGuiTexture:SetNativeSize() end

--@SuperType [luaIde#CS.JGui.JGuiMaskableGraphic]
CS.JGui.JGuiImage = {}
--[[
	@return [luaIde#CS.JGui.JGuiImage]
]]
function CS.JGui.JGuiImage() end
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.JGui.JGuiImage.SpriteName = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.JGui.JGuiImage.SpriteNameAutoScale = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Material]
	 Get 
--]]
CS.JGui.JGuiImage.DefaultETC1GraphicMaterial = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiImage.AlphaHitTestMinimumThreshold = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiImage.FillAmount = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiImage.FillCenter = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiImage.FillClockwise = nil
--[[
	CS.UnityEngine.UI.Image.FillMethod
	 Get 	 Set 
--]]
CS.JGui.JGuiImage.FillMethod = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JGui.JGuiImage.FillOrigin = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiImage.FlexibleHeight = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiImage.FlexibleWidth = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.JGui.JGuiImage.HasBorder = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.JGui.JGuiImage.LayoutPriority = nil
--[[
	CS.UnityEngine.Texture
	 Get 
--]]
CS.JGui.JGuiImage.MainTexture = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Material]
	 Get 	 Set 
--]]
CS.JGui.JGuiImage.Material = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiImage.MinHeight = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiImage.MinWidth = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Sprite]
	 Get 	 Set 
--]]
CS.JGui.JGuiImage.OverrideSprite = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiImage.PixelsPerUnit = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiImage.PreferredHeight = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiImage.PreferredWidth = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiImage.PreserveAspect = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Sprite]
	 Get 	 Set 
--]]
CS.JGui.JGuiImage.Sprite = nil
--[[
	CS.UnityEngine.UI.Image.Type
	 Get 	 Set 
--]]
CS.JGui.JGuiImage.Type = nil
function CS.JGui.JGuiImage:SetNativeSize() end
function CS.JGui.JGuiImage:CalculateLayoutInputHorizontal() end
function CS.JGui.JGuiImage:CalculateLayoutInputVertical() end
--[[
	@screenPoint CS.UnityEngine.Vector2
	@eventCamera CS.UnityEngine.Camera
	return CS.System.Boolean
--]]
function CS.JGui.JGuiImage:IsRaycastLocationValid(screenPoint,eventCamera) end
--[[
	@endValue CS.System.Single
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiImage:DOFillAmount(endValue,duration) end
--[[
	@gradient CS.UnityEngine.Gradient
	@duration CS.System.Single
	@return [luaIde#CS.DG.Tweening.Sequence]
--]]
function CS.JGui.JGuiImage:DOGradientColor(gradient,duration) end

--@SuperType [luaIde#CS.JGui.JGuiMaskableGraphic]
CS.JGui.JGuiText = {}
--[[
	@return [luaIde#CS.JGui.JGuiText]
]]
function CS.JGui.JGuiText() end
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.JGui.JGuiText.FontName = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiText.AlignByGeometry = nil
--[[
	CS.UnityEngine.TextAnchor
	 Get 	 Set 
--]]
CS.JGui.JGuiText.Alignment = nil
--[[
	@RefType [luaIde#CS.UnityEngine.TextGenerator]
	 Get 
--]]
CS.JGui.JGuiText.CachedTextGenerator = nil
--[[
	@RefType [luaIde#CS.UnityEngine.TextGenerator]
	 Get 
--]]
CS.JGui.JGuiText.CachedTextGeneratorForLayout = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiText.FlexibleHeight = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiText.FlexibleWidth = nil
--[[
	CS.UnityEngine.Font
	 Get 	 Set 
--]]
CS.JGui.JGuiText.Font = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JGui.JGuiText.FontSize = nil
--[[
	CS.UnityEngine.FontStyle
	 Get 	 Set 
--]]
CS.JGui.JGuiText.FontStyle = nil
--[[
	CS.UnityEngine.HorizontalWrapMode
	 Get 	 Set 
--]]
CS.JGui.JGuiText.HorizontalOverflow = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.JGui.JGuiText.lLayoutPriority = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiText.LineSpacing = nil
--[[
	CS.UnityEngine.Texture
	 Get 
--]]
CS.JGui.JGuiText.MainTexture = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiText.MinHeight = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiText.MinWidth = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiText.PixelsPerUnit = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiText.PreferredHeight = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiText.PreferredWidth = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiText.ResizeTextForBestFit = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JGui.JGuiText.ResizeTextMaxSize = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JGui.JGuiText.ResizeTextMinSize = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiText.SupportRichText = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.JGui.JGuiText.Text = nil
--[[
	CS.UnityEngine.VerticalWrapMode
	 Get 	 Set 
--]]
CS.JGui.JGuiText.VerticalOverflow = nil
--[[
	@height CS.System.Single
--]]
function CS.JGui.JGuiText:SetEventHeight(height) end
--[[
	@isHorizontalFit CS.System.Boolean
	@isVerticalFit CS.System.Boolean
--]]
function CS.JGui.JGuiText:SetSizeFitter(isHorizontalFit,isVerticalFit) end
--[[
	@anchor CS.UnityEngine.TextAnchor
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.JGui.JGuiText:GetTextAnchorPivot(anchor) end
function CS.JGui.JGuiText:CalculateLayoutInputHorizontal() end
function CS.JGui.JGuiText:CalculateLayoutInputVertical() end
function CS.JGui.JGuiText:FontTextureChanged() end
--[[
	@extents CS.UnityEngine.Vector2
	@return [luaIde#CS.UnityEngine.TextGenerationSettings]
--]]
function CS.JGui.JGuiText:GetGenerationSettings(extents) end
--[[
	@endValue CS.System.String
	@duration CS.System.Single
	@richTextEnabled CS.System.Boolean
	@scrambleMode CS.DG.Tweening.ScrambleMode
	@scrambleChars CS.System.String
	@return [luaIde#CS.DG.Tweening.Tweener]
--]]
function CS.JGui.JGuiText:DOText(endValue,duration,richTextEnabled,scrambleMode,scrambleChars) end

--@SuperType [luaIde#CS.JGui.JGuiRect]
CS.JGui.JGuiImageText = {}
--[[
	@return [luaIde#CS.JGui.JGuiImageText]
]]
function CS.JGui.JGuiImageText() end
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.JGui.JGuiImageText.Text = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JGui.JGuiImageText.FontSize = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 	 Set 
--]]
CS.JGui.JGuiImageText.Color = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiImageText.Width = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiImageText.Height = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiImageText.LineSpace = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.JGui.JGuiImageText.UnderlineSp = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JGui.JGuiImageText.GlobalIndex = nil
--[[
	@fontSize CS.System.Int32
	@text CS.System.String
--]]
function CS.JGui.JGuiImageText:Init(fontSize,text) end
function CS.JGui.JGuiImageText:SetAllDirty() end
--[[
	@name CS.System.String
	return CS.System.Collections.Generic.List`1{{JGui.JGuiGraphic, Gui, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.JGui.JGuiImageText:Get(name) end

--@SuperType [luaIde#CS.JGui.JGuiImage]
CS.JGui.JGuiScrollbar = {}
--[[
	@return [luaIde#CS.JGui.JGuiScrollbar]
]]
function CS.JGui.JGuiScrollbar() end
--[[
	@RefType [luaIde#CS.JGui.JGuiImage]
	 Get 
--]]
CS.JGui.JGuiScrollbar.HandleWidget = nil
--[[
	@RefType [luaIde#CS.UnityEngine.UI.Scrollbar.ScrollEvent]
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollbar.OnValueChanged = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollbar.NumberOfSteps = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollbar.Size = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollbar.Value = nil
--[[
	CS.UnityEngine.UI.Scrollbar.Direction
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollbar.Direction = nil
--[[
	@direction CS.UnityEngine.UI.Scrollbar.Direction
	@includeRectLayouts CS.System.Boolean
--]]
function CS.JGui.JGuiScrollbar:SetDirection(direction,includeRectLayouts) end
function CS.JGui.JGuiScrollbar:GraphicUpdateComplete() end
function CS.JGui.JGuiScrollbar:LayoutComplete() end
--[[
	@executing CS.UnityEngine.UI.CanvasUpdate
--]]
function CS.JGui.JGuiScrollbar:Rebuild(executing) end

--@SuperType [luaIde#CS.JGui.JGuiImage]
CS.JGui.JGuiInput = {}
--[[
	@return [luaIde#CS.JGui.JGuiInput]
]]
function CS.JGui.JGuiInput() end
--[[
	@RefType [luaIde#CS.JGui.JGuiText]
	 Get 
--]]
CS.JGui.JGuiInput.TextWidget = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiText]
	 Get 
--]]
CS.JGui.JGuiInput.PlaceholderWidget = nil
--[[
	CS.UnityEngine.UI.InputField.LineType
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.LineType = nil
--[[
	CS.UnityEngine.UI.InputField.ContentType
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.ContentType = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.CharacterLimit = nil
--[[
	CS.UnityEngine.UI.InputField.OnValidateInput
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.OnValidateInput = nil
--[[
	@RefType [luaIde#CS.UnityEngine.UI.InputField.OnChangeEvent]
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.OnValueChanged = nil
--[[
	@RefType [luaIde#CS.UnityEngine.UI.InputField.SubmitEvent]
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.OnEndEdit = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.CaretWidth = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.CustomCaretColor = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.CaretColor = nil
--[[
	CS.UnityEngine.UI.InputField.InputType
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.InputType = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.CaretBlinkRate = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.ShouldHideMobileInput = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.SelectionColor = nil
--[[
	CS.UnityEngine.TouchScreenKeyboardType
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.KeyboardType = nil
--[[
	CS.System.Char
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.AsteriskChar = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.ReadOnly = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.JGui.JGuiInput.LayoutPriority = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiInput.FlexibleHeight = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiInput.PreferredHeight = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiInput.MinHeight = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiInput.FlexibleWidth = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiInput.PreferredWidth = nil
--[[
	CS.UnityEngine.UI.InputField.CharacterValidation
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.CharacterValidation = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.SelectionFocusPosition = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiInput.MinWidth = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.SelectionAnchorPosition = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.CaretPosition = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.JGui.JGuiInput.WasCanceled = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.JGui.JGuiInput.Text = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.JGui.JGuiInput.MultiLine = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.JGui.JGuiInput.IsFocused = nil
function CS.JGui.JGuiInput:ActivateInputField() end
function CS.JGui.JGuiInput:CalculateLayoutInputHorizontal() end
function CS.JGui.JGuiInput:CalculateLayoutInputVertical() end
function CS.JGui.JGuiInput:DeactivateInputField() end
function CS.JGui.JGuiInput:ForceLabelUpdate() end
function CS.JGui.JGuiInput:GraphicUpdateComplete() end
function CS.JGui.JGuiInput:LayoutComplete() end
--[[
	@shift CS.System.Boolean
--]]
function CS.JGui.JGuiInput:MoveTextEnd(shift) end
--[[
	@shift CS.System.Boolean
--]]
function CS.JGui.JGuiInput:MoveTextStart(shift) end

--@SuperType [luaIde#CS.JGui.JGuiImage]
CS.JGui.JGuiSlider = {}
--[[
	@return [luaIde#CS.JGui.JGuiSlider]
]]
function CS.JGui.JGuiSlider() end
--[[
	@RefType [luaIde#CS.JGui.JGuiImage]
	 Get 
--]]
CS.JGui.JGuiSlider.FillWidget = nil
--[[
	@RefType [luaIde#CS.UnityEngine.UI.Slider.SliderEvent]
	 Get 	 Set 
--]]
CS.JGui.JGuiSlider.OnValueChanged = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiSlider.NormalizedValue = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiSlider.Value = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiSlider.WholeNumbers = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiSlider.MaxValue = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiSlider.MinValue = nil
--[[
	CS.UnityEngine.UI.Slider.Direction
	 Get 	 Set 
--]]
CS.JGui.JGuiSlider.Direction = nil
--[[
	@RefType [luaIde#CS.UnityEngine.RectTransform]
	 Get 	 Set 
--]]
CS.JGui.JGuiSlider.HandleRect = nil
--[[
	@direction CS.UnityEngine.UI.Slider.Direction
	@includeRectLayouts CS.System.Boolean
--]]
function CS.JGui.JGuiSlider:SetDirection(direction,includeRectLayouts) end
function CS.JGui.JGuiSlider:GraphicUpdateComplete() end
function CS.JGui.JGuiSlider:LayoutComplete() end
--[[
	@executing CS.UnityEngine.UI.CanvasUpdate
--]]
function CS.JGui.JGuiSlider:Rebuild(executing) end

--@SuperType [luaIde#CS.JGui.JGuiImage]
CS.JGui.JGuiScrollView = {}
--[[
	@return [luaIde#CS.JGui.JGuiScrollView]
]]
function CS.JGui.JGuiScrollView() end
--[[
	@RefType [luaIde#CS.JGui.JGuiImage]
	 Get 
--]]
CS.JGui.JGuiScrollView.ViewportWidget = nil
--[[
	CS.UnityEngine.UI.RectMask2D
	 Get 
--]]
CS.JGui.JGuiScrollView.Mask = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiRect]
	 Get 
--]]
CS.JGui.JGuiScrollView.ContentWidget = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiScrollbar]
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollView.HorizontalScrollbarWidget = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiScrollbar]
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollView.VerticalScrollbarWidget = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollView.Elasticity = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollView.Inertia = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollView.DecelerationRate = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollView.ScrollSensitivity = nil
--[[
	CS.UnityEngine.UI.ScrollRect.ScrollbarVisibility
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollView.HorizontalScrollbarVisibility = nil
--[[
	CS.UnityEngine.UI.ScrollRect.ScrollbarVisibility
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollView.VerticalScrollbarVisibility = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollView.HorizontalScrollbarSpacing = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollView.VerticalScrollbarSpacing = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollView.Velocity = nil
--[[
	CS.UnityEngine.UI.ScrollRect.MovementType
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollView.MovementType = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollView.NormalizedPosition = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollView.HorizontalNormalizedPosition = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollView.VerticalNormalizedPosition = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiScrollView.MinWidth = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiScrollView.PreferredWidth = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiScrollView.FlexibleWidth = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiScrollView.MinHeight = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiScrollView.PreferredHeight = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.JGui.JGuiScrollView.FlexibleHeight = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.JGui.JGuiScrollView.LayoutPriority = nil
--[[
	@RefType [luaIde#CS.UnityEngine.UI.ScrollRect.ScrollRectEvent]
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollView.OnValueChanged = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollView.Vertical = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiScrollView.Horizontal = nil
function CS.JGui.JGuiScrollView:RefreshChildDragToView() end
function CS.JGui.JGuiScrollView:CalculateLayoutInputHorizontal() end
function CS.JGui.JGuiScrollView:CalculateLayoutInputVertical() end
function CS.JGui.JGuiScrollView:GraphicUpdateComplete() end
function CS.JGui.JGuiScrollView:IsActive() end
function CS.JGui.JGuiScrollView:LayoutComplete() end
--[[
	@executing CS.UnityEngine.UI.CanvasUpdate
--]]
function CS.JGui.JGuiScrollView:Rebuild(executing) end
function CS.JGui.JGuiScrollView:SetLayoutHorizontal() end
function CS.JGui.JGuiScrollView:SetLayoutVertical() end

--@SuperType [luaIde#CS.UnityEngine.MonoBehaviour]
CS.JGui.JGuiRoot = {}
--[[
	@return [luaIde#CS.JGui.JGuiRoot]
]]
function CS.JGui.JGuiRoot() end
--[[
	@RefType [luaIde#CS.JGui.JGuiRoot]
	 Get 
--]]
CS.JGui.JGuiRoot.Inst = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.JGui.JGuiRoot.StandardWidth = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.JGui.JGuiRoot.StandardHeight = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Camera]
	 Get 
--]]
CS.JGui.JGuiRoot.Camera = nil
--[[
	@RefType [luaIde#CS.UnityEngine.GameObject]
	 Get 	 Set 
--]]
CS.JGui.JGuiRoot.CachedRootObj = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiCanvas]
	 Get 
--]]
CS.JGui.JGuiRoot.RootCanvas = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiRect]
	 Get 
--]]
CS.JGui.JGuiRoot.WindowBase = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiRect]
	 Get 
--]]
CS.JGui.JGuiRoot.CachedMoudles = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiRect]
	 Get 
--]]
CS.JGui.JGuiRoot.RectWidget = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiEmpty]
	 Get 
--]]
CS.JGui.JGuiRoot.EmptyWidget = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiRadarChart]
	 Get 
--]]
CS.JGui.JGuiRoot.RadarChartWidget = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiActor]
	 Get 
--]]
CS.JGui.JGuiRoot.ActorWidget = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiCanvas]
	 Get 
--]]
CS.JGui.JGuiRoot.CanvasWidget = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiImage]
	 Get 
--]]
CS.JGui.JGuiRoot.ImageWidget = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiTexture]
	 Get 
--]]
CS.JGui.JGuiRoot.TextureWidget = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiText]
	 Get 
--]]
CS.JGui.JGuiRoot.TextWidget = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiImageText]
	 Get 
--]]
CS.JGui.JGuiRoot.ImageTextWidget = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiInput]
	 Get 
--]]
CS.JGui.JGuiRoot.InputWidget = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiScrollbar]
	 Get 
--]]
CS.JGui.JGuiRoot.ScrollbarWidget = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiSlider]
	 Get 
--]]
CS.JGui.JGuiRoot.SliderWidget = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiScrollView]
	 Get 
--]]
CS.JGui.JGuiRoot.ScrollViewWidget = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiRoot.Width = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiRoot.Height = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 
--]]
CS.JGui.JGuiRoot.Size = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JGui.JGuiRoot.DownSampleNum = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiRoot.BlurSpreadSize = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JGui.JGuiRoot.BlurIterations = nil
--[[
	@material CS.UnityEngine.Material
	@sourceTexture CS.UnityEngine.RenderTexture
--]]
function CS.JGui.JGuiRoot:BlurCameraTexture(material,sourceTexture) end
--[[
	@key CS.System.String
	@isShow CS.System.Boolean
	@needRender CS.System.Boolean
--]]
function CS.JGui.JGuiRoot:SetCameraTexure(key,isShow,needRender) end
function CS.JGui.JGuiRoot:Init() end

--@SuperType [luaIde#CS.System.Object]
CS.JGui.JGuiEvent = {}
--[[
	@return [luaIde#CS.JGui.JGuiEvent]
]]
function CS.JGui.JGuiEvent() end
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiEvent.Enabled = nil
--[[
	@handle CS.System.Action`3{{JGui.JGuiRect, Gui, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{JGui.JGuiEventData, Gui, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@widget CS.JGui.JGuiRect
	@argument CS.System.Object
	@param CS.System.Single
--]]
function CS.JGui.JGuiEvent:Set(handle,widget,argument,param) end
--[[
	@arg CS.JGui.JGuiEventData
--]]
function CS.JGui.JGuiEvent:Call(arg) end
function CS.JGui.JGuiEvent:Destroy() end
--[[
	@data CS.JGui.JGuiPressData
--]]
function CS.JGui.JGuiEvent:OnPress(data) end
--[[
	@data CS.JGui.JGuiPressData
--]]
function CS.JGui.JGuiEvent:OnClick(data) end
--[[
	@data CS.JGui.JGuiDragData
--]]
function CS.JGui.JGuiEvent:OnDrag(data) end
function CS.JGui.JGuiEvent:Update() end

--@SuperType [luaIde#CS.JGui.JGuiEvent]
CS.JGui.JGuiOnButton = {}
--[[
	@return [luaIde#CS.JGui.JGuiOnButton]
]]
function CS.JGui.JGuiOnButton() end
function CS.JGui.JGuiOnButton:Destroy() end
--[[
	@arg CS.JGui.JGuiPressData
--]]
function CS.JGui.JGuiOnButton:OnPress(arg) end
--[[
	@data CS.JGui.JGuiPressData
--]]
function CS.JGui.JGuiOnButton:OnClick(data) end

--@SuperType [luaIde#CS.JGui.JGuiEvent]
CS.JGui.JGuiOnPress = {}
--[[
	@return [luaIde#CS.JGui.JGuiOnPress]
]]
function CS.JGui.JGuiOnPress() end
--[[
	@arg CS.JGui.JGuiPressData
--]]
function CS.JGui.JGuiOnPress:OnPress(arg) end

--@SuperType [luaIde#CS.JGui.JGuiEvent]
CS.JGui.JGuiOnClick = {}
--[[
	@return [luaIde#CS.JGui.JGuiOnClick]
]]
function CS.JGui.JGuiOnClick() end
--[[
	@data CS.JGui.JGuiPressData
--]]
function CS.JGui.JGuiOnClick:OnClick(data) end

--@SuperType [luaIde#CS.JGui.JGuiEvent]
CS.JGui.JGuiOnUpdate = {}
--[[
	@return [luaIde#CS.JGui.JGuiOnUpdate]
]]
function CS.JGui.JGuiOnUpdate() end
function CS.JGui.JGuiOnUpdate:Destroy() end
function CS.JGui.JGuiOnUpdate:Update() end

--@SuperType [luaIde#CS.JGui.JGuiEvent]
CS.JGui.JGuiOnTime = {}
--[[
	@return [luaIde#CS.JGui.JGuiOnTime]
]]
function CS.JGui.JGuiOnTime() end
function CS.JGui.JGuiOnTime:Destroy() end
function CS.JGui.JGuiOnTime:Update() end

--@SuperType [luaIde#CS.JGui.JGuiEvent]
CS.JGui.JGuiOnDrag = {}
--[[
	@return [luaIde#CS.JGui.JGuiOnDrag]
]]
function CS.JGui.JGuiOnDrag() end
--[[
	@data CS.JGui.JGuiDragData
--]]
function CS.JGui.JGuiOnDrag:OnDrag(data) end

--@SuperType [luaIde#CS.System.Object]
CS.JGui.JGuiEventData = {}
--[[
	@return [luaIde#CS.JGui.JGuiEventData]
]]
function CS.JGui.JGuiEventData() end

--@SuperType [luaIde#CS.JGui.JGuiEventData]
CS.JGui.JGuiUpdateData = {}
--[[
	@deTime CS.System.Single
	@return [luaIde#CS.JGui.JGuiUpdateData]
]]
function CS.JGui.JGuiUpdateData(deTime) end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiUpdateData.deltaTime = nil

--@SuperType [luaIde#CS.JGui.JGuiEventData]
CS.JGui.JGuiDragData = {}
--[[
	@p CS.UnityEngine.Vector2
	@d CS.UnityEngine.Vector2
	@return [luaIde#CS.JGui.JGuiDragData]
]]
function CS.JGui.JGuiDragData(p,d) end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.JGui.JGuiDragData.pos = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.JGui.JGuiDragData.delta = nil

--@SuperType [luaIde#CS.UnityEngine.MonoBehaviour]
CS.JGuiMovie = {}
--[[
	@return [luaIde#CS.JGuiMovie]
]]
function CS.JGuiMovie() end
--[[
	@RefType [luaIde#CS.JGui.JGuiTexture]
	 Get 	 Set 
--]]
CS.JGuiMovie.TextureNode = nil
--[[
	CS.UnityEngine.Video.VideoPlayer
	 Get 	 Set 
--]]
CS.JGuiMovie.MoviePlayer = nil
--[[
	@RefType [luaIde#CS.UnityEngine.AudioSource]
	 Get 	 Set 
--]]
CS.JGuiMovie.AudioSource = nil
--[[
	CS.UnityEngine.Video.VideoClip
	 Get 	 Set 
--]]
CS.JGuiMovie.VideoClip = nil
--[[
	CS.System.Double
	 Get 
--]]
CS.JGuiMovie.Duration = nil
--[[
	@movieName CS.System.String
--]]
function CS.JGuiMovie:DeleteAsset(movieName) end
--[[
	@movieName CS.System.String
--]]
function CS.JGuiMovie:PrevLoad(movieName) end
--[[
	@textureNode CS.JGui.JGuiTexture
	@width CS.System.Int32
	@height CS.System.Int32
	@return [luaIde#CS.JGuiMovie]
--]]
function CS.JGuiMovie:AddMovie(textureNode,width,height) end
--[[
	@movieName CS.System.String
--]]
function CS.JGuiMovie:LoadMovie(movieName) end
function CS.JGuiMovie:Play() end
function CS.JGuiMovie:Stop() end
function CS.JGuiMovie:Pause() end

--@SuperType [luaIde#CS.UnityEngine.MonoBehaviour]
CS.JTween.JTweener = {}
--[[
	@return [luaIde#CS.JTween.JTweener]
]]
function CS.JTween.JTweener() end
--[[
	@RefType [luaIde#CS.UnityEngine.GameObject]
	 Get 
--]]
CS.JTween.JTweener.CachedObj = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Transform]
	 Get 
--]]
CS.JTween.JTweener.CachedTran = nil
--[[
	CS.JTween.JTweenerBase{}
	 Get 	 Set 
--]]
CS.JTween.JTweener.Tweeners = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.JTween.JTweener.Name = nil
--[[
	@errorInfo CS.System.String&
	return CS.System.Boolean
--]]
function CS.JTween.JTweener:IsValid(errorInfo) end
--[[
	@type CS.JTween.JTweenerType
	@return [luaIde#CS.JTween.JTweenerBase]
--]]
function CS.JTween.JTweener:GetTweenForType(type) end
--[[
	@_OnComplete CS.DG.Tweening.TweenCallback
--]]
function CS.JTween.JTweener:SetOnComplete(_OnComplete) end
function CS.JTween.JTweener:DestoryObj() end
function CS.JTween.JTweener:SetDestoryAtComplete() end
--[[
	@_OnComplete CS.DG.Tweening.TweenCallback
--]]
function CS.JTween.JTweener:SetDestoryAtComplete(_OnComplete) end
--[[
	@eventName CS.System.String
--]]
function CS.JTween.JTweener:SetDestoryAtComplete(eventName) end
--[[
	@eventName CS.System.String
	@_OnComplete CS.DG.Tweening.TweenCallback
--]]
function CS.JTween.JTweener:SetDestoryAtComplete(eventName,_OnComplete) end
--[[
	@eventName CS.System.String
	@_OnComplete CS.DG.Tweening.TweenCallback
--]]
function CS.JTween.JTweener:SetWaitEventOnComplete(eventName,_OnComplete) end
function CS.JTween.JTweener:Play() end
--[[
	@waitEventName CS.System.String
--]]
function CS.JTween.JTweener:Play(waitEventName) end
--[[
	@addDelayTime CS.System.Single
--]]
function CS.JTween.JTweener:Delay(addDelayTime) end
--[[
	@waitEventName CS.System.String
	@addDelayTime CS.System.Single
--]]
function CS.JTween.JTweener:DelayEvent(waitEventName,addDelayTime) end
--[[
	@addDelayTime CS.System.Single
--]]
function CS.JTween.JTweener:DelayAll(addDelayTime) end
--[[
	@complete CS.System.Boolean
--]]
function CS.JTween.JTweener:Restore(complete) end
--[[
	@complete CS.System.Boolean
--]]
function CS.JTween.JTweener:Init(complete) end
--[[
	@complete CS.System.Boolean
--]]
function CS.JTween.JTweener:DOKillAll(complete) end
--[[
	@waitEventName CS.System.String
	@complete CS.System.Boolean
--]]
function CS.JTween.JTweener:DOKill(waitEventName,complete) end
--[[
	@complete CS.System.Boolean
--]]
function CS.JTween.JTweener:DOKill(complete) end
function CS.JTween.JTweener:Clear() end
function CS.JTween.JTweener:ToJson() end
--[[
	@json CS.LitJson.JsonData
--]]
function CS.JTween.JTweener:JsonTo(json) end

--@SuperType [luaIde#CS.System.Object]
CS.JTween.JTweenerManager = {}
--[[
	@tweenName CS.System.String
	return CS.LitJson.JsonData
--]]
function CS.JTween.JTweenerManager:GetJTweenerJson(tweenName) end
--[[
	@type CS.JTween.JTweenerType
	@return [luaIde#CS.JTween.JTweenerBase]
--]]
function CS.JTween.JTweenerManager:Create(type) end
--[[
	@json CS.LitJson.JsonData
	@return [luaIde#CS.JTween.JTweenerBase]
--]]
function CS.JTween.JTweenerManager:Create(json) end
function CS.JTween.JTweenerManager:Clean() end
--[[
	@from CS.System.Int64
	@to CS.System.Int64
	@duration CS.System.Single
	@onUpdate CS.System.Action`1{{System.Int64, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@onFinish CS.DG.Tweening.TweenCallback
	@return [luaIde#CS.DG.Tweening.Tween]
--]]
function CS.JTween.JTweenerManager:IntTween(from,to,duration,onUpdate,onFinish) end
--[[
	@from CS.System.Double
	@to CS.System.Double
	@duration CS.System.Single
	@onUpdate CS.System.Action`1{{System.Double, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@onFinish CS.DG.Tweening.TweenCallback
	@return [luaIde#CS.DG.Tweening.Tween]
--]]
function CS.JTween.JTweenerManager:FloatTween(from,to,duration,onUpdate,onFinish) end

--@SuperType [luaIde#CS.System.Object]
CS.JTween.JTweenerBase = {}
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerBase.TweenerType = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerBase.Duration = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerBase.Delay = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JTween.JTweenerBase.IsIncr = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JTween.JTweenerBase.IsSnapping = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.JTween.JTweenerBase.WaitEvent = nil
--[[
	CS.DG.Tweening.Ease
	 Get 	 Set 
--]]
CS.JTween.JTweenerBase.AnimEase = nil
--[[
	@RefType [luaIde#CS.UnityEngine.AnimationCurve]
	 Get 	 Set 
--]]
CS.JTween.JTweenerBase.AnimCure = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JTween.JTweenerBase.LoopCount = nil
--[[
	CS.DG.Tweening.LoopType
	 Get 	 Set 
--]]
CS.JTween.JTweenerBase.LoopType = nil
--[[
	@RefType [luaIde#CS.DG.Tweening.Tween]
	 Get 
--]]
CS.JTween.JTweenerBase.LastTween = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Transform]
	 Get 
--]]
CS.JTween.JTweenerBase.Target = nil
function CS.JTween.JTweenerBase:Init() end
--[[
	@tran CS.UnityEngine.Transform
--]]
function CS.JTween.JTweenerBase:Binding(tran) end
function CS.JTween.JTweenerBase:Restore() end
--[[
	@_onComplete CS.DG.Tweening.TweenCallback
	@return [luaIde#CS.DG.Tweening.Tween]
--]]
function CS.JTween.JTweenerBase:Play(_onComplete) end
--[[
	@complete CS.System.Boolean
--]]
function CS.JTween.JTweenerBase:DOKill(complete) end
--[[
	@errorInfo CS.System.String&
	return CS.System.Boolean
--]]
function CS.JTween.JTweenerBase:IsValid(errorInfo) end
function CS.JTween.JTweenerBase:ToJson() end
--[[
	@json CS.LitJson.JsonData
--]]
function CS.JTween.JTweenerBase:JsonTo(json) end

--@SuperType [luaIde#CS.System.Enum]
CS.JTween.JTweenerType = {}
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.None = 0
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.Scale = 9
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.ScaleX = 10
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.ScaleY = 11
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.ScaleZ = 12
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.Angle = 13
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.AngleX = 14
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.AngleY = 15
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.AngleZ = 16
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.LocalAngle = 17
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.LocalAngleX = 18
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.LocalAngleY = 19
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.LocalAngleZ = 20
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.Path = 21
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.LocalPath = 22
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.AnchorPos = 23
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.AnchorPosX = 24
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.AnchorPosY = 25
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.AnchorPos3D = 26
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.AnchorMax = 27
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.AnchorMin = 28
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.Pivot = 29
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.PivotX = 30
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.PivotY = 31
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.Size = 33
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.Width = 34
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.Height = 35
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.Color = 36
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.ColorR = 37
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.ColorG = 38
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.ColorB = 39
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.Alpha = 40
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.TextNumber = 41
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.Text = 42
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.FontSize = 43
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.LineSpace = 44
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.Fill = 45
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.Gradient = 46
--[[
	CS.JTween.JTweenerType
	 Get 	 Set 
--]]
CS.JTween.JTweenerType.ShakeAnchorPos = 47

--@SuperType [luaIde#CS.UnityEngine.MonoBehaviour]
CS.JGui.JGuiFrameSprite = {}
--[[
	@return [luaIde#CS.JGui.JGuiFrameSprite]
]]
function CS.JGui.JGuiFrameSprite() end
--[[
	CS.JGui.JGuiFrameSprite.FrameSprite{}
	 Get 	 Set 
--]]
CS.JGui.JGuiFrameSprite.Sprites = nil
--[[
	@RefType [luaIde#CS.JGui.JGuiImage]
	 Get 
--]]
CS.JGui.JGuiFrameSprite.Target = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JGui.JGuiFrameSprite.IsUpdating = nil
--[[
	@sprites CS.System.String{}
	@spaceTime CS.System.Single
--]]
function CS.JGui.JGuiFrameSprite:Set(sprites,spaceTime) end

--@SuperType [luaIde#CS.System.ValueType]
CS.JGui.JGuiFrameSprite.FrameSprite = {}
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.JGui.JGuiFrameSprite.FrameSprite.spriteName = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JGui.JGuiFrameSprite.FrameSprite.time = nil

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerScale = {}
--[[
	@return [luaIde#CS.JTween.JTweenerScale]
]]
function CS.JTween.JTweenerScale() end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.JTween.JTweenerScale.ToScale = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerScale.TweenerType = nil
function CS.JTween.JTweenerScale:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerScaleZ = {}
--[[
	@return [luaIde#CS.JTween.JTweenerScaleZ]
]]
function CS.JTween.JTweenerScaleZ() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerScaleZ.ToScaleZ = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerScaleZ.TweenerType = nil
function CS.JTween.JTweenerScaleZ:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerScaleY = {}
--[[
	@return [luaIde#CS.JTween.JTweenerScaleY]
]]
function CS.JTween.JTweenerScaleY() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerScaleY.ToScaleY = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerScaleY.TweenerType = nil
function CS.JTween.JTweenerScaleY:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerAngle = {}
--[[
	@return [luaIde#CS.JTween.JTweenerAngle]
]]
function CS.JTween.JTweenerAngle() end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.JTween.JTweenerAngle.ToAngle = nil
--[[
	CS.DG.Tweening.RotateMode
	 Get 	 Set 
--]]
CS.JTween.JTweenerAngle.Mode = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerAngle.TweenerType = nil
function CS.JTween.JTweenerAngle:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerAngleX = {}
--[[
	@return [luaIde#CS.JTween.JTweenerAngleX]
]]
function CS.JTween.JTweenerAngleX() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerAngleX.ToAngleX = nil
--[[
	CS.DG.Tweening.RotateMode
	 Get 	 Set 
--]]
CS.JTween.JTweenerAngleX.Mode = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerAngleX.TweenerType = nil
function CS.JTween.JTweenerAngleX:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerAngleY = {}
--[[
	@return [luaIde#CS.JTween.JTweenerAngleY]
]]
function CS.JTween.JTweenerAngleY() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerAngleY.ToAngleY = nil
--[[
	CS.DG.Tweening.RotateMode
	 Get 	 Set 
--]]
CS.JTween.JTweenerAngleY.Mode = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerAngleY.TweenerType = nil
function CS.JTween.JTweenerAngleY:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerAngleZ = {}
--[[
	@return [luaIde#CS.JTween.JTweenerAngleZ]
]]
function CS.JTween.JTweenerAngleZ() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerAngleZ.ToAngleZ = nil
--[[
	CS.DG.Tweening.RotateMode
	 Get 	 Set 
--]]
CS.JTween.JTweenerAngleZ.Mode = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerAngleZ.TweenerType = nil
function CS.JTween.JTweenerAngleZ:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerLocalAngle = {}
--[[
	@return [luaIde#CS.JTween.JTweenerLocalAngle]
]]
function CS.JTween.JTweenerLocalAngle() end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.JTween.JTweenerLocalAngle.ToAngle = nil
--[[
	CS.DG.Tweening.RotateMode
	 Get 	 Set 
--]]
CS.JTween.JTweenerLocalAngle.Mode = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerLocalAngle.TweenerType = nil
function CS.JTween.JTweenerLocalAngle:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerLocalAngleX = {}
--[[
	@return [luaIde#CS.JTween.JTweenerLocalAngleX]
]]
function CS.JTween.JTweenerLocalAngleX() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerLocalAngleX.ToAngleX = nil
--[[
	CS.DG.Tweening.RotateMode
	 Get 	 Set 
--]]
CS.JTween.JTweenerLocalAngleX.Mode = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerLocalAngleX.TweenerType = nil
function CS.JTween.JTweenerLocalAngleX:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerLocalAngleY = {}
--[[
	@return [luaIde#CS.JTween.JTweenerLocalAngleY]
]]
function CS.JTween.JTweenerLocalAngleY() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerLocalAngleY.ToAngleY = nil
--[[
	CS.DG.Tweening.RotateMode
	 Get 	 Set 
--]]
CS.JTween.JTweenerLocalAngleY.Mode = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerLocalAngleY.TweenerType = nil
function CS.JTween.JTweenerLocalAngleY:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerLocalAngleZ = {}
--[[
	@return [luaIde#CS.JTween.JTweenerLocalAngleZ]
]]
function CS.JTween.JTweenerLocalAngleZ() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerLocalAngleZ.ToAngleZ = nil
--[[
	CS.DG.Tweening.RotateMode
	 Get 	 Set 
--]]
CS.JTween.JTweenerLocalAngleZ.Mode = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerLocalAngleZ.TweenerType = nil
function CS.JTween.JTweenerLocalAngleZ:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerPath = {}
--[[
	@return [luaIde#CS.JTween.JTweenerPath]
]]
function CS.JTween.JTweenerPath() end
--[[
	CS.UnityEngine.Vector3{}
	 Get 	 Set 
--]]
CS.JTween.JTweenerPath.ToPath = nil
--[[
	CS.DG.Tweening.PathType
	 Get 	 Set 
--]]
CS.JTween.JTweenerPath.PathType = nil
--[[
	CS.DG.Tweening.PathMode
	 Get 	 Set 
--]]
CS.JTween.JTweenerPath.PathMode = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JTween.JTweenerPath.Resolution = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerPath.TweenerType = nil
function CS.JTween.JTweenerPath:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerLocalPath = {}
--[[
	@return [luaIde#CS.JTween.JTweenerLocalPath]
]]
function CS.JTween.JTweenerLocalPath() end
--[[
	CS.UnityEngine.Vector3{}
	 Get 	 Set 
--]]
CS.JTween.JTweenerLocalPath.ToPath = nil
--[[
	CS.DG.Tweening.PathType
	 Get 	 Set 
--]]
CS.JTween.JTweenerLocalPath.PathType = nil
--[[
	CS.DG.Tweening.PathMode
	 Get 	 Set 
--]]
CS.JTween.JTweenerLocalPath.PathMode = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JTween.JTweenerLocalPath.Resolution = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerLocalPath.TweenerType = nil
function CS.JTween.JTweenerLocalPath:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerAnchorPos = {}
--[[
	@return [luaIde#CS.JTween.JTweenerAnchorPos]
]]
function CS.JTween.JTweenerAnchorPos() end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.JTween.JTweenerAnchorPos.ToPos = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerAnchorPos.TweenerType = nil
function CS.JTween.JTweenerAnchorPos:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerAnchorPosX = {}
--[[
	@return [luaIde#CS.JTween.JTweenerAnchorPosX]
]]
function CS.JTween.JTweenerAnchorPosX() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerAnchorPosX.ToPosX = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerAnchorPosX.TweenerType = nil
function CS.JTween.JTweenerAnchorPosX:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerAnchorPosY = {}
--[[
	@return [luaIde#CS.JTween.JTweenerAnchorPosY]
]]
function CS.JTween.JTweenerAnchorPosY() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerAnchorPosY.ToPosY = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerAnchorPosY.TweenerType = nil
function CS.JTween.JTweenerAnchorPosY:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerAnchorPos3D = {}
--[[
	@return [luaIde#CS.JTween.JTweenerAnchorPos3D]
]]
function CS.JTween.JTweenerAnchorPos3D() end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.JTween.JTweenerAnchorPos3D.ToPos = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerAnchorPos3D.TweenerType = nil
function CS.JTween.JTweenerAnchorPos3D:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerAnchorMax = {}
--[[
	@return [luaIde#CS.JTween.JTweenerAnchorMax]
]]
function CS.JTween.JTweenerAnchorMax() end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.JTween.JTweenerAnchorMax.ToPos = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerAnchorMax.TweenerType = nil
function CS.JTween.JTweenerAnchorMax:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerAnchorMin = {}
--[[
	@return [luaIde#CS.JTween.JTweenerAnchorMin]
]]
function CS.JTween.JTweenerAnchorMin() end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.JTween.JTweenerAnchorMin.ToPos = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerAnchorMin.TweenerType = nil
function CS.JTween.JTweenerAnchorMin:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerPivot = {}
--[[
	@return [luaIde#CS.JTween.JTweenerPivot]
]]
function CS.JTween.JTweenerPivot() end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.JTween.JTweenerPivot.ToPos = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerPivot.TweenerType = nil
function CS.JTween.JTweenerPivot:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerPivotX = {}
--[[
	@return [luaIde#CS.JTween.JTweenerPivotX]
]]
function CS.JTween.JTweenerPivotX() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerPivotX.ToPosX = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerPivotX.TweenerType = nil
function CS.JTween.JTweenerPivotX:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerPivotY = {}
--[[
	@return [luaIde#CS.JTween.JTweenerPivotY]
]]
function CS.JTween.JTweenerPivotY() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerPivotY.ToPosY = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerPivotY.TweenerType = nil
function CS.JTween.JTweenerPivotY:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerSize = {}
--[[
	@return [luaIde#CS.JTween.JTweenerSize]
]]
function CS.JTween.JTweenerSize() end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.JTween.JTweenerSize.ToSize = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerSize.TweenerType = nil
function CS.JTween.JTweenerSize:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerWidth = {}
--[[
	@return [luaIde#CS.JTween.JTweenerWidth]
]]
function CS.JTween.JTweenerWidth() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerWidth.ToWidth = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerWidth.TweenerType = nil
function CS.JTween.JTweenerWidth:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerHeight = {}
--[[
	@return [luaIde#CS.JTween.JTweenerHeight]
]]
function CS.JTween.JTweenerHeight() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerHeight.ToHeight = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerHeight.TweenerType = nil
function CS.JTween.JTweenerHeight:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerColor = {}
--[[
	@return [luaIde#CS.JTween.JTweenerColor]
]]
function CS.JTween.JTweenerColor() end
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 	 Set 
--]]
CS.JTween.JTweenerColor.ToColor = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerColor.TweenerType = nil
function CS.JTween.JTweenerColor:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerColorR = {}
--[[
	@return [luaIde#CS.JTween.JTweenerColorR]
]]
function CS.JTween.JTweenerColorR() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerColorR.ToColorR = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerColorR.TweenerType = nil
function CS.JTween.JTweenerColorR:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerColorG = {}
--[[
	@return [luaIde#CS.JTween.JTweenerColorG]
]]
function CS.JTween.JTweenerColorG() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerColorG.ToColorG = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerColorG.TweenerType = nil
function CS.JTween.JTweenerColorG:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerColorB = {}
--[[
	@return [luaIde#CS.JTween.JTweenerColorB]
]]
function CS.JTween.JTweenerColorB() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerColorB.ToColorB = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerColorB.TweenerType = nil
function CS.JTween.JTweenerColorB:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerAlpha = {}
--[[
	@return [luaIde#CS.JTween.JTweenerAlpha]
]]
function CS.JTween.JTweenerAlpha() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerAlpha.ToColorA = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerAlpha.TweenerType = nil
function CS.JTween.JTweenerAlpha:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerTextNumber = {}
--[[
	@return [luaIde#CS.JTween.JTweenerTextNumber]
]]
function CS.JTween.JTweenerTextNumber() end
--[[
	CS.System.Int64
	 Get 	 Set 
--]]
CS.JTween.JTweenerTextNumber.ToText = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerTextNumber.TweenerType = nil
function CS.JTween.JTweenerTextNumber:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerText = {}
--[[
	@return [luaIde#CS.JTween.JTweenerText]
]]
function CS.JTween.JTweenerText() end
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.JTween.JTweenerText.ToText = nil
--[[
	CS.DG.Tweening.ScrambleMode
	 Get 	 Set 
--]]
CS.JTween.JTweenerText.ScrambleMode = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.JTween.JTweenerText.ScrambleChars = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerText.TweenerType = nil
function CS.JTween.JTweenerText:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerFontSize = {}
--[[
	@return [luaIde#CS.JTween.JTweenerFontSize]
]]
function CS.JTween.JTweenerFontSize() end
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JTween.JTweenerFontSize.ToFontSize = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerFontSize.TweenerType = nil
function CS.JTween.JTweenerFontSize:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerLineSpace = {}
--[[
	@return [luaIde#CS.JTween.JTweenerLineSpace]
]]
function CS.JTween.JTweenerLineSpace() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerLineSpace.ToLineSpace = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerLineSpace.TweenerType = nil
function CS.JTween.JTweenerLineSpace:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerFill = {}
--[[
	@return [luaIde#CS.JTween.JTweenerFill]
]]
function CS.JTween.JTweenerFill() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerFill.ToFill = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerFill.TweenerType = nil
function CS.JTween.JTweenerFill:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerGradient = {}
--[[
	@return [luaIde#CS.JTween.JTweenerGradient]
]]
function CS.JTween.JTweenerGradient() end
--[[
	CS.UnityEngine.GradientColorKey{}
	 Get 	 Set 
--]]
CS.JTween.JTweenerGradient.Colors = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerGradient.TweenerType = nil
function CS.JTween.JTweenerGradient:Init() end

--@SuperType [luaIde#CS.JTween.JTweenerBase]
CS.JTween.JTweenerShakeAnchorPos = {}
--[[
	@return [luaIde#CS.JTween.JTweenerShakeAnchorPos]
]]
function CS.JTween.JTweenerShakeAnchorPos() end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.JTween.JTweenerShakeAnchorPos.Strength = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.JTween.JTweenerShakeAnchorPos.Vibrato = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.JTween.JTweenerShakeAnchorPos.Randomness = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.JTween.JTweenerShakeAnchorPos.FadeOut = nil
--[[
	CS.JTween.JTweenerType
	 Get 
--]]
CS.JTween.JTweenerShakeAnchorPos.TweenerType = nil
function CS.JTween.JTweenerShakeAnchorPos:Init() end

--@SuperType [luaIde#CS.System.Object]
CS.Net.LuaConnect = {}
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Net.LuaConnect.AutoReconnect = nil
function CS.Net.LuaConnect:Destroy() end
--[[
	@sysId CS.System.Int32
	@cmdId CS.System.Int32
	@data CS.System.Byte{}
--]]
function CS.Net.LuaConnect:Send(sysId,cmdId,data) end
--[[
	@call CS.System.Action`3{{System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{System.Byte{}, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.Net.LuaConnect:RegistDispatcher(call) end
--[[
	@serverIp CS.System.String
	@port CS.System.Int32
--]]
function CS.Net.LuaConnect:Connect(serverIp,port) end
function CS.Net.LuaConnect:Reconnect() end
function CS.Net.LuaConnect:Disconnect() end
--[[
	@eventId CS.System.Int32
	@func CS.System.Action`2{{System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	return CS.System.Int32
--]]
function CS.Net.LuaConnect:RegisterEventListener(eventId,func) end
--[[
	@id CS.System.Int32
--]]
function CS.Net.LuaConnect:UnregisterEventListener(id) end
function CS.Net.LuaConnect:Tick() end
function CS.Net.LuaConnect:RemoveAllEventListener() end
function CS.Net.LuaConnect:IsConnect() end
function CS.Net.LuaConnect:IsConnecting() end
function CS.Net.LuaConnect:IsReConnecting() end

--@SuperType [luaIde#CS.UnityEngine.MonoBehaviour]
CS.Utility.ISDKManager = {}
--[[
	@initObj CS.UnityEngine.GameObject
	@initParam CS.LitJson.JsonData
	@onInit CS.System.Action`1{{LitJson.JsonData, MLitJson, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@onInitError CS.System.Action
--]]
function CS.Utility.ISDKManager:Begin(initObj,initParam,onInit,onInitError) end
function CS.Utility.ISDKManager:IsAddSDKComponentSuccess() end
function CS.Utility.ISDKManager:Restart() end
--[[
	@callBack CS.System.Action`1{{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.Utility.ISDKManager:SetSdkCallBack(callBack) end
--[[
	@strJsonParam CS.System.String
--]]
function CS.Utility.ISDKManager:Call(strJsonParam) end

--@SuperType [luaIde#CS.UnityEngine.MonoBehaviour]
CS.Utility.HttpHelper = {}
--[[
	@return [luaIde#CS.Utility.HttpHelper]
]]
function CS.Utility.HttpHelper() end
--[[
	@session CS.Utility.HttpSession
--]]
function CS.Utility.HttpHelper:Request(session) end
--[[
	@session CS.Utility.HttpSession
--]]
function CS.Utility.HttpHelper:RequestOrderly(session) end

--@SuperType [luaIde#CS.System.Object]
CS.Utility.HttpSession = {}
--[[
	@type CS.Utility.HttpRequestType
	@url CS.System.String
	@return [luaIde#CS.Utility.HttpSession]
]]
function CS.Utility.HttpSession(type,url) end
--[[
	CS.Utility.HttpRequestType
	 Get 
--]]
CS.Utility.HttpSession.Type = nil
--[[
	@_CallBack CS.System.Action`3{{System.Boolean, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{System.Byte{}, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.Utility.HttpSession:SetCallBack(_CallBack) end
--[[
	@key CS.System.String
	@param CS.System.Object
--]]
function CS.Utility.HttpSession:AppendParam(key,param) end
--[[
	@key CS.System.String
	@param CS.System.Byte{}
--]]
function CS.Utility.HttpSession:AppendParamBytes(key,param) end
function CS.Utility.HttpSession:Dispose() end

--@SuperType [luaIde#CS.System.Enum]
CS.Utility.HttpRequestType = {}
--[[
	CS.Utility.HttpRequestType
	 Get 	 Set 
--]]
CS.Utility.HttpRequestType.None = 0
--[[
	CS.Utility.HttpRequestType
	 Get 	 Set 
--]]
CS.Utility.HttpRequestType.Get = 1
--[[
	CS.Utility.HttpRequestType
	 Get 	 Set 
--]]
CS.Utility.HttpRequestType.Post = 2

--@SuperType [luaIde#CS.System.Object]
CS.Utility.LogPoint = {}
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Utility.LogPoint.Url = nil
--[[
	@key CS.System.String
	@param CS.System.Object
--]]
function CS.Utility.LogPoint:AddSystemParam(key,param) end
--[[
	@state CS.System.Int32
	@stage CS.System.Int32
	@value CS.System.String
	@extrainfo CS.System.String
--]]
function CS.Utility.LogPoint:LogPost(state,stage,value,extrainfo) end

--@SuperType [luaIde#CS.System.Object]
CS.Speaker.VoiceChat = {}
--[[
	@RefType [luaIde#CS.Speaker.VoiceChat]
	 Get 
--]]
CS.Speaker.VoiceChat.Inst = nil
--[[
	@call CS.System.Action`2{{System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.Speaker.VoiceChat:SetVolumeShow(call) end
--[[
	@call CS.System.Action`2{{System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{System.Byte{}, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.Speaker.VoiceChat:SetRecordStopCall(call) end
--[[
	@min CS.System.Int32
	@max CS.System.Int32
--]]
function CS.Speaker.VoiceChat:SetRecordLen(min,max) end
--[[
	@frequency CS.System.Int32
--]]
function CS.Speaker.VoiceChat:SetRecordFrequency(frequency) end
--[[
	@gain CS.System.Int32
--]]
function CS.Speaker.VoiceChat:SetRecordGain(gain) end
function CS.Speaker.VoiceChat:StartRecord() end
function CS.Speaker.VoiceChat:BreakRecord() end
function CS.Speaker.VoiceChat:StopRecord() end
--[[
	@bytes CS.System.Byte{}
	@return [luaIde#CS.UnityEngine.AudioClip]
--]]
function CS.Speaker.VoiceChat:BytesToAudioClip(bytes) end

--@SuperType [luaIde#CS.System.Object]
CS.Plugin.LoadStreamingAssets = {}
--[[
	@behaviour CS.UnityEngine.MonoBehaviour
	@isBytes CS.System.Boolean
	@path CS.System.String
	@call CS.System.Action`3{{System.Boolean, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{System.Byte{}, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.Plugin.LoadStreamingAssets:Load(behaviour,isBytes,path,call) end
--[[
	@behaviour CS.UnityEngine.MonoBehaviour
	@path CS.System.String
	@width CS.System.Int32
	@height CS.System.Int32
	@call CS.System.Action`1{{UnityEngine.Sprite, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@format CS.UnityEngine.TextureFormat
	@minmap CS.System.Boolean
	@border CS.System.Nullable`1{{UnityEngine.Vector4, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.Plugin.LoadStreamingAssets:LoadSprite(behaviour,path,width,height,call,format,minmap,border) end
--[[
	@behaviour CS.UnityEngine.MonoBehaviour
	@path CS.System.String
	@width CS.System.Int32
	@height CS.System.Int32
	@call CS.System.Action`1{{UnityEngine.Sprite, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@border CS.UnityEngine.Vector4
	@format CS.UnityEngine.TextureFormat
	@minmap CS.System.Boolean
--]]
function CS.Plugin.LoadStreamingAssets:LoadSpriteWithBorder(behaviour,path,width,height,call,border,format,minmap) end
--[[
	@behaviour CS.UnityEngine.MonoBehaviour
	@path CS.System.String
	@width CS.System.Int32
	@height CS.System.Int32
	@call CS.System.Action`1{{UnityEngine.Texture2D, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@format CS.UnityEngine.TextureFormat
	@minmap CS.System.Boolean
--]]
function CS.Plugin.LoadStreamingAssets:LoadTexture2D(behaviour,path,width,height,call,format,minmap) end
--[[
	@behaviour CS.UnityEngine.MonoBehaviour
	@path CS.System.String
	@call CS.System.Action`1{{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.Plugin.LoadStreamingAssets:LoadText(behaviour,path,call) end

--@SuperType [luaIde#CS.System.Object]
CS.Plugin.StreamingAssetsMgr = {}
--[[
	CS.System.Boolean
	 Get 
--]]
CS.Plugin.StreamingAssetsMgr.IsUsedStreamingAssets = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Plugin.StreamingAssetsMgr.FILE_LIST_PATH = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Plugin.StreamingAssetsMgr.FILE_ENCRYPT_PATH = nil
--[[
	@buffer CS.System.Byte{}
	@encryptKey CS.System.Byte{}
	return CS.System.Byte{}
--]]
function CS.Plugin.StreamingAssetsMgr:Decrypt(buffer,encryptKey) end
--[[
	@buffer CS.System.Byte{}
	return CS.System.Byte{}
--]]
function CS.Plugin.StreamingAssetsMgr:Decrypt(buffer) end
--[[
	@str CS.System.String
	@encryptKey CS.System.Char{}
	return CS.System.String
--]]
function CS.Plugin.StreamingAssetsMgr:Decrypt(str,encryptKey) end
--[[
	@str CS.System.String
	return CS.System.String
--]]
function CS.Plugin.StreamingAssetsMgr:Decrypt(str) end
--[[
	@key CS.System.String
	return CS.System.String
--]]
function CS.Plugin.StreamingAssetsMgr:GetStreamingAssetPath(key) end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.Skeleton = {}
--[[
	@data CS.Spine.SkeletonData
	@return [luaIde#CS.Spine.Skeleton]
]]
function CS.Spine.Skeleton(data) end
--[[
	@RefType [luaIde#CS.Spine.SkeletonData]
	 Get 
--]]
CS.Spine.Skeleton.Data = nil
--[[
	CS.Spine.ExposedList`1{{Spine.Bone, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.Spine.Skeleton.Bones = nil
--[[
	CS.Spine.ExposedList`1{{Spine.IUpdatable, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.Spine.Skeleton.UpdateCacheList = nil
--[[
	CS.Spine.ExposedList`1{{Spine.Slot, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.Spine.Skeleton.Slots = nil
--[[
	CS.Spine.ExposedList`1{{Spine.Slot, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.Spine.Skeleton.DrawOrder = nil
--[[
	CS.Spine.ExposedList`1{{Spine.IkConstraint, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.Spine.Skeleton.IkConstraints = nil
--[[
	CS.Spine.ExposedList`1{{Spine.PathConstraint, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.Spine.Skeleton.PathConstraints = nil
--[[
	CS.Spine.ExposedList`1{{Spine.TransformConstraint, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.Spine.Skeleton.TransformConstraints = nil
--[[
	@RefType [luaIde#CS.Spine.Skin]
	 Get 	 Set 
--]]
CS.Spine.Skeleton.Skin = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Skeleton.R = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Skeleton.G = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Skeleton.B = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Skeleton.A = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Skeleton.Time = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Skeleton.X = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Skeleton.Y = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Skeleton.FlipX = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Skeleton.FlipY = nil
--[[
	@RefType [luaIde#CS.Spine.Bone]
	 Get 
--]]
CS.Spine.Skeleton.RootBone = nil
function CS.Spine.Skeleton:UpdateCache() end
function CS.Spine.Skeleton:UpdateWorldTransform() end
function CS.Spine.Skeleton:SetToSetupPose() end
function CS.Spine.Skeleton:SetBonesToSetupPose() end
function CS.Spine.Skeleton:SetSlotsToSetupPose() end
--[[
	@boneName CS.System.String
	@return [luaIde#CS.Spine.Bone]
--]]
function CS.Spine.Skeleton:FindBone(boneName) end
--[[
	@boneName CS.System.String
	return CS.System.Int32
--]]
function CS.Spine.Skeleton:FindBoneIndex(boneName) end
--[[
	@slotName CS.System.String
	@return [luaIde#CS.Spine.Slot]
--]]
function CS.Spine.Skeleton:FindSlot(slotName) end
--[[
	@slotName CS.System.String
	return CS.System.Int32
--]]
function CS.Spine.Skeleton:FindSlotIndex(slotName) end
--[[
	@skinName CS.System.String
--]]
function CS.Spine.Skeleton:SetSkin(skinName) end
--[[
	@newSkin CS.Spine.Skin
--]]
function CS.Spine.Skeleton:SetSkin(newSkin) end
--[[
	@slotName CS.System.String
	@attachmentName CS.System.String
	@return [luaIde#CS.Spine.Attachment]
--]]
function CS.Spine.Skeleton:GetAttachment(slotName,attachmentName) end
--[[
	@slotIndex CS.System.Int32
	@attachmentName CS.System.String
	@return [luaIde#CS.Spine.Attachment]
--]]
function CS.Spine.Skeleton:GetAttachment(slotIndex,attachmentName) end
--[[
	@slotName CS.System.String
	@attachmentName CS.System.String
--]]
function CS.Spine.Skeleton:SetAttachment(slotName,attachmentName) end
--[[
	@constraintName CS.System.String
	return CS.Spine.IkConstraint
--]]
function CS.Spine.Skeleton:FindIkConstraint(constraintName) end
--[[
	@constraintName CS.System.String
	@return [luaIde#CS.Spine.TransformConstraint]
--]]
function CS.Spine.Skeleton:FindTransformConstraint(constraintName) end
--[[
	@constraintName CS.System.String
	@return [luaIde#CS.Spine.PathConstraint]
--]]
function CS.Spine.Skeleton:FindPathConstraint(constraintName) end
--[[
	@delta CS.System.Single
--]]
function CS.Spine.Skeleton:Update(delta) end
--[[
	@x CS.System.Single&
	@y CS.System.Single&
	@width CS.System.Single&
	@height CS.System.Single&
	@vertexBuffer CS.System.Single{}&
--]]
function CS.Spine.Skeleton:GetBounds(x,y,width,height,vertexBuffer) end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.Animation = {}
--[[
	@name CS.System.String
	@timelines CS.Spine.ExposedList`1{{Spine.Timeline, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@duration CS.System.Single
	@return [luaIde#CS.Spine.Animation]
]]
function CS.Spine.Animation(name,timelines,duration) end
--[[
	CS.System.String
	 Get 
--]]
CS.Spine.Animation.Name = nil
--[[
	CS.Spine.ExposedList`1{{Spine.Timeline, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 	 Set 
--]]
CS.Spine.Animation.Timelines = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Animation.Duration = nil
--[[
	@skeleton CS.Spine.Skeleton
	@lastTime CS.System.Single
	@time CS.System.Single
	@loop CS.System.Boolean
	@events CS.Spine.ExposedList`1{{Spine.Event, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@alpha CS.System.Single
	@pose CS.Spine.MixPose
	@direction CS.Spine.MixDirection
--]]
function CS.Spine.Animation:Apply(skeleton,lastTime,time,loop,events,alpha,pose,direction) end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.AnimationState = {}
--[[
	@data CS.Spine.AnimationStateData
	@return [luaIde#CS.Spine.AnimationState]
]]
function CS.Spine.AnimationState(data) end
--[[
	@RefType [luaIde#CS.Spine.AnimationStateData]
	 Get 
--]]
CS.Spine.AnimationState.Data = nil
--[[
	CS.Spine.ExposedList`1{{Spine.TrackEntry, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.Spine.AnimationState.Tracks = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.AnimationState.TimeScale = nil
--[[
	@value CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.Spine.AnimationState:add_Start(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.Spine.AnimationState:remove_Start(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.Spine.AnimationState:add_Interrupt(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.Spine.AnimationState:remove_Interrupt(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.Spine.AnimationState:add_End(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.Spine.AnimationState:remove_End(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.Spine.AnimationState:add_Dispose(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.Spine.AnimationState:remove_Dispose(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.Spine.AnimationState:add_Complete(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.Spine.AnimationState:remove_Complete(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryEventDelegate
--]]
function CS.Spine.AnimationState:add_Event(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryEventDelegate
--]]
function CS.Spine.AnimationState:remove_Event(value) end
--[[
	@delta CS.System.Single
--]]
function CS.Spine.AnimationState:Update(delta) end
--[[
	@skeleton CS.Spine.Skeleton
	return CS.System.Boolean
--]]
function CS.Spine.AnimationState:Apply(skeleton) end
function CS.Spine.AnimationState:ClearTracks() end
--[[
	@trackIndex CS.System.Int32
--]]
function CS.Spine.AnimationState:ClearTrack(trackIndex) end
--[[
	@trackIndex CS.System.Int32
	@animationName CS.System.String
	@loop CS.System.Boolean
	@return [luaIde#CS.Spine.TrackEntry]
--]]
function CS.Spine.AnimationState:SetAnimation(trackIndex,animationName,loop) end
--[[
	@trackIndex CS.System.Int32
	@animation CS.Spine.Animation
	@loop CS.System.Boolean
	@return [luaIde#CS.Spine.TrackEntry]
--]]
function CS.Spine.AnimationState:SetAnimation(trackIndex,animation,loop) end
--[[
	@trackIndex CS.System.Int32
	@animationName CS.System.String
	@loop CS.System.Boolean
	@delay CS.System.Single
	@return [luaIde#CS.Spine.TrackEntry]
--]]
function CS.Spine.AnimationState:AddAnimation(trackIndex,animationName,loop,delay) end
--[[
	@trackIndex CS.System.Int32
	@animation CS.Spine.Animation
	@loop CS.System.Boolean
	@delay CS.System.Single
	@return [luaIde#CS.Spine.TrackEntry]
--]]
function CS.Spine.AnimationState:AddAnimation(trackIndex,animation,loop,delay) end
--[[
	@trackIndex CS.System.Int32
	@mixDuration CS.System.Single
	@return [luaIde#CS.Spine.TrackEntry]
--]]
function CS.Spine.AnimationState:SetEmptyAnimation(trackIndex,mixDuration) end
--[[
	@trackIndex CS.System.Int32
	@mixDuration CS.System.Single
	@delay CS.System.Single
	@return [luaIde#CS.Spine.TrackEntry]
--]]
function CS.Spine.AnimationState:AddEmptyAnimation(trackIndex,mixDuration,delay) end
--[[
	@mixDuration CS.System.Single
--]]
function CS.Spine.AnimationState:SetEmptyAnimations(mixDuration) end
--[[
	@trackIndex CS.System.Int32
	@return [luaIde#CS.Spine.TrackEntry]
--]]
function CS.Spine.AnimationState:GetCurrent(trackIndex) end
function CS.Spine.AnimationState:ToString() end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.TrackEntry = {}
--[[
	@return [luaIde#CS.Spine.TrackEntry]
]]
function CS.Spine.TrackEntry() end
--[[
	CS.System.Int32
	 Get 
--]]
CS.Spine.TrackEntry.TrackIndex = nil
--[[
	@RefType [luaIde#CS.Spine.Animation]
	 Get 
--]]
CS.Spine.TrackEntry.Animation = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.TrackEntry.Loop = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TrackEntry.Delay = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TrackEntry.TrackTime = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TrackEntry.TrackEnd = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TrackEntry.AnimationStart = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TrackEntry.AnimationEnd = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TrackEntry.AnimationLast = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.Spine.TrackEntry.AnimationTime = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TrackEntry.TimeScale = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TrackEntry.Alpha = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TrackEntry.EventThreshold = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TrackEntry.AttachmentThreshold = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TrackEntry.DrawOrderThreshold = nil
--[[
	@RefType [luaIde#CS.Spine.TrackEntry]
	 Get 
--]]
CS.Spine.TrackEntry.Next = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.Spine.TrackEntry.IsComplete = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TrackEntry.MixTime = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TrackEntry.MixDuration = nil
--[[
	@RefType [luaIde#CS.Spine.TrackEntry]
	 Get 
--]]
CS.Spine.TrackEntry.MixingFrom = nil
function CS.Spine.TrackEntry:Reset() end
--[[
	@value CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.Spine.TrackEntry:add_Start(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.Spine.TrackEntry:remove_Start(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.Spine.TrackEntry:add_Interrupt(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.Spine.TrackEntry:remove_Interrupt(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.Spine.TrackEntry:add_End(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.Spine.TrackEntry:remove_End(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.Spine.TrackEntry:add_Dispose(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.Spine.TrackEntry:remove_Dispose(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.Spine.TrackEntry:add_Complete(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryDelegate
--]]
function CS.Spine.TrackEntry:remove_Complete(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryEventDelegate
--]]
function CS.Spine.TrackEntry:add_Event(value) end
--[[
	@value CS.Spine.AnimationState.TrackEntryEventDelegate
--]]
function CS.Spine.TrackEntry:remove_Event(value) end
function CS.Spine.TrackEntry:ResetRotationDirections() end
function CS.Spine.TrackEntry:ToString() end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.AnimationStateData = {}
--[[
	@skeletonData CS.Spine.SkeletonData
	@return [luaIde#CS.Spine.AnimationStateData]
]]
function CS.Spine.AnimationStateData(skeletonData) end
--[[
	@RefType [luaIde#CS.Spine.SkeletonData]
	 Get 
--]]
CS.Spine.AnimationStateData.SkeletonData = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.AnimationStateData.DefaultMix = nil
--[[
	@fromName CS.System.String
	@toName CS.System.String
	@duration CS.System.Single
--]]
function CS.Spine.AnimationStateData:SetMix(fromName,toName,duration) end
--[[
	@from CS.Spine.Animation
	@to CS.Spine.Animation
	@duration CS.System.Single
--]]
function CS.Spine.AnimationStateData:SetMix(from,to,duration) end
--[[
	@from CS.Spine.Animation
	@to CS.Spine.Animation
	return CS.System.Single
--]]
function CS.Spine.AnimationStateData:GetMix(from,to) end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.Atlas = {}
--[[
	@reader CS.System.IO.TextReader
	@dir CS.System.String
	@textureLoader CS.Spine.TextureLoader
	@return [luaIde#CS.Spine.Atlas]
]]
function CS.Spine.Atlas(reader,dir,textureLoader) end
--[[
	@pages CS.System.Collections.Generic.List`1{{Spine.AtlasPage, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@regions CS.System.Collections.Generic.List`1{{Spine.AtlasRegion, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@return [luaIde#CS.Spine.Atlas]
]]
function CS.Spine.Atlas(pages,regions) end
function CS.Spine.Atlas:GetEnumerator() end
function CS.Spine.Atlas:FlipV() end
--[[
	@name CS.System.String
	return CS.Spine.AtlasRegion
--]]
function CS.Spine.Atlas:FindRegion(name) end
function CS.Spine.Atlas:Dispose() end

--@SuperType [luaIde#CS.System.Enum]
CS.Spine.BlendMode = {}
--[[
	CS.Spine.BlendMode
	 Get 	 Set 
--]]
CS.Spine.BlendMode.Normal = 0
--[[
	CS.Spine.BlendMode
	 Get 	 Set 
--]]
CS.Spine.BlendMode.Additive = 1
--[[
	CS.Spine.BlendMode
	 Get 	 Set 
--]]
CS.Spine.BlendMode.Multiply = 2
--[[
	CS.Spine.BlendMode
	 Get 	 Set 
--]]
CS.Spine.BlendMode.Screen = 3

--@SuperType [luaIde#CS.System.Object]
CS.Spine.Bone = {}
--[[
	@data CS.Spine.BoneData
	@skeleton CS.Spine.Skeleton
	@parent CS.Spine.Bone
	@return [luaIde#CS.Spine.Bone]
]]
function CS.Spine.Bone(data,skeleton,parent) end
--[[
	@RefType [luaIde#CS.Spine.BoneData]
	 Get 
--]]
CS.Spine.Bone.Data = nil
--[[
	@RefType [luaIde#CS.Spine.Skeleton]
	 Get 
--]]
CS.Spine.Bone.Skeleton = nil
--[[
	@RefType [luaIde#CS.Spine.Bone]
	 Get 
--]]
CS.Spine.Bone.Parent = nil
--[[
	CS.Spine.ExposedList`1{{Spine.Bone, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.Spine.Bone.Children = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Bone.X = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Bone.Y = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Bone.Rotation = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Bone.ScaleX = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Bone.ScaleY = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Bone.ShearX = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Bone.ShearY = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Bone.AppliedRotation = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Bone.AX = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Bone.AY = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Bone.AScaleX = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Bone.AScaleY = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Bone.AShearX = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Bone.AShearY = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.Spine.Bone.A = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.Spine.Bone.B = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.Spine.Bone.C = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.Spine.Bone.D = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.Spine.Bone.WorldX = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.Spine.Bone.WorldY = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.Spine.Bone.WorldRotationX = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.Spine.Bone.WorldRotationY = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.Spine.Bone.WorldScaleX = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.Spine.Bone.WorldScaleY = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.Spine.Bone.WorldToLocalRotationX = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.Spine.Bone.WorldToLocalRotationY = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Bone.yDown = nil
function CS.Spine.Bone:Update() end
function CS.Spine.Bone:UpdateWorldTransform() end
--[[
	@x CS.System.Single
	@y CS.System.Single
	@rotation CS.System.Single
	@scaleX CS.System.Single
	@scaleY CS.System.Single
	@shearX CS.System.Single
	@shearY CS.System.Single
--]]
function CS.Spine.Bone:UpdateWorldTransform(x,y,rotation,scaleX,scaleY,shearX,shearY) end
function CS.Spine.Bone:SetToSetupPose() end
--[[
	@worldX CS.System.Single
	@worldY CS.System.Single
	@localX CS.System.Single&
	@localY CS.System.Single&
--]]
function CS.Spine.Bone:WorldToLocal(worldX,worldY,localX,localY) end
--[[
	@localX CS.System.Single
	@localY CS.System.Single
	@worldX CS.System.Single&
	@worldY CS.System.Single&
--]]
function CS.Spine.Bone:LocalToWorld(localX,localY,worldX,worldY) end
--[[
	@worldRotation CS.System.Single
	return CS.System.Single
--]]
function CS.Spine.Bone:WorldToLocalRotation(worldRotation) end
--[[
	@localRotation CS.System.Single
	return CS.System.Single
--]]
function CS.Spine.Bone:LocalToWorldRotation(localRotation) end
--[[
	@degrees CS.System.Single
--]]
function CS.Spine.Bone:RotateWorld(degrees) end
function CS.Spine.Bone:ToString() end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.BoneData = {}
--[[
	@index CS.System.Int32
	@name CS.System.String
	@parent CS.Spine.BoneData
	@return [luaIde#CS.Spine.BoneData]
]]
function CS.Spine.BoneData(index,name,parent) end
--[[
	CS.System.Int32
	 Get 
--]]
CS.Spine.BoneData.Index = nil
--[[
	CS.System.String
	 Get 
--]]
CS.Spine.BoneData.Name = nil
--[[
	@RefType [luaIde#CS.Spine.BoneData]
	 Get 
--]]
CS.Spine.BoneData.Parent = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.BoneData.Length = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.BoneData.X = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.BoneData.Y = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.BoneData.Rotation = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.BoneData.ScaleX = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.BoneData.ScaleY = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.BoneData.ShearX = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.BoneData.ShearY = nil
--[[
	CS.Spine.TransformMode
	 Get 	 Set 
--]]
CS.Spine.BoneData.TransformMode = nil
function CS.Spine.BoneData:ToString() end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.Event = {}
--[[
	@time CS.System.Single
	@data CS.Spine.EventData
	@return [luaIde#CS.Spine.Event]
]]
function CS.Spine.Event(time,data) end
--[[
	@RefType [luaIde#CS.Spine.EventData]
	 Get 
--]]
CS.Spine.Event.Data = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.Spine.Event.Time = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.Event.Int = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Event.Float = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Spine.Event.String = nil
function CS.Spine.Event:ToString() end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.EventData = {}
--[[
	@name CS.System.String
	@return [luaIde#CS.Spine.EventData]
]]
function CS.Spine.EventData(name) end
--[[
	CS.System.String
	 Get 
--]]
CS.Spine.EventData.Name = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.EventData.Int = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.EventData.Float = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Spine.EventData.String = nil
function CS.Spine.EventData:ToString() end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.MathUtils = {}
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.MathUtils.PI = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.MathUtils.PI2 = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.MathUtils.RadDeg = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.MathUtils.DegRad = nil
--[[
	@radians CS.System.Single
	return CS.System.Single
--]]
function CS.Spine.MathUtils:Sin(radians) end
--[[
	@radians CS.System.Single
	return CS.System.Single
--]]
function CS.Spine.MathUtils:Cos(radians) end
--[[
	@degrees CS.System.Single
	return CS.System.Single
--]]
function CS.Spine.MathUtils:SinDeg(degrees) end
--[[
	@degrees CS.System.Single
	return CS.System.Single
--]]
function CS.Spine.MathUtils:CosDeg(degrees) end
--[[
	@y CS.System.Single
	@x CS.System.Single
	return CS.System.Single
--]]
function CS.Spine.MathUtils:Atan2(y,x) end
--[[
	@value CS.System.Single
	@min CS.System.Single
	@max CS.System.Single
	return CS.System.Single
--]]
function CS.Spine.MathUtils:Clamp(value,min,max) end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.PathConstraint = {}
--[[
	@data CS.Spine.PathConstraintData
	@skeleton CS.Spine.Skeleton
	@return [luaIde#CS.Spine.PathConstraint]
]]
function CS.Spine.PathConstraint(data,skeleton) end
--[[
	CS.System.Int32
	 Get 
--]]
CS.Spine.PathConstraint.Order = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.PathConstraint.Position = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.PathConstraint.Spacing = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.PathConstraint.RotateMix = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.PathConstraint.TranslateMix = nil
--[[
	CS.Spine.ExposedList`1{{Spine.Bone, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.Spine.PathConstraint.Bones = nil
--[[
	@RefType [luaIde#CS.Spine.Slot]
	 Get 	 Set 
--]]
CS.Spine.PathConstraint.Target = nil
--[[
	@RefType [luaIde#CS.Spine.PathConstraintData]
	 Get 
--]]
CS.Spine.PathConstraint.Data = nil
function CS.Spine.PathConstraint:Apply() end
function CS.Spine.PathConstraint:Update() end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.PathConstraintData = {}
--[[
	@name CS.System.String
	@return [luaIde#CS.Spine.PathConstraintData]
]]
function CS.Spine.PathConstraintData(name) end
--[[
	CS.System.String
	 Get 
--]]
CS.Spine.PathConstraintData.Name = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.PathConstraintData.Order = nil
--[[
	CS.Spine.ExposedList`1{{Spine.BoneData, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.Spine.PathConstraintData.Bones = nil
--[[
	@RefType [luaIde#CS.Spine.SlotData]
	 Get 	 Set 
--]]
CS.Spine.PathConstraintData.Target = nil
--[[
	CS.Spine.PositionMode
	 Get 	 Set 
--]]
CS.Spine.PathConstraintData.PositionMode = nil
--[[
	CS.Spine.SpacingMode
	 Get 	 Set 
--]]
CS.Spine.PathConstraintData.SpacingMode = nil
--[[
	CS.Spine.RotateMode
	 Get 	 Set 
--]]
CS.Spine.PathConstraintData.RotateMode = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.PathConstraintData.OffsetRotation = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.PathConstraintData.Position = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.PathConstraintData.Spacing = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.PathConstraintData.RotateMix = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.PathConstraintData.TranslateMix = nil
function CS.Spine.PathConstraintData:ToString() end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.SkeletonBinary = {}
--[[
	@atlasArray CS.Spine.Atlas{}
	@return [luaIde#CS.Spine.SkeletonBinary]
]]
function CS.Spine.SkeletonBinary(atlasArray) end
--[[
	@attachmentLoader CS.Spine.AttachmentLoader
	@return [luaIde#CS.Spine.SkeletonBinary]
]]
function CS.Spine.SkeletonBinary(attachmentLoader) end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.SkeletonBinary.Scale = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.SkeletonBinary.BONE_ROTATE = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.SkeletonBinary.BONE_TRANSLATE = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.SkeletonBinary.BONE_SCALE = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.SkeletonBinary.BONE_SHEAR = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.SkeletonBinary.SLOT_ATTACHMENT = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.SkeletonBinary.SLOT_COLOR = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.SkeletonBinary.SLOT_TWO_COLOR = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.SkeletonBinary.PATH_POSITION = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.SkeletonBinary.PATH_SPACING = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.SkeletonBinary.PATH_MIX = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.SkeletonBinary.CURVE_LINEAR = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.SkeletonBinary.CURVE_STEPPED = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.SkeletonBinary.CURVE_BEZIER = nil
--[[
	CS.Spine.TransformMode{}
	 Get 	 Set 
--]]
CS.Spine.SkeletonBinary.TransformModeValues = nil
--[[
	@path CS.System.String
	@return [luaIde#CS.Spine.SkeletonData]
--]]
function CS.Spine.SkeletonBinary:ReadSkeletonData(path) end
--[[
	@input CS.System.IO.Stream
	return CS.System.String
--]]
function CS.Spine.SkeletonBinary:GetVersionString(input) end
--[[
	@input CS.System.IO.Stream
	@return [luaIde#CS.Spine.SkeletonData]
--]]
function CS.Spine.SkeletonBinary:ReadSkeletonData(input) end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.SkeletonBounds = {}
--[[
	@return [luaIde#CS.Spine.SkeletonBounds]
]]
function CS.Spine.SkeletonBounds() end
--[[
	CS.Spine.ExposedList`1{{Spine.BoundingBoxAttachment, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 	 Set 
--]]
CS.Spine.SkeletonBounds.BoundingBoxes = nil
--[[
	CS.Spine.ExposedList`1{{Spine.Polygon, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 	 Set 
--]]
CS.Spine.SkeletonBounds.Polygons = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.SkeletonBounds.MinX = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.SkeletonBounds.MinY = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.SkeletonBounds.MaxX = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.SkeletonBounds.MaxY = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.Spine.SkeletonBounds.Width = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.Spine.SkeletonBounds.Height = nil
--[[
	@skeleton CS.Spine.Skeleton
	@updateAabb CS.System.Boolean
--]]
function CS.Spine.SkeletonBounds:Update(skeleton,updateAabb) end
--[[
	@x CS.System.Single
	@y CS.System.Single
	return CS.System.Boolean
--]]
function CS.Spine.SkeletonBounds:AabbContainsPoint(x,y) end
--[[
	@x1 CS.System.Single
	@y1 CS.System.Single
	@x2 CS.System.Single
	@y2 CS.System.Single
	return CS.System.Boolean
--]]
function CS.Spine.SkeletonBounds:AabbIntersectsSegment(x1,y1,x2,y2) end
--[[
	@bounds CS.Spine.SkeletonBounds
	return CS.System.Boolean
--]]
function CS.Spine.SkeletonBounds:AabbIntersectsSkeleton(bounds) end
--[[
	@polygon CS.Spine.Polygon
	@x CS.System.Single
	@y CS.System.Single
	return CS.System.Boolean
--]]
function CS.Spine.SkeletonBounds:ContainsPoint(polygon,x,y) end
--[[
	@x CS.System.Single
	@y CS.System.Single
	@return [luaIde#CS.Spine.BoundingBoxAttachment]
--]]
function CS.Spine.SkeletonBounds:ContainsPoint(x,y) end
--[[
	@x1 CS.System.Single
	@y1 CS.System.Single
	@x2 CS.System.Single
	@y2 CS.System.Single
	@return [luaIde#CS.Spine.BoundingBoxAttachment]
--]]
function CS.Spine.SkeletonBounds:IntersectsSegment(x1,y1,x2,y2) end
--[[
	@polygon CS.Spine.Polygon
	@x1 CS.System.Single
	@y1 CS.System.Single
	@x2 CS.System.Single
	@y2 CS.System.Single
	return CS.System.Boolean
--]]
function CS.Spine.SkeletonBounds:IntersectsSegment(polygon,x1,y1,x2,y2) end
--[[
	@attachment CS.Spine.BoundingBoxAttachment
	return CS.Spine.Polygon
--]]
function CS.Spine.SkeletonBounds:GetPolygon(attachment) end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.SkeletonClipping = {}
--[[
	@return [luaIde#CS.Spine.SkeletonClipping]
]]
function CS.Spine.SkeletonClipping() end
--[[
	CS.Spine.ExposedList`1{{System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	 Get 
--]]
CS.Spine.SkeletonClipping.ClippedVertices = nil
--[[
	CS.Spine.ExposedList`1{{System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	 Get 
--]]
CS.Spine.SkeletonClipping.ClippedTriangles = nil
--[[
	CS.Spine.ExposedList`1{{System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	 Get 
--]]
CS.Spine.SkeletonClipping.ClippedUVs = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.Spine.SkeletonClipping.IsClipping = nil
--[[
	@slot CS.Spine.Slot
	@clip CS.Spine.ClippingAttachment
	return CS.System.Int32
--]]
function CS.Spine.SkeletonClipping:ClipStart(slot,clip) end
--[[
	@slot CS.Spine.Slot
--]]
function CS.Spine.SkeletonClipping:ClipEnd(slot) end
function CS.Spine.SkeletonClipping:ClipEnd() end
--[[
	@vertices CS.System.Single{}
	@verticesLength CS.System.Int32
	@triangles CS.System.Int32{}
	@trianglesLength CS.System.Int32
	@uvs CS.System.Single{}
--]]
function CS.Spine.SkeletonClipping:ClipTriangles(vertices,verticesLength,triangles,trianglesLength,uvs) end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.SkeletonData = {}
--[[
	@return [luaIde#CS.Spine.SkeletonData]
]]
function CS.Spine.SkeletonData() end
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Spine.SkeletonData.Name = nil
--[[
	CS.Spine.ExposedList`1{{Spine.BoneData, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.Spine.SkeletonData.Bones = nil
--[[
	CS.Spine.ExposedList`1{{Spine.SlotData, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.Spine.SkeletonData.Slots = nil
--[[
	CS.Spine.ExposedList`1{{Spine.Skin, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 	 Set 
--]]
CS.Spine.SkeletonData.Skins = nil
--[[
	@RefType [luaIde#CS.Spine.Skin]
	 Get 	 Set 
--]]
CS.Spine.SkeletonData.DefaultSkin = nil
--[[
	CS.Spine.ExposedList`1{{Spine.EventData, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 	 Set 
--]]
CS.Spine.SkeletonData.Events = nil
--[[
	CS.Spine.ExposedList`1{{Spine.Animation, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 	 Set 
--]]
CS.Spine.SkeletonData.Animations = nil
--[[
	CS.Spine.ExposedList`1{{Spine.IkConstraintData, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 	 Set 
--]]
CS.Spine.SkeletonData.IkConstraints = nil
--[[
	CS.Spine.ExposedList`1{{Spine.TransformConstraintData, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 	 Set 
--]]
CS.Spine.SkeletonData.TransformConstraints = nil
--[[
	CS.Spine.ExposedList`1{{Spine.PathConstraintData, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 	 Set 
--]]
CS.Spine.SkeletonData.PathConstraints = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.SkeletonData.Width = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.SkeletonData.Height = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Spine.SkeletonData.Version = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Spine.SkeletonData.Hash = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Spine.SkeletonData.ImagesPath = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.SkeletonData.Fps = nil
--[[
	@boneName CS.System.String
	@return [luaIde#CS.Spine.BoneData]
--]]
function CS.Spine.SkeletonData:FindBone(boneName) end
--[[
	@boneName CS.System.String
	return CS.System.Int32
--]]
function CS.Spine.SkeletonData:FindBoneIndex(boneName) end
--[[
	@slotName CS.System.String
	@return [luaIde#CS.Spine.SlotData]
--]]
function CS.Spine.SkeletonData:FindSlot(slotName) end
--[[
	@slotName CS.System.String
	return CS.System.Int32
--]]
function CS.Spine.SkeletonData:FindSlotIndex(slotName) end
--[[
	@skinName CS.System.String
	@return [luaIde#CS.Spine.Skin]
--]]
function CS.Spine.SkeletonData:FindSkin(skinName) end
--[[
	@eventDataName CS.System.String
	@return [luaIde#CS.Spine.EventData]
--]]
function CS.Spine.SkeletonData:FindEvent(eventDataName) end
--[[
	@animationName CS.System.String
	@return [luaIde#CS.Spine.Animation]
--]]
function CS.Spine.SkeletonData:FindAnimation(animationName) end
--[[
	@constraintName CS.System.String
	return CS.Spine.IkConstraintData
--]]
function CS.Spine.SkeletonData:FindIkConstraint(constraintName) end
--[[
	@constraintName CS.System.String
	@return [luaIde#CS.Spine.TransformConstraintData]
--]]
function CS.Spine.SkeletonData:FindTransformConstraint(constraintName) end
--[[
	@constraintName CS.System.String
	@return [luaIde#CS.Spine.PathConstraintData]
--]]
function CS.Spine.SkeletonData:FindPathConstraint(constraintName) end
--[[
	@pathConstraintName CS.System.String
	return CS.System.Int32
--]]
function CS.Spine.SkeletonData:FindPathConstraintIndex(pathConstraintName) end
function CS.Spine.SkeletonData:ToString() end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.SkeletonJson = {}
--[[
	@atlasArray CS.Spine.Atlas{}
	@return [luaIde#CS.Spine.SkeletonJson]
]]
function CS.Spine.SkeletonJson(atlasArray) end
--[[
	@attachmentLoader CS.Spine.AttachmentLoader
	@return [luaIde#CS.Spine.SkeletonJson]
]]
function CS.Spine.SkeletonJson(attachmentLoader) end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.SkeletonJson.Scale = nil
--[[
	@path CS.System.String
	@return [luaIde#CS.Spine.SkeletonData]
--]]
function CS.Spine.SkeletonJson:ReadSkeletonData(path) end
--[[
	@reader CS.System.IO.TextReader
	@return [luaIde#CS.Spine.SkeletonData]
--]]
function CS.Spine.SkeletonJson:ReadSkeletonData(reader) end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.Skin = {}
--[[
	@name CS.System.String
	@return [luaIde#CS.Spine.Skin]
]]
function CS.Spine.Skin(name) end
--[[
	CS.System.String
	 Get 
--]]
CS.Spine.Skin.Name = nil
--[[
	CS.System.Collections.Generic.Dictionary`2{{Spine.Skin.AttachmentKeyTuple, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{Spine.Attachment, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.Spine.Skin.Attachments = nil
--[[
	@slotIndex CS.System.Int32
	@name CS.System.String
	@attachment CS.Spine.Attachment
--]]
function CS.Spine.Skin:AddAttachment(slotIndex,name,attachment) end
--[[
	@slotIndex CS.System.Int32
	@name CS.System.String
	@return [luaIde#CS.Spine.Attachment]
--]]
function CS.Spine.Skin:GetAttachment(slotIndex,name) end
--[[
	@slotIndex CS.System.Int32
	@names CS.System.Collections.Generic.List`1{{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.Spine.Skin:FindNamesForSlot(slotIndex,names) end
--[[
	@slotIndex CS.System.Int32
	@attachments CS.System.Collections.Generic.List`1{{Spine.Attachment, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.Spine.Skin:FindAttachmentsForSlot(slotIndex,attachments) end
function CS.Spine.Skin:ToString() end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.Slot = {}
--[[
	@data CS.Spine.SlotData
	@bone CS.Spine.Bone
	@return [luaIde#CS.Spine.Slot]
]]
function CS.Spine.Slot(data,bone) end
--[[
	@RefType [luaIde#CS.Spine.SlotData]
	 Get 
--]]
CS.Spine.Slot.Data = nil
--[[
	@RefType [luaIde#CS.Spine.Bone]
	 Get 
--]]
CS.Spine.Slot.Bone = nil
--[[
	@RefType [luaIde#CS.Spine.Skeleton]
	 Get 
--]]
CS.Spine.Slot.Skeleton = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Slot.R = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Slot.G = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Slot.B = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Slot.A = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Slot.R2 = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Slot.G2 = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Slot.B2 = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Slot.HasSecondColor = nil
--[[
	@RefType [luaIde#CS.Spine.Attachment]
	 Get 	 Set 
--]]
CS.Spine.Slot.Attachment = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Slot.AttachmentTime = nil
--[[
	CS.Spine.ExposedList`1{{System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	 Get 	 Set 
--]]
CS.Spine.Slot.AttachmentVertices = nil
function CS.Spine.Slot:SetToSetupPose() end
function CS.Spine.Slot:ToString() end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.SlotData = {}
--[[
	@index CS.System.Int32
	@name CS.System.String
	@boneData CS.Spine.BoneData
	@return [luaIde#CS.Spine.SlotData]
]]
function CS.Spine.SlotData(index,name,boneData) end
--[[
	CS.System.Int32
	 Get 
--]]
CS.Spine.SlotData.Index = nil
--[[
	CS.System.String
	 Get 
--]]
CS.Spine.SlotData.Name = nil
--[[
	@RefType [luaIde#CS.Spine.BoneData]
	 Get 
--]]
CS.Spine.SlotData.BoneData = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.SlotData.R = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.SlotData.G = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.SlotData.B = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.SlotData.A = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.SlotData.R2 = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.SlotData.G2 = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.SlotData.B2 = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.SlotData.HasSecondColor = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Spine.SlotData.AttachmentName = nil
--[[
	CS.Spine.BlendMode
	 Get 	 Set 
--]]
CS.Spine.SlotData.BlendMode = nil
function CS.Spine.SlotData:ToString() end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.TransformConstraint = {}
--[[
	@data CS.Spine.TransformConstraintData
	@skeleton CS.Spine.Skeleton
	@return [luaIde#CS.Spine.TransformConstraint]
]]
function CS.Spine.TransformConstraint(data,skeleton) end
--[[
	@RefType [luaIde#CS.Spine.TransformConstraintData]
	 Get 
--]]
CS.Spine.TransformConstraint.Data = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.Spine.TransformConstraint.Order = nil
--[[
	CS.Spine.ExposedList`1{{Spine.Bone, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.Spine.TransformConstraint.Bones = nil
--[[
	@RefType [luaIde#CS.Spine.Bone]
	 Get 	 Set 
--]]
CS.Spine.TransformConstraint.Target = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TransformConstraint.RotateMix = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TransformConstraint.TranslateMix = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TransformConstraint.ScaleMix = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TransformConstraint.ShearMix = nil
function CS.Spine.TransformConstraint:Apply() end
function CS.Spine.TransformConstraint:Update() end
function CS.Spine.TransformConstraint:ToString() end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.TransformConstraintData = {}
--[[
	@name CS.System.String
	@return [luaIde#CS.Spine.TransformConstraintData]
]]
function CS.Spine.TransformConstraintData(name) end
--[[
	CS.System.String
	 Get 
--]]
CS.Spine.TransformConstraintData.Name = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.TransformConstraintData.Order = nil
--[[
	CS.Spine.ExposedList`1{{Spine.BoneData, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.Spine.TransformConstraintData.Bones = nil
--[[
	@RefType [luaIde#CS.Spine.BoneData]
	 Get 	 Set 
--]]
CS.Spine.TransformConstraintData.Target = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TransformConstraintData.RotateMix = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TransformConstraintData.TranslateMix = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TransformConstraintData.ScaleMix = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TransformConstraintData.ShearMix = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TransformConstraintData.OffsetRotation = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TransformConstraintData.OffsetX = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TransformConstraintData.OffsetY = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TransformConstraintData.OffsetScaleX = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TransformConstraintData.OffsetScaleY = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.TransformConstraintData.OffsetShearY = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.TransformConstraintData.Relative = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.TransformConstraintData.Local = nil
function CS.Spine.TransformConstraintData:ToString() end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.AtlasAttachmentLoader = {}
--[[
	@atlasArray CS.Spine.Atlas{}
	@return [luaIde#CS.Spine.AtlasAttachmentLoader]
]]
function CS.Spine.AtlasAttachmentLoader(atlasArray) end
--[[
	@skin CS.Spine.Skin
	@name CS.System.String
	@path CS.System.String
	@return [luaIde#CS.Spine.RegionAttachment]
--]]
function CS.Spine.AtlasAttachmentLoader:NewRegionAttachment(skin,name,path) end
--[[
	@skin CS.Spine.Skin
	@name CS.System.String
	@path CS.System.String
	@return [luaIde#CS.Spine.MeshAttachment]
--]]
function CS.Spine.AtlasAttachmentLoader:NewMeshAttachment(skin,name,path) end
--[[
	@skin CS.Spine.Skin
	@name CS.System.String
	@return [luaIde#CS.Spine.BoundingBoxAttachment]
--]]
function CS.Spine.AtlasAttachmentLoader:NewBoundingBoxAttachment(skin,name) end
--[[
	@skin CS.Spine.Skin
	@name CS.System.String
	@return [luaIde#CS.Spine.PathAttachment]
--]]
function CS.Spine.AtlasAttachmentLoader:NewPathAttachment(skin,name) end
--[[
	@skin CS.Spine.Skin
	@name CS.System.String
	@return [luaIde#CS.Spine.PointAttachment]
--]]
function CS.Spine.AtlasAttachmentLoader:NewPointAttachment(skin,name) end
--[[
	@skin CS.Spine.Skin
	@name CS.System.String
	@return [luaIde#CS.Spine.ClippingAttachment]
--]]
function CS.Spine.AtlasAttachmentLoader:NewClippingAttachment(skin,name) end
--[[
	@name CS.System.String
	return CS.Spine.AtlasRegion
--]]
function CS.Spine.AtlasAttachmentLoader:FindRegion(name) end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.Attachment = {}
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Spine.Attachment.Name = nil
function CS.Spine.Attachment:ToString() end

CS.Spine.AttachmentLoader = {}
--[[
	@skin CS.Spine.Skin
	@name CS.System.String
	@path CS.System.String
	@return [luaIde#CS.Spine.RegionAttachment]
--]]
function CS.Spine.AttachmentLoader:NewRegionAttachment(skin,name,path) end
--[[
	@skin CS.Spine.Skin
	@name CS.System.String
	@path CS.System.String
	@return [luaIde#CS.Spine.MeshAttachment]
--]]
function CS.Spine.AttachmentLoader:NewMeshAttachment(skin,name,path) end
--[[
	@skin CS.Spine.Skin
	@name CS.System.String
	@return [luaIde#CS.Spine.BoundingBoxAttachment]
--]]
function CS.Spine.AttachmentLoader:NewBoundingBoxAttachment(skin,name) end
--[[
	@skin CS.Spine.Skin
	@name CS.System.String
	@return [luaIde#CS.Spine.PathAttachment]
--]]
function CS.Spine.AttachmentLoader:NewPathAttachment(skin,name) end
--[[
	@skin CS.Spine.Skin
	@name CS.System.String
	@return [luaIde#CS.Spine.PointAttachment]
--]]
function CS.Spine.AttachmentLoader:NewPointAttachment(skin,name) end
--[[
	@skin CS.Spine.Skin
	@name CS.System.String
	@return [luaIde#CS.Spine.ClippingAttachment]
--]]
function CS.Spine.AttachmentLoader:NewClippingAttachment(skin,name) end

--@SuperType [luaIde#CS.System.Enum]
CS.Spine.AttachmentType = {}
--[[
	CS.Spine.AttachmentType
	 Get 	 Set 
--]]
CS.Spine.AttachmentType.Region = 0
--[[
	CS.Spine.AttachmentType
	 Get 	 Set 
--]]
CS.Spine.AttachmentType.Boundingbox = 1
--[[
	CS.Spine.AttachmentType
	 Get 	 Set 
--]]
CS.Spine.AttachmentType.Mesh = 2
--[[
	CS.Spine.AttachmentType
	 Get 	 Set 
--]]
CS.Spine.AttachmentType.Linkedmesh = 3
--[[
	CS.Spine.AttachmentType
	 Get 	 Set 
--]]
CS.Spine.AttachmentType.Path = 4
--[[
	CS.Spine.AttachmentType
	 Get 	 Set 
--]]
CS.Spine.AttachmentType.Point = 5
--[[
	CS.Spine.AttachmentType
	 Get 	 Set 
--]]
CS.Spine.AttachmentType.Clipping = 6

--@SuperType [luaIde#CS.Spine.VertexAttachment]
CS.Spine.BoundingBoxAttachment = {}
--[[
	@name CS.System.String
	@return [luaIde#CS.Spine.BoundingBoxAttachment]
]]
function CS.Spine.BoundingBoxAttachment(name) end

--@SuperType [luaIde#CS.Spine.VertexAttachment]
CS.Spine.ClippingAttachment = {}
--[[
	@name CS.System.String
	@return [luaIde#CS.Spine.ClippingAttachment]
]]
function CS.Spine.ClippingAttachment(name) end
--[[
	@RefType [luaIde#CS.Spine.SlotData]
	 Get 	 Set 
--]]
CS.Spine.ClippingAttachment.EndSlot = nil

--@SuperType [luaIde#CS.Spine.VertexAttachment]
CS.Spine.MeshAttachment = {}
--[[
	@name CS.System.String
	@return [luaIde#CS.Spine.MeshAttachment]
]]
function CS.Spine.MeshAttachment(name) end
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.HullLength = nil
--[[
	CS.System.Single{}
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.RegionUVs = nil
--[[
	CS.System.Single{}
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.UVs = nil
--[[
	CS.System.Int32{}
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.Triangles = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.R = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.G = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.B = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.A = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.Path = nil
--[[
	@RefType [luaIde#CS.System.Object]
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.RendererObject = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.RegionU = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.RegionV = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.RegionU2 = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.RegionV2 = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.RegionRotate = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.RegionOffsetX = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.RegionOffsetY = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.RegionWidth = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.RegionHeight = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.RegionOriginalWidth = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.RegionOriginalHeight = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.InheritDeform = nil
--[[
	@RefType [luaIde#CS.Spine.MeshAttachment]
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.ParentMesh = nil
--[[
	CS.System.Int32{}
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.Edges = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.Width = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.MeshAttachment.Height = nil
function CS.Spine.MeshAttachment:UpdateUVs() end
--[[
	@sourceAttachment CS.Spine.VertexAttachment
	return CS.System.Boolean
--]]
function CS.Spine.MeshAttachment:ApplyDeform(sourceAttachment) end

--@SuperType [luaIde#CS.Spine.VertexAttachment]
CS.Spine.PathAttachment = {}
--[[
	@name CS.System.String
	@return [luaIde#CS.Spine.PathAttachment]
]]
function CS.Spine.PathAttachment(name) end
--[[
	CS.System.Single{}
	 Get 	 Set 
--]]
CS.Spine.PathAttachment.Lengths = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.PathAttachment.Closed = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.PathAttachment.ConstantSpeed = nil

--@SuperType [luaIde#CS.Spine.Attachment]
CS.Spine.PointAttachment = {}
--[[
	@name CS.System.String
	@return [luaIde#CS.Spine.PointAttachment]
]]
function CS.Spine.PointAttachment(name) end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.PointAttachment.X = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.PointAttachment.Y = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.PointAttachment.Rotation = nil
--[[
	@bone CS.Spine.Bone
	@ox CS.System.Single&
	@oy CS.System.Single&
--]]
function CS.Spine.PointAttachment:ComputeWorldPosition(bone,ox,oy) end
--[[
	@bone CS.Spine.Bone
	return CS.System.Single
--]]
function CS.Spine.PointAttachment:ComputeWorldRotation(bone) end

--@SuperType [luaIde#CS.Spine.Attachment]
CS.Spine.RegionAttachment = {}
--[[
	@name CS.System.String
	@return [luaIde#CS.Spine.RegionAttachment]
]]
function CS.Spine.RegionAttachment(name) end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.X = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.Y = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.Rotation = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.ScaleX = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.ScaleY = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.Width = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.Height = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.R = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.G = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.B = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.A = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.Path = nil
--[[
	@RefType [luaIde#CS.System.Object]
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.RendererObject = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.RegionOffsetX = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.RegionOffsetY = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.RegionWidth = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.RegionHeight = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.RegionOriginalWidth = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.RegionOriginalHeight = nil
--[[
	CS.System.Single{}
	 Get 
--]]
CS.Spine.RegionAttachment.Offset = nil
--[[
	CS.System.Single{}
	 Get 
--]]
CS.Spine.RegionAttachment.UVs = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.BLX = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.BLY = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.ULX = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.ULY = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.URX = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.URY = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.BRX = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.RegionAttachment.BRY = nil
function CS.Spine.RegionAttachment:UpdateOffset() end
--[[
	@u CS.System.Single
	@v CS.System.Single
	@u2 CS.System.Single
	@v2 CS.System.Single
	@rotate CS.System.Boolean
--]]
function CS.Spine.RegionAttachment:SetUVs(u,v,u2,v2,rotate) end
--[[
	@bone CS.Spine.Bone
	@worldVertices CS.System.Single{}
	@offset CS.System.Int32
	@stride CS.System.Int32
--]]
function CS.Spine.RegionAttachment:ComputeWorldVertices(bone,worldVertices,offset,stride) end

--@SuperType [luaIde#CS.Spine.Attachment]
CS.Spine.VertexAttachment = {}
--[[
	@name CS.System.String
	@return [luaIde#CS.Spine.VertexAttachment]
]]
function CS.Spine.VertexAttachment(name) end
--[[
	CS.System.Int32
	 Get 
--]]
CS.Spine.VertexAttachment.Id = nil
--[[
	CS.System.Int32{}
	 Get 	 Set 
--]]
CS.Spine.VertexAttachment.Bones = nil
--[[
	CS.System.Single{}
	 Get 	 Set 
--]]
CS.Spine.VertexAttachment.Vertices = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.VertexAttachment.WorldVerticesLength = nil
--[[
	@slot CS.Spine.Slot
	@worldVertices CS.System.Single{}
--]]
function CS.Spine.VertexAttachment:ComputeWorldVertices(slot,worldVertices) end
--[[
	@slot CS.Spine.Slot
	@start CS.System.Int32
	@count CS.System.Int32
	@worldVertices CS.System.Single{}
	@offset CS.System.Int32
	@stride CS.System.Int32
--]]
function CS.Spine.VertexAttachment:ComputeWorldVertices(slot,start,count,worldVertices,offset,stride) end
--[[
	@sourceAttachment CS.Spine.VertexAttachment
	return CS.System.Boolean
--]]
function CS.Spine.VertexAttachment:ApplyDeform(sourceAttachment) end

--@SuperType [luaIde#CS.UnityEngine.ScriptableObject]
CS.Spine.Unity.AtlasAsset = {}
--[[
	@return [luaIde#CS.Spine.Unity.AtlasAsset]
]]
function CS.Spine.Unity.AtlasAsset() end
--[[
	CS.System.Boolean
	 Get 
--]]
CS.Spine.Unity.AtlasAsset.IsLoaded = nil
--[[
	@RefType [luaIde#CS.UnityEngine.TextAsset]
	 Get 	 Set 
--]]
CS.Spine.Unity.AtlasAsset.atlasFile = nil
--[[
	CS.UnityEngine.Material{}
	 Get 	 Set 
--]]
CS.Spine.Unity.AtlasAsset.materials = nil
--[[
	@atlasText CS.UnityEngine.TextAsset
	@materials CS.UnityEngine.Material{}
	@initialize CS.System.Boolean
	@return [luaIde#CS.Spine.Unity.AtlasAsset]
--]]
function CS.Spine.Unity.AtlasAsset:CreateRuntimeInstance(atlasText,materials,initialize) end
--[[
	@atlasText CS.UnityEngine.TextAsset
	@textures CS.UnityEngine.Texture2D{}
	@materialPropertySource CS.UnityEngine.Material
	@initialize CS.System.Boolean
	@return [luaIde#CS.Spine.Unity.AtlasAsset]
--]]
function CS.Spine.Unity.AtlasAsset:CreateRuntimeInstance(atlasText,textures,materialPropertySource,initialize) end
--[[
	@atlasText CS.UnityEngine.TextAsset
	@textures CS.UnityEngine.Texture2D{}
	@shader CS.UnityEngine.Shader
	@initialize CS.System.Boolean
	@return [luaIde#CS.Spine.Unity.AtlasAsset]
--]]
function CS.Spine.Unity.AtlasAsset:CreateRuntimeInstance(atlasText,textures,shader,initialize) end
function CS.Spine.Unity.AtlasAsset:Clear() end
function CS.Spine.Unity.AtlasAsset:GetAtlas() end
--[[
	@name CS.System.String
	@mesh CS.UnityEngine.Mesh
	@material CS.UnityEngine.Material&
	@scale CS.System.Single
	@return [luaIde#CS.UnityEngine.Mesh]
--]]
function CS.Spine.Unity.AtlasAsset:GenerateMesh(name,mesh,material,scale) end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.Unity.RegionlessAttachmentLoader = {}
--[[
	@return [luaIde#CS.Spine.Unity.RegionlessAttachmentLoader]
]]
function CS.Spine.Unity.RegionlessAttachmentLoader() end
--[[
	@skin CS.Spine.Skin
	@name CS.System.String
	@path CS.System.String
	@return [luaIde#CS.Spine.RegionAttachment]
--]]
function CS.Spine.Unity.RegionlessAttachmentLoader:NewRegionAttachment(skin,name,path) end
--[[
	@skin CS.Spine.Skin
	@name CS.System.String
	@path CS.System.String
	@return [luaIde#CS.Spine.MeshAttachment]
--]]
function CS.Spine.Unity.RegionlessAttachmentLoader:NewMeshAttachment(skin,name,path) end
--[[
	@skin CS.Spine.Skin
	@name CS.System.String
	@return [luaIde#CS.Spine.BoundingBoxAttachment]
--]]
function CS.Spine.Unity.RegionlessAttachmentLoader:NewBoundingBoxAttachment(skin,name) end
--[[
	@skin CS.Spine.Skin
	@name CS.System.String
	@return [luaIde#CS.Spine.PathAttachment]
--]]
function CS.Spine.Unity.RegionlessAttachmentLoader:NewPathAttachment(skin,name) end
--[[
	@skin CS.Spine.Skin
	@name CS.System.String
	@return [luaIde#CS.Spine.PointAttachment]
--]]
function CS.Spine.Unity.RegionlessAttachmentLoader:NewPointAttachment(skin,name) end
--[[
	@skin CS.Spine.Skin
	@name CS.System.String
	@return [luaIde#CS.Spine.ClippingAttachment]
--]]
function CS.Spine.Unity.RegionlessAttachmentLoader:NewClippingAttachment(skin,name) end

--@SuperType [luaIde#CS.UnityEngine.ScriptableObject]
CS.Spine.Unity.SkeletonDataAsset = {}
--[[
	@return [luaIde#CS.Spine.Unity.SkeletonDataAsset]
]]
function CS.Spine.Unity.SkeletonDataAsset() end
--[[
	CS.System.Boolean
	 Get 
--]]
CS.Spine.Unity.SkeletonDataAsset.IsLoaded = nil
--[[
	CS.Spine.Unity.AtlasAsset{}
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonDataAsset.atlasAssets = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonDataAsset.scale = nil
--[[
	@RefType [luaIde#CS.UnityEngine.TextAsset]
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonDataAsset.skeletonJSON = nil
--[[
	CS.System.String{}
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonDataAsset.fromAnimation = nil
--[[
	CS.System.String{}
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonDataAsset.toAnimation = nil
--[[
	CS.System.Single{}
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonDataAsset.duration = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonDataAsset.defaultMix = nil
--[[
	CS.UnityEngine.RuntimeAnimatorController
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonDataAsset.controller = nil
--[[
	@skeletonDataFile CS.UnityEngine.TextAsset
	@atlasAsset CS.Spine.Unity.AtlasAsset
	@initialize CS.System.Boolean
	@scale CS.System.Single
	@return [luaIde#CS.Spine.Unity.SkeletonDataAsset]
--]]
function CS.Spine.Unity.SkeletonDataAsset:CreateRuntimeInstance(skeletonDataFile,atlasAsset,initialize,scale) end
--[[
	@skeletonDataFile CS.UnityEngine.TextAsset
	@atlasAssets CS.Spine.Unity.AtlasAsset{}
	@initialize CS.System.Boolean
	@scale CS.System.Single
	@return [luaIde#CS.Spine.Unity.SkeletonDataAsset]
--]]
function CS.Spine.Unity.SkeletonDataAsset:CreateRuntimeInstance(skeletonDataFile,atlasAssets,initialize,scale) end
function CS.Spine.Unity.SkeletonDataAsset:Clear() end
--[[
	@quiet CS.System.Boolean
	@return [luaIde#CS.Spine.SkeletonData]
--]]
function CS.Spine.Unity.SkeletonDataAsset:GetSkeletonData(quiet) end
function CS.Spine.Unity.SkeletonDataAsset:FillStateData() end
function CS.Spine.Unity.SkeletonDataAsset:GetAnimationStateData() end

--@SuperType [luaIde#CS.UnityEngine.MonoBehaviour]
CS.Spine.Unity.BoneFollower = {}
--[[
	@return [luaIde#CS.Spine.Unity.BoneFollower]
]]
function CS.Spine.Unity.BoneFollower() end
--[[
	@RefType [luaIde#CS.Spine.Unity.SkeletonRenderer]
	 Get 	 Set 
--]]
CS.Spine.Unity.BoneFollower.SkeletonRenderer = nil
--[[
	@RefType [luaIde#CS.Spine.Unity.SkeletonRenderer]
	 Get 	 Set 
--]]
CS.Spine.Unity.BoneFollower.skeletonRenderer = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Spine.Unity.BoneFollower.boneName = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.BoneFollower.followZPosition = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.BoneFollower.followBoneRotation = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.BoneFollower.followSkeletonFlip = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.BoneFollower.followLocalScale = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.BoneFollower.initializeOnAwake = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.BoneFollower.valid = nil
--[[
	@RefType [luaIde#CS.Spine.Bone]
	 Get 	 Set 
--]]
CS.Spine.Unity.BoneFollower.bone = nil
--[[
	@name CS.System.String
	return CS.System.Boolean
--]]
function CS.Spine.Unity.BoneFollower:SetBone(name) end
function CS.Spine.Unity.BoneFollower:Awake() end
--[[
	@skeletonRenderer CS.Spine.Unity.SkeletonRenderer
--]]
function CS.Spine.Unity.BoneFollower:HandleRebuildRenderer(skeletonRenderer) end
function CS.Spine.Unity.BoneFollower:Initialize() end
function CS.Spine.Unity.BoneFollower:LateUpdate() end

--@SuperType [luaIde#CS.UnityEngine.MonoBehaviour]
CS.Spine.Unity.PointFollower = {}
--[[
	@return [luaIde#CS.Spine.Unity.PointFollower]
]]
function CS.Spine.Unity.PointFollower() end
--[[
	@RefType [luaIde#CS.Spine.Unity.SkeletonRenderer]
	 Get 
--]]
CS.Spine.Unity.PointFollower.SkeletonRenderer = nil
--[[
	CS.Spine.Unity.ISkeletonComponent
	 Get 
--]]
CS.Spine.Unity.PointFollower.SkeletonComponent = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.Spine.Unity.PointFollower.IsValid = nil
--[[
	@RefType [luaIde#CS.Spine.Unity.SkeletonRenderer]
	 Get 	 Set 
--]]
CS.Spine.Unity.PointFollower.skeletonRenderer = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Spine.Unity.PointFollower.slotName = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Spine.Unity.PointFollower.pointAttachmentName = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.PointFollower.followRotation = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.PointFollower.followSkeletonFlip = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.PointFollower.followSkeletonZPosition = nil
function CS.Spine.Unity.PointFollower:Initialize() end
function CS.Spine.Unity.PointFollower:LateUpdate() end

--@SuperType [luaIde#CS.Spine.Unity.SkeletonRenderer]
CS.Spine.Unity.SkeletonAnimation = {}
--[[
	@return [luaIde#CS.Spine.Unity.SkeletonAnimation]
]]
function CS.Spine.Unity.SkeletonAnimation() end
--[[
	@RefType [luaIde#CS.Spine.AnimationState]
	 Get 
--]]
CS.Spine.Unity.SkeletonAnimation.AnimationState = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonAnimation.AnimationName = nil
--[[
	@RefType [luaIde#CS.Spine.AnimationState]
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonAnimation.state = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonAnimation.loop = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonAnimation.timeScale = nil
--[[
	@value CS.Spine.Unity.UpdateBonesDelegate
--]]
function CS.Spine.Unity.SkeletonAnimation:add_UpdateLocal(value) end
--[[
	@value CS.Spine.Unity.UpdateBonesDelegate
--]]
function CS.Spine.Unity.SkeletonAnimation:remove_UpdateLocal(value) end
--[[
	@value CS.Spine.Unity.UpdateBonesDelegate
--]]
function CS.Spine.Unity.SkeletonAnimation:add_UpdateWorld(value) end
--[[
	@value CS.Spine.Unity.UpdateBonesDelegate
--]]
function CS.Spine.Unity.SkeletonAnimation:remove_UpdateWorld(value) end
--[[
	@value CS.Spine.Unity.UpdateBonesDelegate
--]]
function CS.Spine.Unity.SkeletonAnimation:add_UpdateComplete(value) end
--[[
	@value CS.Spine.Unity.UpdateBonesDelegate
--]]
function CS.Spine.Unity.SkeletonAnimation:remove_UpdateComplete(value) end
--[[
	@gameObject CS.UnityEngine.GameObject
	@skeletonDataAsset CS.Spine.Unity.SkeletonDataAsset
	@return [luaIde#CS.Spine.Unity.SkeletonAnimation]
--]]
function CS.Spine.Unity.SkeletonAnimation:AddToGameObject(gameObject,skeletonDataAsset) end
--[[
	@skeletonDataAsset CS.Spine.Unity.SkeletonDataAsset
	@return [luaIde#CS.Spine.Unity.SkeletonAnimation]
--]]
function CS.Spine.Unity.SkeletonAnimation:NewSkeletonAnimationGameObject(skeletonDataAsset) end
function CS.Spine.Unity.SkeletonAnimation:ClearState() end
--[[
	@overwrite CS.System.Boolean
--]]
function CS.Spine.Unity.SkeletonAnimation:Initialize(overwrite) end
--[[
	@deltaTime CS.System.Single
--]]
function CS.Spine.Unity.SkeletonAnimation:Update(deltaTime) end

--@SuperType [luaIde#CS.Spine.Unity.SkeletonRenderer]
CS.Spine.Unity.SkeletonAnimator = {}
--[[
	@return [luaIde#CS.Spine.Unity.SkeletonAnimator]
]]
function CS.Spine.Unity.SkeletonAnimator() end
--[[
	CS.Spine.Unity.SkeletonAnimator.MecanimTranslator
	 Get 
--]]
CS.Spine.Unity.SkeletonAnimator.Translator = nil
--[[
	@value CS.Spine.Unity.UpdateBonesDelegate
--]]
function CS.Spine.Unity.SkeletonAnimator:add_UpdateLocal(value) end
--[[
	@value CS.Spine.Unity.UpdateBonesDelegate
--]]
function CS.Spine.Unity.SkeletonAnimator:remove_UpdateLocal(value) end
--[[
	@value CS.Spine.Unity.UpdateBonesDelegate
--]]
function CS.Spine.Unity.SkeletonAnimator:add_UpdateWorld(value) end
--[[
	@value CS.Spine.Unity.UpdateBonesDelegate
--]]
function CS.Spine.Unity.SkeletonAnimator:remove_UpdateWorld(value) end
--[[
	@value CS.Spine.Unity.UpdateBonesDelegate
--]]
function CS.Spine.Unity.SkeletonAnimator:add_UpdateComplete(value) end
--[[
	@value CS.Spine.Unity.UpdateBonesDelegate
--]]
function CS.Spine.Unity.SkeletonAnimator:remove_UpdateComplete(value) end
--[[
	@overwrite CS.System.Boolean
--]]
function CS.Spine.Unity.SkeletonAnimator:Initialize(overwrite) end
function CS.Spine.Unity.SkeletonAnimator:Update() end

--@SuperType [luaIde#CS.UnityEngine.MonoBehaviour]
CS.Spine.Unity.SkeletonRenderer = {}
--[[
	@return [luaIde#CS.Spine.Unity.SkeletonRenderer]
]]
function CS.Spine.Unity.SkeletonRenderer() end
--[[
	@RefType [luaIde#CS.Spine.Unity.SkeletonDataAsset]
	 Get 
--]]
CS.Spine.Unity.SkeletonRenderer.SkeletonDataAsset = nil
--[[
	CS.System.Collections.Generic.Dictionary`2{{UnityEngine.Material, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{UnityEngine.Material, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.Spine.Unity.SkeletonRenderer.CustomMaterialOverride = nil
--[[
	CS.System.Collections.Generic.Dictionary`2{{Spine.Slot, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null},{UnityEngine.Material, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.Spine.Unity.SkeletonRenderer.CustomSlotMaterials = nil
--[[
	@RefType [luaIde#CS.Spine.Skeleton]
	 Get 
--]]
CS.Spine.Unity.SkeletonRenderer.Skeleton = nil
--[[
	@RefType [luaIde#CS.Spine.Unity.SkeletonDataAsset]
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonRenderer.skeletonDataAsset = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonRenderer.initialSkinName = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonRenderer.initialFlipX = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonRenderer.initialFlipY = nil
--[[
	CS.System.String{}
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonRenderer.separatorSlotNames = nil
--[[
	CS.System.Collections.Generic.List`1{{Spine.Slot, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonRenderer.separatorSlots = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonRenderer.zSpacing = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonRenderer.useClipping = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonRenderer.immutableTriangles = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonRenderer.pmaVertexColors = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonRenderer.clearStateOnDisable = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonRenderer.tintBlack = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonRenderer.singleSubmesh = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonRenderer.addNormals = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonRenderer.calculateTangents = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonRenderer.logErrors = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonRenderer.disableRenderingOnOverride = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonRenderer.valid = nil
--[[
	@RefType [luaIde#CS.Spine.Skeleton]
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonRenderer.skeleton = nil
--[[
	@value CS.Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate
--]]
function CS.Spine.Unity.SkeletonRenderer:add_OnRebuild(value) end
--[[
	@value CS.Spine.Unity.SkeletonRenderer.SkeletonRendererDelegate
--]]
function CS.Spine.Unity.SkeletonRenderer:remove_OnRebuild(value) end
--[[
	@value CS.Spine.Unity.MeshGeneratorDelegate
--]]
function CS.Spine.Unity.SkeletonRenderer:add_OnPostProcessVertices(value) end
--[[
	@value CS.Spine.Unity.MeshGeneratorDelegate
--]]
function CS.Spine.Unity.SkeletonRenderer:remove_OnPostProcessVertices(value) end
--[[
	@value CS.Spine.Unity.SkeletonRenderer.InstructionDelegate
--]]
function CS.Spine.Unity.SkeletonRenderer:add_GenerateMeshOverride(value) end
--[[
	@value CS.Spine.Unity.SkeletonRenderer.InstructionDelegate
--]]
function CS.Spine.Unity.SkeletonRenderer:remove_GenerateMeshOverride(value) end
--[[
	@settings CS.Spine.Unity.MeshGenerator.Settings
--]]
function CS.Spine.Unity.SkeletonRenderer:SetMeshSettings(settings) end
function CS.Spine.Unity.SkeletonRenderer:Awake() end
function CS.Spine.Unity.SkeletonRenderer:ClearState() end
--[[
	@overwrite CS.System.Boolean
--]]
function CS.Spine.Unity.SkeletonRenderer:Initialize(overwrite) end
function CS.Spine.Unity.SkeletonRenderer:LateUpdate() end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.Unity.SpineMesh = {}
function CS.Spine.Unity.SpineMesh:NewMesh() end

--@SuperType [luaIde#CS.UnityEngine.MonoBehaviour]
CS.Spine.Unity.SkeletonUtility = {}
--[[
	@return [luaIde#CS.Spine.Unity.SkeletonUtility]
]]
function CS.Spine.Unity.SkeletonUtility() end
--[[
	@RefType [luaIde#CS.UnityEngine.Transform]
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonUtility.boneRoot = nil
--[[
	@RefType [luaIde#CS.Spine.Unity.SkeletonRenderer]
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonUtility.skeletonRenderer = nil
--[[
	CS.Spine.Unity.ISkeletonAnimation
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonUtility.skeletonAnimation = nil
--[[
	CS.System.Collections.Generic.List`1{{Spine.Unity.SkeletonUtilityBone, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonUtility.utilityBones = nil
--[[
	CS.System.Collections.Generic.List`1{{Spine.Unity.SkeletonUtilityConstraint, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonUtility.utilityConstraints = nil
--[[
	@skeleton CS.Spine.Skeleton
	@skinName CS.System.String
	@slotName CS.System.String
	@attachmentName CS.System.String
	@parent CS.UnityEngine.Transform
	@isTrigger CS.System.Boolean
	return CS.UnityEngine.PolygonCollider2D
--]]
function CS.Spine.Unity.SkeletonUtility:AddBoundingBoxGameObject(skeleton,skinName,slotName,attachmentName,parent,isTrigger) end
--[[
	@name CS.System.String
	@box CS.Spine.BoundingBoxAttachment
	@slot CS.Spine.Slot
	@parent CS.UnityEngine.Transform
	@isTrigger CS.System.Boolean
	return CS.UnityEngine.PolygonCollider2D
--]]
function CS.Spine.Unity.SkeletonUtility:AddBoundingBoxGameObject(name,box,slot,parent,isTrigger) end
--[[
	@box CS.Spine.BoundingBoxAttachment
	@slot CS.Spine.Slot
	@gameObject CS.UnityEngine.GameObject
	@isTrigger CS.System.Boolean
	@isKinematic CS.System.Boolean
	@gravityScale CS.System.Single
	return CS.UnityEngine.PolygonCollider2D
--]]
function CS.Spine.Unity.SkeletonUtility:AddBoundingBoxAsComponent(box,slot,gameObject,isTrigger,isKinematic,gravityScale) end
--[[
	@collider CS.UnityEngine.PolygonCollider2D
	@slot CS.Spine.Slot
	@box CS.Spine.BoundingBoxAttachment
--]]
function CS.Spine.Unity.SkeletonUtility:SetColliderPointsLocal(collider,slot,box) end
--[[
	@boundingBox CS.Spine.BoundingBoxAttachment
	@depth CS.System.Single
	@return [luaIde#CS.UnityEngine.Bounds]
--]]
function CS.Spine.Unity.SkeletonUtility:GetBoundingBoxBounds(boundingBox,depth) end
--[[
	@value CS.Spine.Unity.SkeletonUtility.SkeletonUtilityDelegate
--]]
function CS.Spine.Unity.SkeletonUtility:add_OnReset(value) end
--[[
	@value CS.Spine.Unity.SkeletonUtility.SkeletonUtilityDelegate
--]]
function CS.Spine.Unity.SkeletonUtility:remove_OnReset(value) end
--[[
	@bone CS.Spine.Unity.SkeletonUtilityBone
--]]
function CS.Spine.Unity.SkeletonUtility:RegisterBone(bone) end
--[[
	@bone CS.Spine.Unity.SkeletonUtilityBone
--]]
function CS.Spine.Unity.SkeletonUtility:UnregisterBone(bone) end
--[[
	@constraint CS.Spine.Unity.SkeletonUtilityConstraint
--]]
function CS.Spine.Unity.SkeletonUtility:RegisterConstraint(constraint) end
--[[
	@constraint CS.Spine.Unity.SkeletonUtilityConstraint
--]]
function CS.Spine.Unity.SkeletonUtility:UnregisterConstraint(constraint) end
function CS.Spine.Unity.SkeletonUtility:CollectBones() end
function CS.Spine.Unity.SkeletonUtility:GetBoneRoot() end
--[[
	@mode CS.Spine.Unity.SkeletonUtilityBone.Mode
	@pos CS.System.Boolean
	@rot CS.System.Boolean
	@sca CS.System.Boolean
	@return [luaIde#CS.UnityEngine.GameObject]
--]]
function CS.Spine.Unity.SkeletonUtility:SpawnRoot(mode,pos,rot,sca) end
--[[
	@mode CS.Spine.Unity.SkeletonUtilityBone.Mode
	@pos CS.System.Boolean
	@rot CS.System.Boolean
	@sca CS.System.Boolean
	@return [luaIde#CS.UnityEngine.GameObject]
--]]
function CS.Spine.Unity.SkeletonUtility:SpawnHierarchy(mode,pos,rot,sca) end
--[[
	@bone CS.Spine.Bone
	@parent CS.UnityEngine.Transform
	@mode CS.Spine.Unity.SkeletonUtilityBone.Mode
	@pos CS.System.Boolean
	@rot CS.System.Boolean
	@sca CS.System.Boolean
	@return [luaIde#CS.UnityEngine.GameObject]
--]]
function CS.Spine.Unity.SkeletonUtility:SpawnBoneRecursively(bone,parent,mode,pos,rot,sca) end
--[[
	@bone CS.Spine.Bone
	@parent CS.UnityEngine.Transform
	@mode CS.Spine.Unity.SkeletonUtilityBone.Mode
	@pos CS.System.Boolean
	@rot CS.System.Boolean
	@sca CS.System.Boolean
	@return [luaIde#CS.UnityEngine.GameObject]
--]]
function CS.Spine.Unity.SkeletonUtility:SpawnBone(bone,parent,mode,pos,rot,sca) end

--@SuperType [luaIde#CS.UnityEngine.MonoBehaviour]
CS.Spine.Unity.SkeletonUtilityBone = {}
--[[
	@return [luaIde#CS.Spine.Unity.SkeletonUtilityBone]
]]
function CS.Spine.Unity.SkeletonUtilityBone() end
--[[
	CS.System.Boolean
	 Get 
--]]
CS.Spine.Unity.SkeletonUtilityBone.IncompatibleTransformMode = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonUtilityBone.boneName = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Transform]
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonUtilityBone.parentReference = nil
--[[
	CS.Spine.Unity.SkeletonUtilityBone.Mode
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonUtilityBone.mode = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonUtilityBone.position = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonUtilityBone.rotation = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonUtilityBone.scale = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonUtilityBone.zPosition = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonUtilityBone.overrideAlpha = nil
--[[
	@RefType [luaIde#CS.Spine.Unity.SkeletonUtility]
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonUtilityBone.skeletonUtility = nil
--[[
	@RefType [luaIde#CS.Spine.Bone]
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonUtilityBone.bone = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonUtilityBone.transformLerpComplete = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonUtilityBone.valid = nil
function CS.Spine.Unity.SkeletonUtilityBone:Reset() end
--[[
	@phase CS.Spine.Unity.SkeletonUtilityBone.UpdatePhase
--]]
function CS.Spine.Unity.SkeletonUtilityBone:DoUpdate(phase) end
--[[
	@bone CS.Spine.Bone
	return CS.System.Boolean
--]]
function CS.Spine.Unity.SkeletonUtilityBone:BoneTransformModeIncompatible(bone) end
--[[
	@skinName CS.System.String
	@slotName CS.System.String
	@attachmentName CS.System.String
--]]
function CS.Spine.Unity.SkeletonUtilityBone:AddBoundingBox(skinName,slotName,attachmentName) end

--@SuperType [luaIde#CS.UnityEngine.MonoBehaviour]
CS.Spine.Unity.SkeletonUtilityConstraint = {}
function CS.Spine.Unity.SkeletonUtilityConstraint:DoUpdate() end

--@SuperType [luaIde#CS.System.Object]
CS.Spine.Unity.SkeletonExtensions = {}

--@SuperType [luaIde#CS.UnityEngine.MonoBehaviour]
CS.Spine.Unity.BoneFollowerGraphic = {}
--[[
	@return [luaIde#CS.Spine.Unity.BoneFollowerGraphic]
]]
function CS.Spine.Unity.BoneFollowerGraphic() end
--[[
	@RefType [luaIde#CS.Spine.Unity.SkeletonGraphic]
	 Get 	 Set 
--]]
CS.Spine.Unity.BoneFollowerGraphic.SkeletonGraphic = nil
--[[
	@RefType [luaIde#CS.Spine.Unity.SkeletonGraphic]
	 Get 	 Set 
--]]
CS.Spine.Unity.BoneFollowerGraphic.skeletonGraphic = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.BoneFollowerGraphic.initializeOnAwake = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Spine.Unity.BoneFollowerGraphic.boneName = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.BoneFollowerGraphic.followBoneRotation = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.BoneFollowerGraphic.followSkeletonFlip = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.BoneFollowerGraphic.followLocalScale = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.BoneFollowerGraphic.followZPosition = nil
--[[
	@RefType [luaIde#CS.Spine.Bone]
	 Get 	 Set 
--]]
CS.Spine.Unity.BoneFollowerGraphic.bone = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.BoneFollowerGraphic.valid = nil
--[[
	@name CS.System.String
	return CS.System.Boolean
--]]
function CS.Spine.Unity.BoneFollowerGraphic:SetBone(name) end
function CS.Spine.Unity.BoneFollowerGraphic:Awake() end
function CS.Spine.Unity.BoneFollowerGraphic:Initialize() end
function CS.Spine.Unity.BoneFollowerGraphic:LateUpdate() end

--@SuperType [luaIde#CS.UnityEngine.UI.MaskableGraphic]
CS.Spine.Unity.SkeletonGraphic = {}
--[[
	@return [luaIde#CS.Spine.Unity.SkeletonGraphic]
]]
function CS.Spine.Unity.SkeletonGraphic() end
--[[
	@RefType [luaIde#CS.Spine.Unity.SkeletonDataAsset]
	 Get 
--]]
CS.Spine.Unity.SkeletonGraphic.SkeletonDataAsset = nil
--[[
	CS.UnityEngine.Texture
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonGraphic.OverrideTexture = nil
--[[
	CS.UnityEngine.Texture
	 Get 
--]]
CS.Spine.Unity.SkeletonGraphic.mainTexture = nil
--[[
	@RefType [luaIde#CS.Spine.Skeleton]
	 Get 
--]]
CS.Spine.Unity.SkeletonGraphic.Skeleton = nil
--[[
	@RefType [luaIde#CS.Spine.SkeletonData]
	 Get 
--]]
CS.Spine.Unity.SkeletonGraphic.SkeletonData = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.Spine.Unity.SkeletonGraphic.IsValid = nil
--[[
	@RefType [luaIde#CS.Spine.AnimationState]
	 Get 
--]]
CS.Spine.Unity.SkeletonGraphic.AnimationState = nil
--[[
	CS.Spine.Unity.MeshGenerator
	 Get 
--]]
CS.Spine.Unity.SkeletonGraphic.MeshGenerator = nil
--[[
	@RefType [luaIde#CS.Spine.Unity.SkeletonDataAsset]
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonGraphic.skeletonDataAsset = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonGraphic.initialSkinName = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonGraphic.initialFlipX = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonGraphic.initialFlipY = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonGraphic.startingAnimation = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonGraphic.startingLoop = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonGraphic.timeScale = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonGraphic.freeze = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.SkeletonGraphic.unscaledTime = nil
--[[
	@skeletonDataAsset CS.Spine.Unity.SkeletonDataAsset
	@parent CS.UnityEngine.Transform
	@return [luaIde#CS.Spine.Unity.SkeletonGraphic]
--]]
function CS.Spine.Unity.SkeletonGraphic:NewSkeletonGraphicGameObject(skeletonDataAsset,parent) end
--[[
	@gameObject CS.UnityEngine.GameObject
	@skeletonDataAsset CS.Spine.Unity.SkeletonDataAsset
	@return [luaIde#CS.Spine.Unity.SkeletonGraphic]
--]]
function CS.Spine.Unity.SkeletonGraphic:AddSkeletonGraphicComponent(gameObject,skeletonDataAsset) end
--[[
	@update CS.UnityEngine.UI.CanvasUpdate
--]]
function CS.Spine.Unity.SkeletonGraphic:Rebuild(update) end
function CS.Spine.Unity.SkeletonGraphic:Update() end
--[[
	@deltaTime CS.System.Single
--]]
function CS.Spine.Unity.SkeletonGraphic:Update(deltaTime) end
function CS.Spine.Unity.SkeletonGraphic:LateUpdate() end
function CS.Spine.Unity.SkeletonGraphic:GetLastMesh() end
--[[
	@value CS.Spine.Unity.UpdateBonesDelegate
--]]
function CS.Spine.Unity.SkeletonGraphic:add_UpdateLocal(value) end
--[[
	@value CS.Spine.Unity.UpdateBonesDelegate
--]]
function CS.Spine.Unity.SkeletonGraphic:remove_UpdateLocal(value) end
--[[
	@value CS.Spine.Unity.UpdateBonesDelegate
--]]
function CS.Spine.Unity.SkeletonGraphic:add_UpdateWorld(value) end
--[[
	@value CS.Spine.Unity.UpdateBonesDelegate
--]]
function CS.Spine.Unity.SkeletonGraphic:remove_UpdateWorld(value) end
--[[
	@value CS.Spine.Unity.UpdateBonesDelegate
--]]
function CS.Spine.Unity.SkeletonGraphic:add_UpdateComplete(value) end
--[[
	@value CS.Spine.Unity.UpdateBonesDelegate
--]]
function CS.Spine.Unity.SkeletonGraphic:remove_UpdateComplete(value) end
--[[
	@value CS.Spine.Unity.MeshGeneratorDelegate
--]]
function CS.Spine.Unity.SkeletonGraphic:add_OnPostProcessVertices(value) end
--[[
	@value CS.Spine.Unity.MeshGeneratorDelegate
--]]
function CS.Spine.Unity.SkeletonGraphic:remove_OnPostProcessVertices(value) end
function CS.Spine.Unity.SkeletonGraphic:Clear() end
--[[
	@overwrite CS.System.Boolean
--]]
function CS.Spine.Unity.SkeletonGraphic:Initialize(overwrite) end
function CS.Spine.Unity.SkeletonGraphic:UpdateMesh() end

--@SuperType [luaIde#CS.UnityEngine.MonoBehaviour]
CS.Spine.Unity.Modules.SkeletonPartsRenderer = {}
--[[
	@return [luaIde#CS.Spine.Unity.Modules.SkeletonPartsRenderer]
]]
function CS.Spine.Unity.Modules.SkeletonPartsRenderer() end
--[[
	CS.Spine.Unity.MeshGenerator
	 Get 
--]]
CS.Spine.Unity.Modules.SkeletonPartsRenderer.MeshGenerator = nil
--[[
	CS.UnityEngine.MeshRenderer
	 Get 
--]]
CS.Spine.Unity.Modules.SkeletonPartsRenderer.MeshRenderer = nil
--[[
	CS.UnityEngine.MeshFilter
	 Get 
--]]
CS.Spine.Unity.Modules.SkeletonPartsRenderer.MeshFilter = nil
function CS.Spine.Unity.Modules.SkeletonPartsRenderer:ClearMesh() end
--[[
	@instructions CS.Spine.ExposedList`1{{Spine.Unity.SubmeshInstruction, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@startSubmesh CS.System.Int32
	@endSubmesh CS.System.Int32
--]]
function CS.Spine.Unity.Modules.SkeletonPartsRenderer:RenderParts(instructions,startSubmesh,endSubmesh) end
--[[
	@block CS.UnityEngine.MaterialPropertyBlock
--]]
function CS.Spine.Unity.Modules.SkeletonPartsRenderer:SetPropertyBlock(block) end
--[[
	@parent CS.UnityEngine.Transform
	@name CS.System.String
	@return [luaIde#CS.Spine.Unity.Modules.SkeletonPartsRenderer]
--]]
function CS.Spine.Unity.Modules.SkeletonPartsRenderer:NewPartsRendererGameObject(parent,name) end

--@SuperType [luaIde#CS.UnityEngine.MonoBehaviour]
CS.Spine.Unity.Modules.SkeletonRenderSeparator = {}
--[[
	@return [luaIde#CS.Spine.Unity.Modules.SkeletonRenderSeparator]
]]
function CS.Spine.Unity.Modules.SkeletonRenderSeparator() end
--[[
	@RefType [luaIde#CS.Spine.Unity.SkeletonRenderer]
	 Get 	 Set 
--]]
CS.Spine.Unity.Modules.SkeletonRenderSeparator.SkeletonRenderer = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.Spine.Unity.Modules.SkeletonRenderSeparator.DefaultSortingOrderIncrement = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.Modules.SkeletonRenderSeparator.copyPropertyBlock = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.Spine.Unity.Modules.SkeletonRenderSeparator.copyMeshRendererFlags = nil
--[[
	CS.System.Collections.Generic.List`1{{Spine.Unity.Modules.SkeletonPartsRenderer, IPlugin, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 	 Set 
--]]
CS.Spine.Unity.Modules.SkeletonRenderSeparator.partsRenderers = nil
--[[
	@skeletonRenderer CS.Spine.Unity.SkeletonRenderer
	@sortingLayerID CS.System.Int32
	@extraPartsRenderers CS.System.Int32
	@sortingOrderIncrement CS.System.Int32
	@baseSortingOrder CS.System.Int32
	@addMinimumPartsRenderers CS.System.Boolean
	@return [luaIde#CS.Spine.Unity.Modules.SkeletonRenderSeparator]
--]]
function CS.Spine.Unity.Modules.SkeletonRenderSeparator:AddToSkeletonRenderer(skeletonRenderer,sortingLayerID,extraPartsRenderers,sortingOrderIncrement,baseSortingOrder,addMinimumPartsRenderers) end
--[[
	@sortingOrderIncrement CS.System.Int32
--]]
function CS.Spine.Unity.Modules.SkeletonRenderSeparator:AddPartsRenderer(sortingOrderIncrement) end

CS.System.Object = {}
--[[
	@return [luaIde#CS.System.Object]
]]
function CS.System.Object() end
--[[
	@obj CS.System.Object
	return CS.System.Boolean
--]]
function CS.System.Object:Equals(obj) end
--[[
	@objA CS.System.Object
	@objB CS.System.Object
	return CS.System.Boolean
--]]
function CS.System.Object:Equals(objA,objB) end
function CS.System.Object:GetHashCode() end
function CS.System.Object:GetType() end
function CS.System.Object:ToString() end
--[[
	@objA CS.System.Object
	@objB CS.System.Object
	return CS.System.Boolean
--]]
function CS.System.Object:ReferenceEquals(objA,objB) end

--@SuperType [luaIde#CS.System.Object]
CS.UnityEngine.Object = {}
--[[
	@return [luaIde#CS.UnityEngine.Object]
]]
function CS.UnityEngine.Object() end
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.UnityEngine.Object.name = nil
--[[
	CS.UnityEngine.HideFlags
	 Get 	 Set 
--]]
CS.UnityEngine.Object.hideFlags = nil
--[[
	@obj CS.UnityEngine.Object
	@t CS.System.Single
--]]
function CS.UnityEngine.Object:Destroy(obj,t) end
--[[
	@obj CS.UnityEngine.Object
--]]
function CS.UnityEngine.Object:Destroy(obj) end
--[[
	@obj CS.UnityEngine.Object
	@allowDestroyingAssets CS.System.Boolean
--]]
function CS.UnityEngine.Object:DestroyImmediate(obj,allowDestroyingAssets) end
--[[
	@obj CS.UnityEngine.Object
--]]
function CS.UnityEngine.Object:DestroyImmediate(obj) end
--[[
	@type CS.System.Type
	return CS.UnityEngine.Object{}
--]]
function CS.UnityEngine.Object:FindObjectsOfType(type) end
--[[
	@target CS.UnityEngine.Object
--]]
function CS.UnityEngine.Object:DontDestroyOnLoad(target) end
--[[
	@obj CS.UnityEngine.Object
	@t CS.System.Single
--]]
function CS.UnityEngine.Object:DestroyObject(obj,t) end
--[[
	@obj CS.UnityEngine.Object
--]]
function CS.UnityEngine.Object:DestroyObject(obj) end
--[[
	@type CS.System.Type
	return CS.UnityEngine.Object{}
--]]
function CS.UnityEngine.Object:FindSceneObjectsOfType(type) end
--[[
	@type CS.System.Type
	return CS.UnityEngine.Object{}
--]]
function CS.UnityEngine.Object:FindObjectsOfTypeIncludingAssets(type) end
--[[
	@type CS.System.Type
	return CS.UnityEngine.Object{}
--]]
function CS.UnityEngine.Object:FindObjectsOfTypeAll(type) end
function CS.UnityEngine.Object:ToString() end
function CS.UnityEngine.Object:GetInstanceID() end
function CS.UnityEngine.Object:GetHashCode() end
--[[
	@other CS.System.Object
	return CS.System.Boolean
--]]
function CS.UnityEngine.Object:Equals(other) end
--[[
	@exists CS.UnityEngine.Object
	return CS.System.Boolean
--]]
function CS.UnityEngine.Object:op_Implicit(exists) end
--[[
	@original CS.UnityEngine.Object
	@position CS.UnityEngine.Vector3
	@rotation CS.UnityEngine.Quaternion
	@return [luaIde#CS.UnityEngine.Object]
--]]
function CS.UnityEngine.Object:Instantiate(original,position,rotation) end
--[[
	@original CS.UnityEngine.Object
	@position CS.UnityEngine.Vector3
	@rotation CS.UnityEngine.Quaternion
	@parent CS.UnityEngine.Transform
	@return [luaIde#CS.UnityEngine.Object]
--]]
function CS.UnityEngine.Object:Instantiate(original,position,rotation,parent) end
--[[
	@original CS.UnityEngine.Object
	@return [luaIde#CS.UnityEngine.Object]
--]]
function CS.UnityEngine.Object:Instantiate(original) end
--[[
	@original CS.UnityEngine.Object
	@parent CS.UnityEngine.Transform
	@return [luaIde#CS.UnityEngine.Object]
--]]
function CS.UnityEngine.Object:Instantiate(original,parent) end
--[[
	@original CS.UnityEngine.Object
	@parent CS.UnityEngine.Transform
	@instantiateInWorldSpace CS.System.Boolean
	@return [luaIde#CS.UnityEngine.Object]
--]]
function CS.UnityEngine.Object:Instantiate(original,parent,instantiateInWorldSpace) end
--[[
	@type CS.System.Type
	@return [luaIde#CS.UnityEngine.Object]
--]]
function CS.UnityEngine.Object:FindObjectOfType(type) end
--[[
	@x CS.UnityEngine.Object
	@y CS.UnityEngine.Object
	return CS.System.Boolean
--]]
function CS.UnityEngine.Object:op_Equality(x,y) end
--[[
	@x CS.UnityEngine.Object
	@y CS.UnityEngine.Object
	return CS.System.Boolean
--]]
function CS.UnityEngine.Object:op_Inequality(x,y) end

--@SuperType [luaIde#CS.System.ValueType]
CS.UnityEngine.Vector2 = {}
--[[
	@x CS.System.Single
	@y CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector2]
]]
function CS.UnityEngine.Vector2(x,y) end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 
--]]
CS.UnityEngine.Vector2.normalized = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.Vector2.magnitude = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.Vector2.sqrMagnitude = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 
--]]
CS.UnityEngine.Vector2.zero = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 
--]]
CS.UnityEngine.Vector2.one = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 
--]]
CS.UnityEngine.Vector2.up = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 
--]]
CS.UnityEngine.Vector2.down = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 
--]]
CS.UnityEngine.Vector2.left = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 
--]]
CS.UnityEngine.Vector2.right = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Vector2.x = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Vector2.y = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Vector2.kEpsilon = nil
--[[
	@newX CS.System.Single
	@newY CS.System.Single
--]]
function CS.UnityEngine.Vector2:Set(newX,newY) end
--[[
	@a CS.UnityEngine.Vector2
	@b CS.UnityEngine.Vector2
	@t CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Vector2:Lerp(a,b,t) end
--[[
	@a CS.UnityEngine.Vector2
	@b CS.UnityEngine.Vector2
	@t CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Vector2:LerpUnclamped(a,b,t) end
--[[
	@current CS.UnityEngine.Vector2
	@target CS.UnityEngine.Vector2
	@maxDistanceDelta CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Vector2:MoveTowards(current,target,maxDistanceDelta) end
--[[
	@a CS.UnityEngine.Vector2
	@b CS.UnityEngine.Vector2
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Vector2:Scale(a,b) end
--[[
	@scale CS.UnityEngine.Vector2
--]]
function CS.UnityEngine.Vector2:Scale(scale) end
function CS.UnityEngine.Vector2:Normalize() end
function CS.UnityEngine.Vector2:ToString() end
--[[
	@format CS.System.String
	return CS.System.String
--]]
function CS.UnityEngine.Vector2:ToString(format) end
function CS.UnityEngine.Vector2:GetHashCode() end
--[[
	@other CS.System.Object
	return CS.System.Boolean
--]]
function CS.UnityEngine.Vector2:Equals(other) end
--[[
	@inDirection CS.UnityEngine.Vector2
	@inNormal CS.UnityEngine.Vector2
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Vector2:Reflect(inDirection,inNormal) end
--[[
	@lhs CS.UnityEngine.Vector2
	@rhs CS.UnityEngine.Vector2
	return CS.System.Single
--]]
function CS.UnityEngine.Vector2:Dot(lhs,rhs) end
--[[
	@from CS.UnityEngine.Vector2
	@to CS.UnityEngine.Vector2
	return CS.System.Single
--]]
function CS.UnityEngine.Vector2:Angle(from,to) end
--[[
	@a CS.UnityEngine.Vector2
	@b CS.UnityEngine.Vector2
	return CS.System.Single
--]]
function CS.UnityEngine.Vector2:Distance(a,b) end
--[[
	@vector CS.UnityEngine.Vector2
	@maxLength CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Vector2:ClampMagnitude(vector,maxLength) end
--[[
	@a CS.UnityEngine.Vector2
	return CS.System.Single
--]]
function CS.UnityEngine.Vector2:SqrMagnitude(a) end
function CS.UnityEngine.Vector2:SqrMagnitude() end
--[[
	@lhs CS.UnityEngine.Vector2
	@rhs CS.UnityEngine.Vector2
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Vector2:Min(lhs,rhs) end
--[[
	@lhs CS.UnityEngine.Vector2
	@rhs CS.UnityEngine.Vector2
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Vector2:Max(lhs,rhs) end
--[[
	@current CS.UnityEngine.Vector2
	@target CS.UnityEngine.Vector2
	@currentVelocity CS.UnityEngine.Vector2&
	@smoothTime CS.System.Single
	@maxSpeed CS.System.Single
	@deltaTime CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Vector2:SmoothDamp(current,target,currentVelocity,smoothTime,maxSpeed,deltaTime) end
--[[
	@a CS.UnityEngine.Vector2
	@b CS.UnityEngine.Vector2
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Vector2:op_Addition(a,b) end
--[[
	@a CS.UnityEngine.Vector2
	@b CS.UnityEngine.Vector2
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Vector2:op_Subtraction(a,b) end
--[[
	@a CS.UnityEngine.Vector2
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Vector2:op_UnaryNegation(a) end
--[[
	@a CS.UnityEngine.Vector2
	@d CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Vector2:op_Multiply(a,d) end
--[[
	@d CS.System.Single
	@a CS.UnityEngine.Vector2
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Vector2:op_Multiply(d,a) end
--[[
	@a CS.UnityEngine.Vector2
	@d CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Vector2:op_Division(a,d) end
--[[
	@lhs CS.UnityEngine.Vector2
	@rhs CS.UnityEngine.Vector2
	return CS.System.Boolean
--]]
function CS.UnityEngine.Vector2:op_Equality(lhs,rhs) end
--[[
	@lhs CS.UnityEngine.Vector2
	@rhs CS.UnityEngine.Vector2
	return CS.System.Boolean
--]]
function CS.UnityEngine.Vector2:op_Inequality(lhs,rhs) end
--[[
	@v CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Vector2:op_Implicit(v) end
--[[
	@v CS.UnityEngine.Vector2
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector2:op_Implicit(v) end

--@SuperType [luaIde#CS.System.ValueType]
CS.UnityEngine.Vector3 = {}
--[[
	@x CS.System.Single
	@y CS.System.Single
	@z CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
]]
function CS.UnityEngine.Vector3(x,y,z) end
--[[
	@x CS.System.Single
	@y CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
]]
function CS.UnityEngine.Vector3(x,y) end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 
--]]
CS.UnityEngine.Vector3.normalized = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.Vector3.magnitude = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.Vector3.sqrMagnitude = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 
--]]
CS.UnityEngine.Vector3.zero = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 
--]]
CS.UnityEngine.Vector3.one = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 
--]]
CS.UnityEngine.Vector3.forward = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 
--]]
CS.UnityEngine.Vector3.back = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 
--]]
CS.UnityEngine.Vector3.up = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 
--]]
CS.UnityEngine.Vector3.down = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 
--]]
CS.UnityEngine.Vector3.left = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 
--]]
CS.UnityEngine.Vector3.right = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Vector3.kEpsilon = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Vector3.x = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Vector3.y = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Vector3.z = nil
--[[
	@a CS.UnityEngine.Vector3
	@b CS.UnityEngine.Vector3
	@t CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:Slerp(a,b,t) end
--[[
	@a CS.UnityEngine.Vector3
	@b CS.UnityEngine.Vector3
	@t CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:SlerpUnclamped(a,b,t) end
--[[
	@normal CS.UnityEngine.Vector3&
	@tangent CS.UnityEngine.Vector3&
--]]
function CS.UnityEngine.Vector3:OrthoNormalize(normal,tangent) end
--[[
	@normal CS.UnityEngine.Vector3&
	@tangent CS.UnityEngine.Vector3&
	@binormal CS.UnityEngine.Vector3&
--]]
function CS.UnityEngine.Vector3:OrthoNormalize(normal,tangent,binormal) end
--[[
	@current CS.UnityEngine.Vector3
	@target CS.UnityEngine.Vector3
	@maxRadiansDelta CS.System.Single
	@maxMagnitudeDelta CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:RotateTowards(current,target,maxRadiansDelta,maxMagnitudeDelta) end
--[[
	@excludeThis CS.UnityEngine.Vector3
	@fromThat CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:Exclude(excludeThis,fromThat) end
--[[
	@a CS.UnityEngine.Vector3
	@b CS.UnityEngine.Vector3
	@t CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:Lerp(a,b,t) end
--[[
	@a CS.UnityEngine.Vector3
	@b CS.UnityEngine.Vector3
	@t CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:LerpUnclamped(a,b,t) end
--[[
	@current CS.UnityEngine.Vector3
	@target CS.UnityEngine.Vector3
	@maxDistanceDelta CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:MoveTowards(current,target,maxDistanceDelta) end
--[[
	@current CS.UnityEngine.Vector3
	@target CS.UnityEngine.Vector3
	@currentVelocity CS.UnityEngine.Vector3&
	@smoothTime CS.System.Single
	@maxSpeed CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:SmoothDamp(current,target,currentVelocity,smoothTime,maxSpeed) end
--[[
	@current CS.UnityEngine.Vector3
	@target CS.UnityEngine.Vector3
	@currentVelocity CS.UnityEngine.Vector3&
	@smoothTime CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:SmoothDamp(current,target,currentVelocity,smoothTime) end
--[[
	@current CS.UnityEngine.Vector3
	@target CS.UnityEngine.Vector3
	@currentVelocity CS.UnityEngine.Vector3&
	@smoothTime CS.System.Single
	@maxSpeed CS.System.Single
	@deltaTime CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:SmoothDamp(current,target,currentVelocity,smoothTime,maxSpeed,deltaTime) end
--[[
	@new_x CS.System.Single
	@new_y CS.System.Single
	@new_z CS.System.Single
--]]
function CS.UnityEngine.Vector3:Set(new_x,new_y,new_z) end
--[[
	@a CS.UnityEngine.Vector3
	@b CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:Scale(a,b) end
--[[
	@scale CS.UnityEngine.Vector3
--]]
function CS.UnityEngine.Vector3:Scale(scale) end
--[[
	@lhs CS.UnityEngine.Vector3
	@rhs CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:Cross(lhs,rhs) end
function CS.UnityEngine.Vector3:GetHashCode() end
--[[
	@other CS.System.Object
	return CS.System.Boolean
--]]
function CS.UnityEngine.Vector3:Equals(other) end
--[[
	@inDirection CS.UnityEngine.Vector3
	@inNormal CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:Reflect(inDirection,inNormal) end
--[[
	@value CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:Normalize(value) end
function CS.UnityEngine.Vector3:Normalize() end
--[[
	@lhs CS.UnityEngine.Vector3
	@rhs CS.UnityEngine.Vector3
	return CS.System.Single
--]]
function CS.UnityEngine.Vector3:Dot(lhs,rhs) end
--[[
	@vector CS.UnityEngine.Vector3
	@onNormal CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:Project(vector,onNormal) end
--[[
	@vector CS.UnityEngine.Vector3
	@planeNormal CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:ProjectOnPlane(vector,planeNormal) end
--[[
	@from CS.UnityEngine.Vector3
	@to CS.UnityEngine.Vector3
	return CS.System.Single
--]]
function CS.UnityEngine.Vector3:Angle(from,to) end
--[[
	@a CS.UnityEngine.Vector3
	@b CS.UnityEngine.Vector3
	return CS.System.Single
--]]
function CS.UnityEngine.Vector3:Distance(a,b) end
--[[
	@vector CS.UnityEngine.Vector3
	@maxLength CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:ClampMagnitude(vector,maxLength) end
--[[
	@a CS.UnityEngine.Vector3
	return CS.System.Single
--]]
function CS.UnityEngine.Vector3:Magnitude(a) end
--[[
	@a CS.UnityEngine.Vector3
	return CS.System.Single
--]]
function CS.UnityEngine.Vector3:SqrMagnitude(a) end
--[[
	@lhs CS.UnityEngine.Vector3
	@rhs CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:Min(lhs,rhs) end
--[[
	@lhs CS.UnityEngine.Vector3
	@rhs CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:Max(lhs,rhs) end
--[[
	@a CS.UnityEngine.Vector3
	@b CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:op_Addition(a,b) end
--[[
	@a CS.UnityEngine.Vector3
	@b CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:op_Subtraction(a,b) end
--[[
	@a CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:op_UnaryNegation(a) end
--[[
	@a CS.UnityEngine.Vector3
	@d CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:op_Multiply(a,d) end
--[[
	@d CS.System.Single
	@a CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:op_Multiply(d,a) end
--[[
	@a CS.UnityEngine.Vector3
	@d CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector3:op_Division(a,d) end
--[[
	@lhs CS.UnityEngine.Vector3
	@rhs CS.UnityEngine.Vector3
	return CS.System.Boolean
--]]
function CS.UnityEngine.Vector3:op_Equality(lhs,rhs) end
--[[
	@lhs CS.UnityEngine.Vector3
	@rhs CS.UnityEngine.Vector3
	return CS.System.Boolean
--]]
function CS.UnityEngine.Vector3:op_Inequality(lhs,rhs) end
function CS.UnityEngine.Vector3:ToString() end
--[[
	@format CS.System.String
	return CS.System.String
--]]
function CS.UnityEngine.Vector3:ToString(format) end
--[[
	@from CS.UnityEngine.Vector3
	@to CS.UnityEngine.Vector3
	return CS.System.Single
--]]
function CS.UnityEngine.Vector3:AngleBetween(from,to) end

--@SuperType [luaIde#CS.System.ValueType]
CS.UnityEngine.Vector4 = {}
--[[
	@x CS.System.Single
	@y CS.System.Single
	@z CS.System.Single
	@w CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector4]
]]
function CS.UnityEngine.Vector4(x,y,z,w) end
--[[
	@x CS.System.Single
	@y CS.System.Single
	@z CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector4]
]]
function CS.UnityEngine.Vector4(x,y,z) end
--[[
	@x CS.System.Single
	@y CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector4]
]]
function CS.UnityEngine.Vector4(x,y) end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector4]
	 Get 
--]]
CS.UnityEngine.Vector4.normalized = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.Vector4.magnitude = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.Vector4.sqrMagnitude = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector4]
	 Get 
--]]
CS.UnityEngine.Vector4.zero = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector4]
	 Get 
--]]
CS.UnityEngine.Vector4.one = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Vector4.kEpsilon = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Vector4.x = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Vector4.y = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Vector4.z = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Vector4.w = nil
--[[
	@new_x CS.System.Single
	@new_y CS.System.Single
	@new_z CS.System.Single
	@new_w CS.System.Single
--]]
function CS.UnityEngine.Vector4:Set(new_x,new_y,new_z,new_w) end
--[[
	@a CS.UnityEngine.Vector4
	@b CS.UnityEngine.Vector4
	@t CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector4]
--]]
function CS.UnityEngine.Vector4:Lerp(a,b,t) end
--[[
	@a CS.UnityEngine.Vector4
	@b CS.UnityEngine.Vector4
	@t CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector4]
--]]
function CS.UnityEngine.Vector4:LerpUnclamped(a,b,t) end
--[[
	@current CS.UnityEngine.Vector4
	@target CS.UnityEngine.Vector4
	@maxDistanceDelta CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector4]
--]]
function CS.UnityEngine.Vector4:MoveTowards(current,target,maxDistanceDelta) end
--[[
	@a CS.UnityEngine.Vector4
	@b CS.UnityEngine.Vector4
	@return [luaIde#CS.UnityEngine.Vector4]
--]]
function CS.UnityEngine.Vector4:Scale(a,b) end
--[[
	@scale CS.UnityEngine.Vector4
--]]
function CS.UnityEngine.Vector4:Scale(scale) end
function CS.UnityEngine.Vector4:GetHashCode() end
--[[
	@other CS.System.Object
	return CS.System.Boolean
--]]
function CS.UnityEngine.Vector4:Equals(other) end
--[[
	@a CS.UnityEngine.Vector4
	@return [luaIde#CS.UnityEngine.Vector4]
--]]
function CS.UnityEngine.Vector4:Normalize(a) end
function CS.UnityEngine.Vector4:Normalize() end
--[[
	@a CS.UnityEngine.Vector4
	@b CS.UnityEngine.Vector4
	return CS.System.Single
--]]
function CS.UnityEngine.Vector4:Dot(a,b) end
--[[
	@a CS.UnityEngine.Vector4
	@b CS.UnityEngine.Vector4
	@return [luaIde#CS.UnityEngine.Vector4]
--]]
function CS.UnityEngine.Vector4:Project(a,b) end
--[[
	@a CS.UnityEngine.Vector4
	@b CS.UnityEngine.Vector4
	return CS.System.Single
--]]
function CS.UnityEngine.Vector4:Distance(a,b) end
--[[
	@a CS.UnityEngine.Vector4
	return CS.System.Single
--]]
function CS.UnityEngine.Vector4:Magnitude(a) end
--[[
	@lhs CS.UnityEngine.Vector4
	@rhs CS.UnityEngine.Vector4
	@return [luaIde#CS.UnityEngine.Vector4]
--]]
function CS.UnityEngine.Vector4:Min(lhs,rhs) end
--[[
	@lhs CS.UnityEngine.Vector4
	@rhs CS.UnityEngine.Vector4
	@return [luaIde#CS.UnityEngine.Vector4]
--]]
function CS.UnityEngine.Vector4:Max(lhs,rhs) end
--[[
	@a CS.UnityEngine.Vector4
	@b CS.UnityEngine.Vector4
	@return [luaIde#CS.UnityEngine.Vector4]
--]]
function CS.UnityEngine.Vector4:op_Addition(a,b) end
--[[
	@a CS.UnityEngine.Vector4
	@b CS.UnityEngine.Vector4
	@return [luaIde#CS.UnityEngine.Vector4]
--]]
function CS.UnityEngine.Vector4:op_Subtraction(a,b) end
--[[
	@a CS.UnityEngine.Vector4
	@return [luaIde#CS.UnityEngine.Vector4]
--]]
function CS.UnityEngine.Vector4:op_UnaryNegation(a) end
--[[
	@a CS.UnityEngine.Vector4
	@d CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector4]
--]]
function CS.UnityEngine.Vector4:op_Multiply(a,d) end
--[[
	@d CS.System.Single
	@a CS.UnityEngine.Vector4
	@return [luaIde#CS.UnityEngine.Vector4]
--]]
function CS.UnityEngine.Vector4:op_Multiply(d,a) end
--[[
	@a CS.UnityEngine.Vector4
	@d CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector4]
--]]
function CS.UnityEngine.Vector4:op_Division(a,d) end
--[[
	@lhs CS.UnityEngine.Vector4
	@rhs CS.UnityEngine.Vector4
	return CS.System.Boolean
--]]
function CS.UnityEngine.Vector4:op_Equality(lhs,rhs) end
--[[
	@lhs CS.UnityEngine.Vector4
	@rhs CS.UnityEngine.Vector4
	return CS.System.Boolean
--]]
function CS.UnityEngine.Vector4:op_Inequality(lhs,rhs) end
--[[
	@v CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector4]
--]]
function CS.UnityEngine.Vector4:op_Implicit(v) end
--[[
	@v CS.UnityEngine.Vector4
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Vector4:op_Implicit(v) end
--[[
	@v CS.UnityEngine.Vector2
	@return [luaIde#CS.UnityEngine.Vector4]
--]]
function CS.UnityEngine.Vector4:op_Implicit(v) end
--[[
	@v CS.UnityEngine.Vector4
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Vector4:op_Implicit(v) end
function CS.UnityEngine.Vector4:ToString() end
--[[
	@format CS.System.String
	return CS.System.String
--]]
function CS.UnityEngine.Vector4:ToString(format) end
--[[
	@a CS.UnityEngine.Vector4
	return CS.System.Single
--]]
function CS.UnityEngine.Vector4:SqrMagnitude(a) end
function CS.UnityEngine.Vector4:SqrMagnitude() end

--@SuperType [luaIde#CS.System.ValueType]
CS.UnityEngine.Rect = {}
--[[
	@x CS.System.Single
	@y CS.System.Single
	@width CS.System.Single
	@height CS.System.Single
	@return [luaIde#CS.UnityEngine.Rect]
]]
function CS.UnityEngine.Rect(x,y,width,height) end
--[[
	@position CS.UnityEngine.Vector2
	@size CS.UnityEngine.Vector2
	@return [luaIde#CS.UnityEngine.Rect]
]]
function CS.UnityEngine.Rect(position,size) end
--[[
	@source CS.UnityEngine.Rect
	@return [luaIde#CS.UnityEngine.Rect]
]]
function CS.UnityEngine.Rect(source) end
--[[
	@RefType [luaIde#CS.UnityEngine.Rect]
	 Get 
--]]
CS.UnityEngine.Rect.zero = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Rect.x = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Rect.y = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.Rect.position = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.Rect.center = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.Rect.min = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.Rect.max = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Rect.width = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Rect.height = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.Rect.size = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Rect.xMin = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Rect.yMin = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Rect.xMax = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Rect.yMax = nil
--[[
	@xmin CS.System.Single
	@ymin CS.System.Single
	@xmax CS.System.Single
	@ymax CS.System.Single
	@return [luaIde#CS.UnityEngine.Rect]
--]]
function CS.UnityEngine.Rect:MinMaxRect(xmin,ymin,xmax,ymax) end
--[[
	@x CS.System.Single
	@y CS.System.Single
	@width CS.System.Single
	@height CS.System.Single
--]]
function CS.UnityEngine.Rect:Set(x,y,width,height) end
--[[
	@point CS.UnityEngine.Vector2
	return CS.System.Boolean
--]]
function CS.UnityEngine.Rect:Contains(point) end
--[[
	@point CS.UnityEngine.Vector3
	return CS.System.Boolean
--]]
function CS.UnityEngine.Rect:Contains(point) end
--[[
	@point CS.UnityEngine.Vector3
	@allowInverse CS.System.Boolean
	return CS.System.Boolean
--]]
function CS.UnityEngine.Rect:Contains(point,allowInverse) end
--[[
	@other CS.UnityEngine.Rect
	return CS.System.Boolean
--]]
function CS.UnityEngine.Rect:Overlaps(other) end
--[[
	@other CS.UnityEngine.Rect
	@allowInverse CS.System.Boolean
	return CS.System.Boolean
--]]
function CS.UnityEngine.Rect:Overlaps(other,allowInverse) end
--[[
	@rectangle CS.UnityEngine.Rect
	@normalizedRectCoordinates CS.UnityEngine.Vector2
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Rect:NormalizedToPoint(rectangle,normalizedRectCoordinates) end
--[[
	@rectangle CS.UnityEngine.Rect
	@point CS.UnityEngine.Vector2
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Rect:PointToNormalized(rectangle,point) end
--[[
	@lhs CS.UnityEngine.Rect
	@rhs CS.UnityEngine.Rect
	return CS.System.Boolean
--]]
function CS.UnityEngine.Rect:op_Inequality(lhs,rhs) end
--[[
	@lhs CS.UnityEngine.Rect
	@rhs CS.UnityEngine.Rect
	return CS.System.Boolean
--]]
function CS.UnityEngine.Rect:op_Equality(lhs,rhs) end
function CS.UnityEngine.Rect:GetHashCode() end
--[[
	@other CS.System.Object
	return CS.System.Boolean
--]]
function CS.UnityEngine.Rect:Equals(other) end
function CS.UnityEngine.Rect:ToString() end
--[[
	@format CS.System.String
	return CS.System.String
--]]
function CS.UnityEngine.Rect:ToString(format) end

--@SuperType [luaIde#CS.System.ValueType]
CS.UnityEngine.Quaternion = {}
--[[
	@x CS.System.Single
	@y CS.System.Single
	@z CS.System.Single
	@w CS.System.Single
	@return [luaIde#CS.UnityEngine.Quaternion]
]]
function CS.UnityEngine.Quaternion(x,y,z,w) end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.Quaternion.eulerAngles = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Quaternion]
	 Get 
--]]
CS.UnityEngine.Quaternion.identity = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Quaternion.x = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Quaternion.y = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Quaternion.z = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Quaternion.w = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Quaternion.kEpsilon = nil
--[[
	@angle CS.System.Single
	@axis CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Quaternion]
--]]
function CS.UnityEngine.Quaternion:AngleAxis(angle,axis) end
--[[
	@angle CS.System.Single&
	@axis CS.UnityEngine.Vector3&
--]]
function CS.UnityEngine.Quaternion:ToAngleAxis(angle,axis) end
--[[
	@fromDirection CS.UnityEngine.Vector3
	@toDirection CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Quaternion]
--]]
function CS.UnityEngine.Quaternion:FromToRotation(fromDirection,toDirection) end
--[[
	@fromDirection CS.UnityEngine.Vector3
	@toDirection CS.UnityEngine.Vector3
--]]
function CS.UnityEngine.Quaternion:SetFromToRotation(fromDirection,toDirection) end
--[[
	@forward CS.UnityEngine.Vector3
	@upwards CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Quaternion]
--]]
function CS.UnityEngine.Quaternion:LookRotation(forward,upwards) end
--[[
	@forward CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Quaternion]
--]]
function CS.UnityEngine.Quaternion:LookRotation(forward) end
--[[
	@a CS.UnityEngine.Quaternion
	@b CS.UnityEngine.Quaternion
	@t CS.System.Single
	@return [luaIde#CS.UnityEngine.Quaternion]
--]]
function CS.UnityEngine.Quaternion:Slerp(a,b,t) end
--[[
	@a CS.UnityEngine.Quaternion
	@b CS.UnityEngine.Quaternion
	@t CS.System.Single
	@return [luaIde#CS.UnityEngine.Quaternion]
--]]
function CS.UnityEngine.Quaternion:SlerpUnclamped(a,b,t) end
--[[
	@a CS.UnityEngine.Quaternion
	@b CS.UnityEngine.Quaternion
	@t CS.System.Single
	@return [luaIde#CS.UnityEngine.Quaternion]
--]]
function CS.UnityEngine.Quaternion:Lerp(a,b,t) end
--[[
	@a CS.UnityEngine.Quaternion
	@b CS.UnityEngine.Quaternion
	@t CS.System.Single
	@return [luaIde#CS.UnityEngine.Quaternion]
--]]
function CS.UnityEngine.Quaternion:LerpUnclamped(a,b,t) end
--[[
	@from CS.UnityEngine.Quaternion
	@to CS.UnityEngine.Quaternion
	@maxDegreesDelta CS.System.Single
	@return [luaIde#CS.UnityEngine.Quaternion]
--]]
function CS.UnityEngine.Quaternion:RotateTowards(from,to,maxDegreesDelta) end
--[[
	@rotation CS.UnityEngine.Quaternion
	@return [luaIde#CS.UnityEngine.Quaternion]
--]]
function CS.UnityEngine.Quaternion:Inverse(rotation) end
--[[
	@x CS.System.Single
	@y CS.System.Single
	@z CS.System.Single
	@return [luaIde#CS.UnityEngine.Quaternion]
--]]
function CS.UnityEngine.Quaternion:Euler(x,y,z) end
--[[
	@euler CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Quaternion]
--]]
function CS.UnityEngine.Quaternion:Euler(euler) end
--[[
	@x CS.System.Single
	@y CS.System.Single
	@z CS.System.Single
	@return [luaIde#CS.UnityEngine.Quaternion]
--]]
function CS.UnityEngine.Quaternion:EulerRotation(x,y,z) end
--[[
	@euler CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Quaternion]
--]]
function CS.UnityEngine.Quaternion:EulerRotation(euler) end
--[[
	@x CS.System.Single
	@y CS.System.Single
	@z CS.System.Single
--]]
function CS.UnityEngine.Quaternion:SetEulerRotation(x,y,z) end
--[[
	@euler CS.UnityEngine.Vector3
--]]
function CS.UnityEngine.Quaternion:SetEulerRotation(euler) end
function CS.UnityEngine.Quaternion:ToEuler() end
--[[
	@x CS.System.Single
	@y CS.System.Single
	@z CS.System.Single
	@return [luaIde#CS.UnityEngine.Quaternion]
--]]
function CS.UnityEngine.Quaternion:EulerAngles(x,y,z) end
--[[
	@euler CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Quaternion]
--]]
function CS.UnityEngine.Quaternion:EulerAngles(euler) end
--[[
	@axis CS.UnityEngine.Vector3&
	@angle CS.System.Single&
--]]
function CS.UnityEngine.Quaternion:ToAxisAngle(axis,angle) end
--[[
	@x CS.System.Single
	@y CS.System.Single
	@z CS.System.Single
--]]
function CS.UnityEngine.Quaternion:SetEulerAngles(x,y,z) end
--[[
	@euler CS.UnityEngine.Vector3
--]]
function CS.UnityEngine.Quaternion:SetEulerAngles(euler) end
--[[
	@rotation CS.UnityEngine.Quaternion
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Quaternion:ToEulerAngles(rotation) end
function CS.UnityEngine.Quaternion:ToEulerAngles() end
--[[
	@axis CS.UnityEngine.Vector3
	@angle CS.System.Single
	@return [luaIde#CS.UnityEngine.Quaternion]
--]]
function CS.UnityEngine.Quaternion:AxisAngle(axis,angle) end
--[[
	@axis CS.UnityEngine.Vector3
	@angle CS.System.Single
--]]
function CS.UnityEngine.Quaternion:SetAxisAngle(axis,angle) end
--[[
	@new_x CS.System.Single
	@new_y CS.System.Single
	@new_z CS.System.Single
	@new_w CS.System.Single
--]]
function CS.UnityEngine.Quaternion:Set(new_x,new_y,new_z,new_w) end
--[[
	@lhs CS.UnityEngine.Quaternion
	@rhs CS.UnityEngine.Quaternion
	@return [luaIde#CS.UnityEngine.Quaternion]
--]]
function CS.UnityEngine.Quaternion:op_Multiply(lhs,rhs) end
--[[
	@rotation CS.UnityEngine.Quaternion
	@point CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Quaternion:op_Multiply(rotation,point) end
--[[
	@lhs CS.UnityEngine.Quaternion
	@rhs CS.UnityEngine.Quaternion
	return CS.System.Boolean
--]]
function CS.UnityEngine.Quaternion:op_Equality(lhs,rhs) end
--[[
	@lhs CS.UnityEngine.Quaternion
	@rhs CS.UnityEngine.Quaternion
	return CS.System.Boolean
--]]
function CS.UnityEngine.Quaternion:op_Inequality(lhs,rhs) end
--[[
	@a CS.UnityEngine.Quaternion
	@b CS.UnityEngine.Quaternion
	return CS.System.Single
--]]
function CS.UnityEngine.Quaternion:Dot(a,b) end
--[[
	@view CS.UnityEngine.Vector3
--]]
function CS.UnityEngine.Quaternion:SetLookRotation(view) end
--[[
	@view CS.UnityEngine.Vector3
	@up CS.UnityEngine.Vector3
--]]
function CS.UnityEngine.Quaternion:SetLookRotation(view,up) end
--[[
	@a CS.UnityEngine.Quaternion
	@b CS.UnityEngine.Quaternion
	return CS.System.Single
--]]
function CS.UnityEngine.Quaternion:Angle(a,b) end
function CS.UnityEngine.Quaternion:GetHashCode() end
--[[
	@other CS.System.Object
	return CS.System.Boolean
--]]
function CS.UnityEngine.Quaternion:Equals(other) end
function CS.UnityEngine.Quaternion:ToString() end
--[[
	@format CS.System.String
	return CS.System.String
--]]
function CS.UnityEngine.Quaternion:ToString(format) end

--@SuperType [luaIde#CS.System.ValueType]
CS.UnityEngine.Color = {}
--[[
	@r CS.System.Single
	@g CS.System.Single
	@b CS.System.Single
	@a CS.System.Single
	@return [luaIde#CS.UnityEngine.Color]
]]
function CS.UnityEngine.Color(r,g,b,a) end
--[[
	@r CS.System.Single
	@g CS.System.Single
	@b CS.System.Single
	@return [luaIde#CS.UnityEngine.Color]
]]
function CS.UnityEngine.Color(r,g,b) end
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 
--]]
CS.UnityEngine.Color.red = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 
--]]
CS.UnityEngine.Color.green = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 
--]]
CS.UnityEngine.Color.blue = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 
--]]
CS.UnityEngine.Color.white = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 
--]]
CS.UnityEngine.Color.black = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 
--]]
CS.UnityEngine.Color.yellow = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 
--]]
CS.UnityEngine.Color.cyan = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 
--]]
CS.UnityEngine.Color.magenta = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 
--]]
CS.UnityEngine.Color.gray = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 
--]]
CS.UnityEngine.Color.grey = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 
--]]
CS.UnityEngine.Color.clear = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.Color.grayscale = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 
--]]
CS.UnityEngine.Color.linear = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 
--]]
CS.UnityEngine.Color.gamma = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.Color.maxColorComponent = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Color.r = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Color.g = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Color.b = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Color.a = nil
function CS.UnityEngine.Color:ToString() end
--[[
	@format CS.System.String
	return CS.System.String
--]]
function CS.UnityEngine.Color:ToString(format) end
function CS.UnityEngine.Color:GetHashCode() end
--[[
	@other CS.System.Object
	return CS.System.Boolean
--]]
function CS.UnityEngine.Color:Equals(other) end
--[[
	@a CS.UnityEngine.Color
	@b CS.UnityEngine.Color
	@return [luaIde#CS.UnityEngine.Color]
--]]
function CS.UnityEngine.Color:op_Addition(a,b) end
--[[
	@a CS.UnityEngine.Color
	@b CS.UnityEngine.Color
	@return [luaIde#CS.UnityEngine.Color]
--]]
function CS.UnityEngine.Color:op_Subtraction(a,b) end
--[[
	@a CS.UnityEngine.Color
	@b CS.UnityEngine.Color
	@return [luaIde#CS.UnityEngine.Color]
--]]
function CS.UnityEngine.Color:op_Multiply(a,b) end
--[[
	@a CS.UnityEngine.Color
	@b CS.System.Single
	@return [luaIde#CS.UnityEngine.Color]
--]]
function CS.UnityEngine.Color:op_Multiply(a,b) end
--[[
	@b CS.System.Single
	@a CS.UnityEngine.Color
	@return [luaIde#CS.UnityEngine.Color]
--]]
function CS.UnityEngine.Color:op_Multiply(b,a) end
--[[
	@a CS.UnityEngine.Color
	@b CS.System.Single
	@return [luaIde#CS.UnityEngine.Color]
--]]
function CS.UnityEngine.Color:op_Division(a,b) end
--[[
	@lhs CS.UnityEngine.Color
	@rhs CS.UnityEngine.Color
	return CS.System.Boolean
--]]
function CS.UnityEngine.Color:op_Equality(lhs,rhs) end
--[[
	@lhs CS.UnityEngine.Color
	@rhs CS.UnityEngine.Color
	return CS.System.Boolean
--]]
function CS.UnityEngine.Color:op_Inequality(lhs,rhs) end
--[[
	@a CS.UnityEngine.Color
	@b CS.UnityEngine.Color
	@t CS.System.Single
	@return [luaIde#CS.UnityEngine.Color]
--]]
function CS.UnityEngine.Color:Lerp(a,b,t) end
--[[
	@a CS.UnityEngine.Color
	@b CS.UnityEngine.Color
	@t CS.System.Single
	@return [luaIde#CS.UnityEngine.Color]
--]]
function CS.UnityEngine.Color:LerpUnclamped(a,b,t) end
--[[
	@c CS.UnityEngine.Color
	@return [luaIde#CS.UnityEngine.Vector4]
--]]
function CS.UnityEngine.Color:op_Implicit(c) end
--[[
	@v CS.UnityEngine.Vector4
	@return [luaIde#CS.UnityEngine.Color]
--]]
function CS.UnityEngine.Color:op_Implicit(v) end
--[[
	@rgbColor CS.UnityEngine.Color
	@H CS.System.Single&
	@S CS.System.Single&
	@V CS.System.Single&
--]]
function CS.UnityEngine.Color:RGBToHSV(rgbColor,H,S,V) end
--[[
	@H CS.System.Single
	@S CS.System.Single
	@V CS.System.Single
	@return [luaIde#CS.UnityEngine.Color]
--]]
function CS.UnityEngine.Color:HSVToRGB(H,S,V) end
--[[
	@H CS.System.Single
	@S CS.System.Single
	@V CS.System.Single
	@hdr CS.System.Boolean
	@return [luaIde#CS.UnityEngine.Color]
--]]
function CS.UnityEngine.Color:HSVToRGB(H,S,V,hdr) end

--@SuperType [luaIde#CS.System.ValueType]
CS.UnityEngine.Ray = {}
--[[
	@origin CS.UnityEngine.Vector3
	@direction CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Ray]
]]
function CS.UnityEngine.Ray(origin,direction) end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.Ray.origin = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.Ray.direction = nil
--[[
	@distance CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Ray:GetPoint(distance) end
function CS.UnityEngine.Ray:ToString() end
--[[
	@format CS.System.String
	return CS.System.String
--]]
function CS.UnityEngine.Ray:ToString(format) end

--@SuperType [luaIde#CS.System.ValueType]
CS.UnityEngine.Bounds = {}
--[[
	@center CS.UnityEngine.Vector3
	@size CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Bounds]
]]
function CS.UnityEngine.Bounds(center,size) end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.Bounds.center = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.Bounds.size = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.Bounds.extents = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.Bounds.min = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.Bounds.max = nil
--[[
	@point CS.UnityEngine.Vector3
	return CS.System.Boolean
--]]
function CS.UnityEngine.Bounds:Contains(point) end
--[[
	@point CS.UnityEngine.Vector3
	return CS.System.Single
--]]
function CS.UnityEngine.Bounds:SqrDistance(point) end
--[[
	@ray CS.UnityEngine.Ray
	return CS.System.Boolean
--]]
function CS.UnityEngine.Bounds:IntersectRay(ray) end
--[[
	@ray CS.UnityEngine.Ray
	@distance CS.System.Single&
	return CS.System.Boolean
--]]
function CS.UnityEngine.Bounds:IntersectRay(ray,distance) end
--[[
	@point CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Bounds:ClosestPoint(point) end
function CS.UnityEngine.Bounds:GetHashCode() end
--[[
	@other CS.System.Object
	return CS.System.Boolean
--]]
function CS.UnityEngine.Bounds:Equals(other) end
--[[
	@lhs CS.UnityEngine.Bounds
	@rhs CS.UnityEngine.Bounds
	return CS.System.Boolean
--]]
function CS.UnityEngine.Bounds:op_Equality(lhs,rhs) end
--[[
	@lhs CS.UnityEngine.Bounds
	@rhs CS.UnityEngine.Bounds
	return CS.System.Boolean
--]]
function CS.UnityEngine.Bounds:op_Inequality(lhs,rhs) end
--[[
	@min CS.UnityEngine.Vector3
	@max CS.UnityEngine.Vector3
--]]
function CS.UnityEngine.Bounds:SetMinMax(min,max) end
--[[
	@point CS.UnityEngine.Vector3
--]]
function CS.UnityEngine.Bounds:Encapsulate(point) end
--[[
	@bounds CS.UnityEngine.Bounds
--]]
function CS.UnityEngine.Bounds:Encapsulate(bounds) end
--[[
	@amount CS.System.Single
--]]
function CS.UnityEngine.Bounds:Expand(amount) end
--[[
	@amount CS.UnityEngine.Vector3
--]]
function CS.UnityEngine.Bounds:Expand(amount) end
--[[
	@bounds CS.UnityEngine.Bounds
	return CS.System.Boolean
--]]
function CS.UnityEngine.Bounds:Intersects(bounds) end
function CS.UnityEngine.Bounds:ToString() end
--[[
	@format CS.System.String
	return CS.System.String
--]]
function CS.UnityEngine.Bounds:ToString(format) end

--@SuperType [luaIde#CS.System.ValueType]
CS.UnityEngine.Ray2D = {}
--[[
	@origin CS.UnityEngine.Vector2
	@direction CS.UnityEngine.Vector2
	@return [luaIde#CS.UnityEngine.Ray2D]
]]
function CS.UnityEngine.Ray2D(origin,direction) end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.Ray2D.origin = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.Ray2D.direction = nil
--[[
	@distance CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Ray2D:GetPoint(distance) end
function CS.UnityEngine.Ray2D:ToString() end
--[[
	@format CS.System.String
	return CS.System.String
--]]
function CS.UnityEngine.Ray2D:ToString(format) end

--@SuperType [luaIde#CS.System.Object]
CS.UnityEngine.Time = {}
--[[
	@return [luaIde#CS.UnityEngine.Time]
]]
function CS.UnityEngine.Time() end
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.Time.time = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.Time.timeSinceLevelLoad = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.Time.deltaTime = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.Time.fixedTime = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.Time.unscaledTime = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.Time.fixedUnscaledTime = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.Time.unscaledDeltaTime = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.Time.fixedUnscaledDeltaTime = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Time.fixedDeltaTime = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Time.maximumDeltaTime = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.Time.smoothDeltaTime = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Time.maximumParticleDeltaTime = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Time.timeScale = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.Time.frameCount = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.Time.renderedFrameCount = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.Time.realtimeSinceStartup = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.Time.captureFramerate = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.Time.inFixedTimeStep = nil

--@SuperType [luaIde#CS.UnityEngine.Object]
CS.UnityEngine.GameObject = {}
--[[
	@name CS.System.String
	@return [luaIde#CS.UnityEngine.GameObject]
]]
function CS.UnityEngine.GameObject(name) end
--[[
	@return [luaIde#CS.UnityEngine.GameObject]
]]
function CS.UnityEngine.GameObject() end
--[[
	@name CS.System.String
	@components CS.System.Type{}
	@return [luaIde#CS.UnityEngine.GameObject]
]]
function CS.UnityEngine.GameObject(name,components) end
--[[
	@RefType [luaIde#CS.UnityEngine.Transform]
	 Get 
--]]
CS.UnityEngine.GameObject.transform = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.GameObject.layer = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.GameObject.activeSelf = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.GameObject.activeInHierarchy = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.GameObject.isStatic = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.UnityEngine.GameObject.tag = nil
--[[
	CS.UnityEngine.SceneManagement.Scene
	 Get 
--]]
CS.UnityEngine.GameObject.scene = nil
--[[
	@RefType [luaIde#CS.UnityEngine.GameObject]
	 Get 
--]]
CS.UnityEngine.GameObject.gameObject = nil
--[[
	@type CS.UnityEngine.PrimitiveType
	@return [luaIde#CS.UnityEngine.GameObject]
--]]
function CS.UnityEngine.GameObject:CreatePrimitive(type) end
--[[
	@type CS.System.Type
	@return [luaIde#CS.UnityEngine.Component]
--]]
function CS.UnityEngine.GameObject:GetComponent(type) end
--[[
	@type CS.System.String
	@return [luaIde#CS.UnityEngine.Component]
--]]
function CS.UnityEngine.GameObject:GetComponent(type) end
--[[
	@type CS.System.Type
	@includeInactive CS.System.Boolean
	@return [luaIde#CS.UnityEngine.Component]
--]]
function CS.UnityEngine.GameObject:GetComponentInChildren(type,includeInactive) end
--[[
	@type CS.System.Type
	@return [luaIde#CS.UnityEngine.Component]
--]]
function CS.UnityEngine.GameObject:GetComponentInChildren(type) end
--[[
	@type CS.System.Type
	@return [luaIde#CS.UnityEngine.Component]
--]]
function CS.UnityEngine.GameObject:GetComponentInParent(type) end
--[[
	@type CS.System.Type
	return CS.UnityEngine.Component{}
--]]
function CS.UnityEngine.GameObject:GetComponents(type) end
--[[
	@type CS.System.Type
	@results CS.System.Collections.Generic.List`1{{UnityEngine.Component, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.GameObject:GetComponents(type,results) end
--[[
	@type CS.System.Type
	return CS.UnityEngine.Component{}
--]]
function CS.UnityEngine.GameObject:GetComponentsInChildren(type) end
--[[
	@type CS.System.Type
	@includeInactive CS.System.Boolean
	return CS.UnityEngine.Component{}
--]]
function CS.UnityEngine.GameObject:GetComponentsInChildren(type,includeInactive) end
--[[
	@type CS.System.Type
	return CS.UnityEngine.Component{}
--]]
function CS.UnityEngine.GameObject:GetComponentsInParent(type) end
--[[
	@type CS.System.Type
	@includeInactive CS.System.Boolean
	return CS.UnityEngine.Component{}
--]]
function CS.UnityEngine.GameObject:GetComponentsInParent(type,includeInactive) end
--[[
	@value CS.System.Boolean
--]]
function CS.UnityEngine.GameObject:SetActive(value) end
--[[
	@state CS.System.Boolean
--]]
function CS.UnityEngine.GameObject:SetActiveRecursively(state) end
--[[
	@tag CS.System.String
	return CS.System.Boolean
--]]
function CS.UnityEngine.GameObject:CompareTag(tag) end
--[[
	@tag CS.System.String
	@return [luaIde#CS.UnityEngine.GameObject]
--]]
function CS.UnityEngine.GameObject:FindGameObjectWithTag(tag) end
--[[
	@tag CS.System.String
	@return [luaIde#CS.UnityEngine.GameObject]
--]]
function CS.UnityEngine.GameObject:FindWithTag(tag) end
--[[
	@tag CS.System.String
	return CS.UnityEngine.GameObject{}
--]]
function CS.UnityEngine.GameObject:FindGameObjectsWithTag(tag) end
--[[
	@methodName CS.System.String
	@value CS.System.Object
	@options CS.UnityEngine.SendMessageOptions
--]]
function CS.UnityEngine.GameObject:SendMessageUpwards(methodName,value,options) end
--[[
	@methodName CS.System.String
	@value CS.System.Object
--]]
function CS.UnityEngine.GameObject:SendMessageUpwards(methodName,value) end
--[[
	@methodName CS.System.String
--]]
function CS.UnityEngine.GameObject:SendMessageUpwards(methodName) end
--[[
	@methodName CS.System.String
	@options CS.UnityEngine.SendMessageOptions
--]]
function CS.UnityEngine.GameObject:SendMessageUpwards(methodName,options) end
--[[
	@methodName CS.System.String
	@value CS.System.Object
	@options CS.UnityEngine.SendMessageOptions
--]]
function CS.UnityEngine.GameObject:SendMessage(methodName,value,options) end
--[[
	@methodName CS.System.String
	@value CS.System.Object
--]]
function CS.UnityEngine.GameObject:SendMessage(methodName,value) end
--[[
	@methodName CS.System.String
--]]
function CS.UnityEngine.GameObject:SendMessage(methodName) end
--[[
	@methodName CS.System.String
	@options CS.UnityEngine.SendMessageOptions
--]]
function CS.UnityEngine.GameObject:SendMessage(methodName,options) end
--[[
	@methodName CS.System.String
	@parameter CS.System.Object
	@options CS.UnityEngine.SendMessageOptions
--]]
function CS.UnityEngine.GameObject:BroadcastMessage(methodName,parameter,options) end
--[[
	@methodName CS.System.String
	@parameter CS.System.Object
--]]
function CS.UnityEngine.GameObject:BroadcastMessage(methodName,parameter) end
--[[
	@methodName CS.System.String
--]]
function CS.UnityEngine.GameObject:BroadcastMessage(methodName) end
--[[
	@methodName CS.System.String
	@options CS.UnityEngine.SendMessageOptions
--]]
function CS.UnityEngine.GameObject:BroadcastMessage(methodName,options) end
--[[
	@componentType CS.System.Type
	@return [luaIde#CS.UnityEngine.Component]
--]]
function CS.UnityEngine.GameObject:AddComponent(componentType) end
--[[
	@name CS.System.String
	@return [luaIde#CS.UnityEngine.GameObject]
--]]
function CS.UnityEngine.GameObject:Find(name) end
--[[
	@clip CS.UnityEngine.Object
	@time CS.System.Single
--]]
function CS.UnityEngine.GameObject:SampleAnimation(clip,time) end
--[[
	@className CS.System.String
	@return [luaIde#CS.UnityEngine.Component]
--]]
function CS.UnityEngine.GameObject:AddComponent(className) end
--[[
	@animation CS.UnityEngine.Object
--]]
function CS.UnityEngine.GameObject:PlayAnimation(animation) end
function CS.UnityEngine.GameObject:StopAnimation() end

--@SuperType [luaIde#CS.UnityEngine.Object]
CS.UnityEngine.Component = {}
--[[
	@return [luaIde#CS.UnityEngine.Component]
]]
function CS.UnityEngine.Component() end
--[[
	@RefType [luaIde#CS.UnityEngine.Transform]
	 Get 
--]]
CS.UnityEngine.Component.transform = nil
--[[
	@RefType [luaIde#CS.UnityEngine.GameObject]
	 Get 
--]]
CS.UnityEngine.Component.gameObject = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.UnityEngine.Component.tag = nil
--[[
	@type CS.System.Type
	@return [luaIde#CS.UnityEngine.Component]
--]]
function CS.UnityEngine.Component:GetComponent(type) end
--[[
	@type CS.System.String
	@return [luaIde#CS.UnityEngine.Component]
--]]
function CS.UnityEngine.Component:GetComponent(type) end
--[[
	@t CS.System.Type
	@includeInactive CS.System.Boolean
	@return [luaIde#CS.UnityEngine.Component]
--]]
function CS.UnityEngine.Component:GetComponentInChildren(t,includeInactive) end
--[[
	@t CS.System.Type
	@return [luaIde#CS.UnityEngine.Component]
--]]
function CS.UnityEngine.Component:GetComponentInChildren(t) end
--[[
	@t CS.System.Type
	return CS.UnityEngine.Component{}
--]]
function CS.UnityEngine.Component:GetComponentsInChildren(t) end
--[[
	@t CS.System.Type
	@includeInactive CS.System.Boolean
	return CS.UnityEngine.Component{}
--]]
function CS.UnityEngine.Component:GetComponentsInChildren(t,includeInactive) end
--[[
	@t CS.System.Type
	@return [luaIde#CS.UnityEngine.Component]
--]]
function CS.UnityEngine.Component:GetComponentInParent(t) end
--[[
	@t CS.System.Type
	return CS.UnityEngine.Component{}
--]]
function CS.UnityEngine.Component:GetComponentsInParent(t) end
--[[
	@t CS.System.Type
	@includeInactive CS.System.Boolean
	return CS.UnityEngine.Component{}
--]]
function CS.UnityEngine.Component:GetComponentsInParent(t,includeInactive) end
--[[
	@type CS.System.Type
	return CS.UnityEngine.Component{}
--]]
function CS.UnityEngine.Component:GetComponents(type) end
--[[
	@type CS.System.Type
	@results CS.System.Collections.Generic.List`1{{UnityEngine.Component, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Component:GetComponents(type,results) end
--[[
	@tag CS.System.String
	return CS.System.Boolean
--]]
function CS.UnityEngine.Component:CompareTag(tag) end
--[[
	@methodName CS.System.String
	@value CS.System.Object
	@options CS.UnityEngine.SendMessageOptions
--]]
function CS.UnityEngine.Component:SendMessageUpwards(methodName,value,options) end
--[[
	@methodName CS.System.String
	@value CS.System.Object
--]]
function CS.UnityEngine.Component:SendMessageUpwards(methodName,value) end
--[[
	@methodName CS.System.String
--]]
function CS.UnityEngine.Component:SendMessageUpwards(methodName) end
--[[
	@methodName CS.System.String
	@options CS.UnityEngine.SendMessageOptions
--]]
function CS.UnityEngine.Component:SendMessageUpwards(methodName,options) end
--[[
	@methodName CS.System.String
	@value CS.System.Object
	@options CS.UnityEngine.SendMessageOptions
--]]
function CS.UnityEngine.Component:SendMessage(methodName,value,options) end
--[[
	@methodName CS.System.String
	@value CS.System.Object
--]]
function CS.UnityEngine.Component:SendMessage(methodName,value) end
--[[
	@methodName CS.System.String
--]]
function CS.UnityEngine.Component:SendMessage(methodName) end
--[[
	@methodName CS.System.String
	@options CS.UnityEngine.SendMessageOptions
--]]
function CS.UnityEngine.Component:SendMessage(methodName,options) end
--[[
	@methodName CS.System.String
	@parameter CS.System.Object
	@options CS.UnityEngine.SendMessageOptions
--]]
function CS.UnityEngine.Component:BroadcastMessage(methodName,parameter,options) end
--[[
	@methodName CS.System.String
	@parameter CS.System.Object
--]]
function CS.UnityEngine.Component:BroadcastMessage(methodName,parameter) end
--[[
	@methodName CS.System.String
--]]
function CS.UnityEngine.Component:BroadcastMessage(methodName) end
--[[
	@methodName CS.System.String
	@options CS.UnityEngine.SendMessageOptions
--]]
function CS.UnityEngine.Component:BroadcastMessage(methodName,options) end

--@SuperType [luaIde#CS.UnityEngine.Component]
CS.UnityEngine.Behaviour = {}
--[[
	@return [luaIde#CS.UnityEngine.Behaviour]
]]
function CS.UnityEngine.Behaviour() end
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Behaviour.enabled = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.Behaviour.isActiveAndEnabled = nil

--@SuperType [luaIde#CS.UnityEngine.Component]
CS.UnityEngine.Transform = {}
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.Transform.position = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.Transform.localPosition = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.Transform.eulerAngles = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.Transform.localEulerAngles = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.Transform.right = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.Transform.up = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.Transform.forward = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Quaternion]
	 Get 	 Set 
--]]
CS.UnityEngine.Transform.rotation = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Quaternion]
	 Get 	 Set 
--]]
CS.UnityEngine.Transform.localRotation = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.Transform.localScale = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Transform]
	 Get 	 Set 
--]]
CS.UnityEngine.Transform.parent = nil
--[[
	CS.UnityEngine.Matrix4x4
	 Get 
--]]
CS.UnityEngine.Transform.worldToLocalMatrix = nil
--[[
	CS.UnityEngine.Matrix4x4
	 Get 
--]]
CS.UnityEngine.Transform.localToWorldMatrix = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Transform]
	 Get 
--]]
CS.UnityEngine.Transform.root = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.Transform.childCount = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 
--]]
CS.UnityEngine.Transform.lossyScale = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Transform.hasChanged = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.Transform.hierarchyCapacity = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.Transform.hierarchyCount = nil
--[[
	@parent CS.UnityEngine.Transform
--]]
function CS.UnityEngine.Transform:SetParent(parent) end
--[[
	@parent CS.UnityEngine.Transform
	@worldPositionStays CS.System.Boolean
--]]
function CS.UnityEngine.Transform:SetParent(parent,worldPositionStays) end
--[[
	@position CS.UnityEngine.Vector3
	@rotation CS.UnityEngine.Quaternion
--]]
function CS.UnityEngine.Transform:SetPositionAndRotation(position,rotation) end
--[[
	@translation CS.UnityEngine.Vector3
--]]
function CS.UnityEngine.Transform:Translate(translation) end
--[[
	@translation CS.UnityEngine.Vector3
	@relativeTo CS.UnityEngine.Space
--]]
function CS.UnityEngine.Transform:Translate(translation,relativeTo) end
--[[
	@x CS.System.Single
	@y CS.System.Single
	@z CS.System.Single
--]]
function CS.UnityEngine.Transform:Translate(x,y,z) end
--[[
	@x CS.System.Single
	@y CS.System.Single
	@z CS.System.Single
	@relativeTo CS.UnityEngine.Space
--]]
function CS.UnityEngine.Transform:Translate(x,y,z,relativeTo) end
--[[
	@translation CS.UnityEngine.Vector3
	@relativeTo CS.UnityEngine.Transform
--]]
function CS.UnityEngine.Transform:Translate(translation,relativeTo) end
--[[
	@x CS.System.Single
	@y CS.System.Single
	@z CS.System.Single
	@relativeTo CS.UnityEngine.Transform
--]]
function CS.UnityEngine.Transform:Translate(x,y,z,relativeTo) end
--[[
	@eulerAngles CS.UnityEngine.Vector3
--]]
function CS.UnityEngine.Transform:Rotate(eulerAngles) end
--[[
	@eulerAngles CS.UnityEngine.Vector3
	@relativeTo CS.UnityEngine.Space
--]]
function CS.UnityEngine.Transform:Rotate(eulerAngles,relativeTo) end
--[[
	@xAngle CS.System.Single
	@yAngle CS.System.Single
	@zAngle CS.System.Single
--]]
function CS.UnityEngine.Transform:Rotate(xAngle,yAngle,zAngle) end
--[[
	@xAngle CS.System.Single
	@yAngle CS.System.Single
	@zAngle CS.System.Single
	@relativeTo CS.UnityEngine.Space
--]]
function CS.UnityEngine.Transform:Rotate(xAngle,yAngle,zAngle,relativeTo) end
--[[
	@axis CS.UnityEngine.Vector3
	@angle CS.System.Single
--]]
function CS.UnityEngine.Transform:Rotate(axis,angle) end
--[[
	@axis CS.UnityEngine.Vector3
	@angle CS.System.Single
	@relativeTo CS.UnityEngine.Space
--]]
function CS.UnityEngine.Transform:Rotate(axis,angle,relativeTo) end
--[[
	@point CS.UnityEngine.Vector3
	@axis CS.UnityEngine.Vector3
	@angle CS.System.Single
--]]
function CS.UnityEngine.Transform:RotateAround(point,axis,angle) end
--[[
	@target CS.UnityEngine.Transform
--]]
function CS.UnityEngine.Transform:LookAt(target) end
--[[
	@target CS.UnityEngine.Transform
	@worldUp CS.UnityEngine.Vector3
--]]
function CS.UnityEngine.Transform:LookAt(target,worldUp) end
--[[
	@worldPosition CS.UnityEngine.Vector3
	@worldUp CS.UnityEngine.Vector3
--]]
function CS.UnityEngine.Transform:LookAt(worldPosition,worldUp) end
--[[
	@worldPosition CS.UnityEngine.Vector3
--]]
function CS.UnityEngine.Transform:LookAt(worldPosition) end
--[[
	@direction CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Transform:TransformDirection(direction) end
--[[
	@x CS.System.Single
	@y CS.System.Single
	@z CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Transform:TransformDirection(x,y,z) end
--[[
	@direction CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Transform:InverseTransformDirection(direction) end
--[[
	@x CS.System.Single
	@y CS.System.Single
	@z CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Transform:InverseTransformDirection(x,y,z) end
--[[
	@vector CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Transform:TransformVector(vector) end
--[[
	@x CS.System.Single
	@y CS.System.Single
	@z CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Transform:TransformVector(x,y,z) end
--[[
	@vector CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Transform:InverseTransformVector(vector) end
--[[
	@x CS.System.Single
	@y CS.System.Single
	@z CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Transform:InverseTransformVector(x,y,z) end
--[[
	@position CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Transform:TransformPoint(position) end
--[[
	@x CS.System.Single
	@y CS.System.Single
	@z CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Transform:TransformPoint(x,y,z) end
--[[
	@position CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Transform:InverseTransformPoint(position) end
--[[
	@x CS.System.Single
	@y CS.System.Single
	@z CS.System.Single
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Transform:InverseTransformPoint(x,y,z) end
function CS.UnityEngine.Transform:DetachChildren() end
function CS.UnityEngine.Transform:SetAsFirstSibling() end
function CS.UnityEngine.Transform:SetAsLastSibling() end
--[[
	@index CS.System.Int32
--]]
function CS.UnityEngine.Transform:SetSiblingIndex(index) end
function CS.UnityEngine.Transform:GetSiblingIndex() end
--[[
	@name CS.System.String
	@return [luaIde#CS.UnityEngine.Transform]
--]]
function CS.UnityEngine.Transform:Find(name) end
--[[
	@parent CS.UnityEngine.Transform
	return CS.System.Boolean
--]]
function CS.UnityEngine.Transform:IsChildOf(parent) end
--[[
	@name CS.System.String
	@return [luaIde#CS.UnityEngine.Transform]
--]]
function CS.UnityEngine.Transform:FindChild(name) end
function CS.UnityEngine.Transform:GetEnumerator() end
--[[
	@axis CS.UnityEngine.Vector3
	@angle CS.System.Single
--]]
function CS.UnityEngine.Transform:RotateAround(axis,angle) end
--[[
	@axis CS.UnityEngine.Vector3
	@angle CS.System.Single
--]]
function CS.UnityEngine.Transform:RotateAroundLocal(axis,angle) end
--[[
	@index CS.System.Int32
	@return [luaIde#CS.UnityEngine.Transform]
--]]
function CS.UnityEngine.Transform:GetChild(index) end
function CS.UnityEngine.Transform:GetChildCount() end

--@SuperType [luaIde#CS.System.Object]
CS.UnityEngine.Resources = {}
--[[
	@return [luaIde#CS.UnityEngine.Resources]
]]
function CS.UnityEngine.Resources() end
--[[
	@type CS.System.Type
	return CS.UnityEngine.Object{}
--]]
function CS.UnityEngine.Resources:FindObjectsOfTypeAll(type) end
--[[
	@path CS.System.String
	@return [luaIde#CS.UnityEngine.Object]
--]]
function CS.UnityEngine.Resources:Load(path) end
--[[
	@path CS.System.String
	@systemTypeInstance CS.System.Type
	@return [luaIde#CS.UnityEngine.Object]
--]]
function CS.UnityEngine.Resources:Load(path,systemTypeInstance) end
--[[
	@path CS.System.String
	return CS.UnityEngine.ResourceRequest
--]]
function CS.UnityEngine.Resources:LoadAsync(path) end
--[[
	@path CS.System.String
	@type CS.System.Type
	return CS.UnityEngine.ResourceRequest
--]]
function CS.UnityEngine.Resources:LoadAsync(path,type) end
--[[
	@path CS.System.String
	@systemTypeInstance CS.System.Type
	return CS.UnityEngine.Object{}
--]]
function CS.UnityEngine.Resources:LoadAll(path,systemTypeInstance) end
--[[
	@path CS.System.String
	return CS.UnityEngine.Object{}
--]]
function CS.UnityEngine.Resources:LoadAll(path) end
--[[
	@type CS.System.Type
	@path CS.System.String
	@return [luaIde#CS.UnityEngine.Object]
--]]
function CS.UnityEngine.Resources:GetBuiltinResource(type,path) end
--[[
	@assetToUnload CS.UnityEngine.Object
--]]
function CS.UnityEngine.Resources:UnloadAsset(assetToUnload) end
function CS.UnityEngine.Resources:UnloadUnusedAssets() end
--[[
	@assetPath CS.System.String
	@type CS.System.Type
	@return [luaIde#CS.UnityEngine.Object]
--]]
function CS.UnityEngine.Resources:LoadAssetAtPath(assetPath,type) end

--@SuperType [luaIde#CS.UnityEngine.Object]
CS.UnityEngine.TextAsset = {}
--[[
	@return [luaIde#CS.UnityEngine.TextAsset]
]]
function CS.UnityEngine.TextAsset() end
--[[
	CS.System.String
	 Get 
--]]
CS.UnityEngine.TextAsset.text = nil
--[[
	CS.System.Byte{}
	 Get 
--]]
CS.UnityEngine.TextAsset.bytes = nil
function CS.UnityEngine.TextAsset:ToString() end

--@SuperType [luaIde#CS.UnityEngine.Object]
CS.UnityEngine.Material = {}
--[[
	@contents CS.System.String
	@return [luaIde#CS.UnityEngine.Material]
]]
function CS.UnityEngine.Material(contents) end
--[[
	@shader CS.UnityEngine.Shader
	@return [luaIde#CS.UnityEngine.Material]
]]
function CS.UnityEngine.Material(shader) end
--[[
	@source CS.UnityEngine.Material
	@return [luaIde#CS.UnityEngine.Material]
]]
function CS.UnityEngine.Material(source) end
--[[
	CS.UnityEngine.Shader
	 Get 	 Set 
--]]
CS.UnityEngine.Material.shader = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 	 Set 
--]]
CS.UnityEngine.Material.color = nil
--[[
	CS.UnityEngine.Texture
	 Get 	 Set 
--]]
CS.UnityEngine.Material.mainTexture = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.Material.mainTextureOffset = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.Material.mainTextureScale = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.Material.passCount = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.Material.renderQueue = nil
--[[
	CS.System.String{}
	 Get 	 Set 
--]]
CS.UnityEngine.Material.shaderKeywords = nil
--[[
	CS.UnityEngine.MaterialGlobalIlluminationFlags
	 Get 	 Set 
--]]
CS.UnityEngine.Material.globalIlluminationFlags = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Material.enableInstancing = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Material.doubleSidedGI = nil
--[[
	@propertyName CS.System.String
	return CS.System.Boolean
--]]
function CS.UnityEngine.Material:HasProperty(propertyName) end
--[[
	@nameID CS.System.Int32
	return CS.System.Boolean
--]]
function CS.UnityEngine.Material:HasProperty(nameID) end
--[[
	@tag CS.System.String
	@searchFallbacks CS.System.Boolean
	@defaultValue CS.System.String
	return CS.System.String
--]]
function CS.UnityEngine.Material:GetTag(tag,searchFallbacks,defaultValue) end
--[[
	@tag CS.System.String
	@searchFallbacks CS.System.Boolean
	return CS.System.String
--]]
function CS.UnityEngine.Material:GetTag(tag,searchFallbacks) end
--[[
	@tag CS.System.String
	@val CS.System.String
--]]
function CS.UnityEngine.Material:SetOverrideTag(tag,val) end
--[[
	@passName CS.System.String
	@enabled CS.System.Boolean
--]]
function CS.UnityEngine.Material:SetShaderPassEnabled(passName,enabled) end
--[[
	@passName CS.System.String
	return CS.System.Boolean
--]]
function CS.UnityEngine.Material:GetShaderPassEnabled(passName) end
--[[
	@start CS.UnityEngine.Material
	@end_ CS.UnityEngine.Material
	@t CS.System.Single
--]]
function CS.UnityEngine.Material:Lerp(start,end_,t) end
--[[
	@pass CS.System.Int32
	return CS.System.Boolean
--]]
function CS.UnityEngine.Material:SetPass(pass) end
--[[
	@pass CS.System.Int32
	return CS.System.String
--]]
function CS.UnityEngine.Material:GetPassName(pass) end
--[[
	@passName CS.System.String
	return CS.System.Int32
--]]
function CS.UnityEngine.Material:FindPass(passName) end
--[[
	@scriptContents CS.System.String
	@return [luaIde#CS.UnityEngine.Material]
--]]
function CS.UnityEngine.Material:Create(scriptContents) end
--[[
	@mat CS.UnityEngine.Material
--]]
function CS.UnityEngine.Material:CopyPropertiesFromMaterial(mat) end
--[[
	@keyword CS.System.String
--]]
function CS.UnityEngine.Material:EnableKeyword(keyword) end
--[[
	@keyword CS.System.String
--]]
function CS.UnityEngine.Material:DisableKeyword(keyword) end
--[[
	@keyword CS.System.String
	return CS.System.Boolean
--]]
function CS.UnityEngine.Material:IsKeywordEnabled(keyword) end
--[[
	@name CS.System.String
	@value CS.System.Single
--]]
function CS.UnityEngine.Material:SetFloat(name,value) end
--[[
	@nameID CS.System.Int32
	@value CS.System.Single
--]]
function CS.UnityEngine.Material:SetFloat(nameID,value) end
--[[
	@name CS.System.String
	@value CS.System.Int32
--]]
function CS.UnityEngine.Material:SetInt(name,value) end
--[[
	@nameID CS.System.Int32
	@value CS.System.Int32
--]]
function CS.UnityEngine.Material:SetInt(nameID,value) end
--[[
	@name CS.System.String
	@value CS.UnityEngine.Color
--]]
function CS.UnityEngine.Material:SetColor(name,value) end
--[[
	@nameID CS.System.Int32
	@value CS.UnityEngine.Color
--]]
function CS.UnityEngine.Material:SetColor(nameID,value) end
--[[
	@name CS.System.String
	@value CS.UnityEngine.Vector4
--]]
function CS.UnityEngine.Material:SetVector(name,value) end
--[[
	@nameID CS.System.Int32
	@value CS.UnityEngine.Vector4
--]]
function CS.UnityEngine.Material:SetVector(nameID,value) end
--[[
	@name CS.System.String
	@value CS.UnityEngine.Matrix4x4
--]]
function CS.UnityEngine.Material:SetMatrix(name,value) end
--[[
	@nameID CS.System.Int32
	@value CS.UnityEngine.Matrix4x4
--]]
function CS.UnityEngine.Material:SetMatrix(nameID,value) end
--[[
	@name CS.System.String
	@value CS.UnityEngine.Texture
--]]
function CS.UnityEngine.Material:SetTexture(name,value) end
--[[
	@nameID CS.System.Int32
	@value CS.UnityEngine.Texture
--]]
function CS.UnityEngine.Material:SetTexture(nameID,value) end
--[[
	@name CS.System.String
	@value CS.UnityEngine.ComputeBuffer
--]]
function CS.UnityEngine.Material:SetBuffer(name,value) end
--[[
	@nameID CS.System.Int32
	@value CS.UnityEngine.ComputeBuffer
--]]
function CS.UnityEngine.Material:SetBuffer(nameID,value) end
--[[
	@name CS.System.String
	@value CS.UnityEngine.Vector2
--]]
function CS.UnityEngine.Material:SetTextureOffset(name,value) end
--[[
	@nameID CS.System.Int32
	@value CS.UnityEngine.Vector2
--]]
function CS.UnityEngine.Material:SetTextureOffset(nameID,value) end
--[[
	@name CS.System.String
	@value CS.UnityEngine.Vector2
--]]
function CS.UnityEngine.Material:SetTextureScale(name,value) end
--[[
	@nameID CS.System.Int32
	@value CS.UnityEngine.Vector2
--]]
function CS.UnityEngine.Material:SetTextureScale(nameID,value) end
--[[
	@name CS.System.String
	@values CS.System.Collections.Generic.List`1{{System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.UnityEngine.Material:SetFloatArray(name,values) end
--[[
	@nameID CS.System.Int32
	@values CS.System.Collections.Generic.List`1{{System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.UnityEngine.Material:SetFloatArray(nameID,values) end
--[[
	@name CS.System.String
	@values CS.System.Single{}
--]]
function CS.UnityEngine.Material:SetFloatArray(name,values) end
--[[
	@nameID CS.System.Int32
	@values CS.System.Single{}
--]]
function CS.UnityEngine.Material:SetFloatArray(nameID,values) end
--[[
	@name CS.System.String
	@values CS.System.Collections.Generic.List`1{{UnityEngine.Color, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Material:SetColorArray(name,values) end
--[[
	@nameID CS.System.Int32
	@values CS.System.Collections.Generic.List`1{{UnityEngine.Color, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Material:SetColorArray(nameID,values) end
--[[
	@name CS.System.String
	@values CS.UnityEngine.Color{}
--]]
function CS.UnityEngine.Material:SetColorArray(name,values) end
--[[
	@nameID CS.System.Int32
	@values CS.UnityEngine.Color{}
--]]
function CS.UnityEngine.Material:SetColorArray(nameID,values) end
--[[
	@name CS.System.String
	@values CS.System.Collections.Generic.List`1{{UnityEngine.Vector4, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Material:SetVectorArray(name,values) end
--[[
	@nameID CS.System.Int32
	@values CS.System.Collections.Generic.List`1{{UnityEngine.Vector4, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Material:SetVectorArray(nameID,values) end
--[[
	@name CS.System.String
	@values CS.UnityEngine.Vector4{}
--]]
function CS.UnityEngine.Material:SetVectorArray(name,values) end
--[[
	@nameID CS.System.Int32
	@values CS.UnityEngine.Vector4{}
--]]
function CS.UnityEngine.Material:SetVectorArray(nameID,values) end
--[[
	@name CS.System.String
	@values CS.System.Collections.Generic.List`1{{UnityEngine.Matrix4x4, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Material:SetMatrixArray(name,values) end
--[[
	@nameID CS.System.Int32
	@values CS.System.Collections.Generic.List`1{{UnityEngine.Matrix4x4, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Material:SetMatrixArray(nameID,values) end
--[[
	@name CS.System.String
	@values CS.UnityEngine.Matrix4x4{}
--]]
function CS.UnityEngine.Material:SetMatrixArray(name,values) end
--[[
	@nameID CS.System.Int32
	@values CS.UnityEngine.Matrix4x4{}
--]]
function CS.UnityEngine.Material:SetMatrixArray(nameID,values) end
--[[
	@name CS.System.String
	return CS.System.Single
--]]
function CS.UnityEngine.Material:GetFloat(name) end
--[[
	@nameID CS.System.Int32
	return CS.System.Single
--]]
function CS.UnityEngine.Material:GetFloat(nameID) end
--[[
	@name CS.System.String
	return CS.System.Int32
--]]
function CS.UnityEngine.Material:GetInt(name) end
--[[
	@nameID CS.System.Int32
	return CS.System.Int32
--]]
function CS.UnityEngine.Material:GetInt(nameID) end
--[[
	@name CS.System.String
	@return [luaIde#CS.UnityEngine.Color]
--]]
function CS.UnityEngine.Material:GetColor(name) end
--[[
	@nameID CS.System.Int32
	@return [luaIde#CS.UnityEngine.Color]
--]]
function CS.UnityEngine.Material:GetColor(nameID) end
--[[
	@name CS.System.String
	@return [luaIde#CS.UnityEngine.Vector4]
--]]
function CS.UnityEngine.Material:GetVector(name) end
--[[
	@nameID CS.System.Int32
	@return [luaIde#CS.UnityEngine.Vector4]
--]]
function CS.UnityEngine.Material:GetVector(nameID) end
--[[
	@name CS.System.String
	return CS.UnityEngine.Matrix4x4
--]]
function CS.UnityEngine.Material:GetMatrix(name) end
--[[
	@nameID CS.System.Int32
	return CS.UnityEngine.Matrix4x4
--]]
function CS.UnityEngine.Material:GetMatrix(nameID) end
--[[
	@name CS.System.String
	@values CS.System.Collections.Generic.List`1{{System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.UnityEngine.Material:GetFloatArray(name,values) end
--[[
	@nameID CS.System.Int32
	@values CS.System.Collections.Generic.List`1{{System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.UnityEngine.Material:GetFloatArray(nameID,values) end
--[[
	@name CS.System.String
	return CS.System.Single{}
--]]
function CS.UnityEngine.Material:GetFloatArray(name) end
--[[
	@nameID CS.System.Int32
	return CS.System.Single{}
--]]
function CS.UnityEngine.Material:GetFloatArray(nameID) end
--[[
	@name CS.System.String
	@values CS.System.Collections.Generic.List`1{{UnityEngine.Vector4, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Material:GetVectorArray(name,values) end
--[[
	@nameID CS.System.Int32
	@values CS.System.Collections.Generic.List`1{{UnityEngine.Vector4, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Material:GetVectorArray(nameID,values) end
--[[
	@name CS.System.String
	return CS.UnityEngine.Color{}
--]]
function CS.UnityEngine.Material:GetColorArray(name) end
--[[
	@nameID CS.System.Int32
	return CS.UnityEngine.Color{}
--]]
function CS.UnityEngine.Material:GetColorArray(nameID) end
--[[
	@name CS.System.String
	@values CS.System.Collections.Generic.List`1{{UnityEngine.Color, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Material:GetColorArray(name,values) end
--[[
	@nameID CS.System.Int32
	@values CS.System.Collections.Generic.List`1{{UnityEngine.Color, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Material:GetColorArray(nameID,values) end
--[[
	@name CS.System.String
	return CS.UnityEngine.Vector4{}
--]]
function CS.UnityEngine.Material:GetVectorArray(name) end
--[[
	@nameID CS.System.Int32
	return CS.UnityEngine.Vector4{}
--]]
function CS.UnityEngine.Material:GetVectorArray(nameID) end
--[[
	@name CS.System.String
	@values CS.System.Collections.Generic.List`1{{UnityEngine.Matrix4x4, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Material:GetMatrixArray(name,values) end
--[[
	@nameID CS.System.Int32
	@values CS.System.Collections.Generic.List`1{{UnityEngine.Matrix4x4, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Material:GetMatrixArray(nameID,values) end
--[[
	@name CS.System.String
	return CS.UnityEngine.Matrix4x4{}
--]]
function CS.UnityEngine.Material:GetMatrixArray(name) end
--[[
	@nameID CS.System.Int32
	return CS.UnityEngine.Matrix4x4{}
--]]
function CS.UnityEngine.Material:GetMatrixArray(nameID) end
--[[
	@name CS.System.String
	return CS.UnityEngine.Texture
--]]
function CS.UnityEngine.Material:GetTexture(name) end
--[[
	@nameID CS.System.Int32
	return CS.UnityEngine.Texture
--]]
function CS.UnityEngine.Material:GetTexture(nameID) end
--[[
	@name CS.System.String
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Material:GetTextureOffset(name) end
--[[
	@nameID CS.System.Int32
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Material:GetTextureOffset(nameID) end
--[[
	@name CS.System.String
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Material:GetTextureScale(name) end
--[[
	@nameID CS.System.Int32
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.Material:GetTextureScale(nameID) end

--@SuperType [luaIde#CS.UnityEngine.Object]
CS.UnityEngine.Mesh = {}
--[[
	@return [luaIde#CS.UnityEngine.Mesh]
]]
function CS.UnityEngine.Mesh() end
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.Mesh.isReadable = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.Mesh.blendShapeCount = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.Mesh.vertexBufferCount = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Bounds]
	 Get 	 Set 
--]]
CS.UnityEngine.Mesh.bounds = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.Mesh.vertexCount = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.Mesh.subMeshCount = nil
--[[
	CS.UnityEngine.BoneWeight{}
	 Get 	 Set 
--]]
CS.UnityEngine.Mesh.boneWeights = nil
--[[
	CS.UnityEngine.Matrix4x4{}
	 Get 	 Set 
--]]
CS.UnityEngine.Mesh.bindposes = nil
--[[
	CS.UnityEngine.Vector3{}
	 Get 	 Set 
--]]
CS.UnityEngine.Mesh.vertices = nil
--[[
	CS.UnityEngine.Vector3{}
	 Get 	 Set 
--]]
CS.UnityEngine.Mesh.normals = nil
--[[
	CS.UnityEngine.Vector4{}
	 Get 	 Set 
--]]
CS.UnityEngine.Mesh.tangents = nil
--[[
	CS.UnityEngine.Vector2{}
	 Get 	 Set 
--]]
CS.UnityEngine.Mesh.uv = nil
--[[
	CS.UnityEngine.Vector2{}
	 Get 	 Set 
--]]
CS.UnityEngine.Mesh.uv2 = nil
--[[
	CS.UnityEngine.Vector2{}
	 Get 	 Set 
--]]
CS.UnityEngine.Mesh.uv3 = nil
--[[
	CS.UnityEngine.Vector2{}
	 Get 	 Set 
--]]
CS.UnityEngine.Mesh.uv4 = nil
--[[
	CS.UnityEngine.Color{}
	 Get 	 Set 
--]]
CS.UnityEngine.Mesh.colors = nil
--[[
	CS.UnityEngine.Color32{}
	 Get 	 Set 
--]]
CS.UnityEngine.Mesh.colors32 = nil
--[[
	CS.System.Int32{}
	 Get 	 Set 
--]]
CS.UnityEngine.Mesh.triangles = nil
--[[
	@keepVertexLayout CS.System.Boolean
--]]
function CS.UnityEngine.Mesh:Clear(keepVertexLayout) end
function CS.UnityEngine.Mesh:Clear() end
--[[
	@triangles CS.System.Int32{}
	@submesh CS.System.Int32
--]]
function CS.UnityEngine.Mesh:SetTriangles(triangles,submesh) end
--[[
	@triangles CS.System.Int32{}
	@submesh CS.System.Int32
	@calculateBounds CS.System.Boolean
--]]
function CS.UnityEngine.Mesh:SetTriangles(triangles,submesh,calculateBounds) end
--[[
	@triangles CS.System.Collections.Generic.List`1{{System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@submesh CS.System.Int32
--]]
function CS.UnityEngine.Mesh:SetTriangles(triangles,submesh) end
--[[
	@triangles CS.System.Collections.Generic.List`1{{System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@submesh CS.System.Int32
	@calculateBounds CS.System.Boolean
--]]
function CS.UnityEngine.Mesh:SetTriangles(triangles,submesh,calculateBounds) end
--[[
	@indices CS.System.Int32{}
	@topology CS.UnityEngine.MeshTopology
	@submesh CS.System.Int32
--]]
function CS.UnityEngine.Mesh:SetIndices(indices,topology,submesh) end
--[[
	@indices CS.System.Int32{}
	@topology CS.UnityEngine.MeshTopology
	@submesh CS.System.Int32
	@calculateBounds CS.System.Boolean
--]]
function CS.UnityEngine.Mesh:SetIndices(indices,topology,submesh,calculateBounds) end
function CS.UnityEngine.Mesh:ClearBlendShapes() end
--[[
	@shapeIndex CS.System.Int32
	return CS.System.String
--]]
function CS.UnityEngine.Mesh:GetBlendShapeName(shapeIndex) end
--[[
	@shapeIndex CS.System.Int32
	return CS.System.Int32
--]]
function CS.UnityEngine.Mesh:GetBlendShapeFrameCount(shapeIndex) end
--[[
	@shapeIndex CS.System.Int32
	@frameIndex CS.System.Int32
	return CS.System.Single
--]]
function CS.UnityEngine.Mesh:GetBlendShapeFrameWeight(shapeIndex,frameIndex) end
--[[
	@shapeIndex CS.System.Int32
	@frameIndex CS.System.Int32
	@deltaVertices CS.UnityEngine.Vector3{}
	@deltaNormals CS.UnityEngine.Vector3{}
	@deltaTangents CS.UnityEngine.Vector3{}
--]]
function CS.UnityEngine.Mesh:GetBlendShapeFrameVertices(shapeIndex,frameIndex,deltaVertices,deltaNormals,deltaTangents) end
--[[
	@shapeName CS.System.String
	@frameWeight CS.System.Single
	@deltaVertices CS.UnityEngine.Vector3{}
	@deltaNormals CS.UnityEngine.Vector3{}
	@deltaTangents CS.UnityEngine.Vector3{}
--]]
function CS.UnityEngine.Mesh:AddBlendShapeFrame(shapeName,frameWeight,deltaVertices,deltaNormals,deltaTangents) end
--[[
	@bufferIndex CS.System.Int32
	return CS.System.IntPtr
--]]
function CS.UnityEngine.Mesh:GetNativeVertexBufferPtr(bufferIndex) end
function CS.UnityEngine.Mesh:GetNativeIndexBufferPtr() end
function CS.UnityEngine.Mesh:RecalculateBounds() end
function CS.UnityEngine.Mesh:RecalculateNormals() end
function CS.UnityEngine.Mesh:RecalculateTangents() end
function CS.UnityEngine.Mesh:Optimize() end
--[[
	@submesh CS.System.Int32
	return CS.UnityEngine.MeshTopology
--]]
function CS.UnityEngine.Mesh:GetTopology(submesh) end
--[[
	@submesh CS.System.Int32
	return CS.System.UInt32
--]]
function CS.UnityEngine.Mesh:GetIndexStart(submesh) end
--[[
	@submesh CS.System.Int32
	return CS.System.UInt32
--]]
function CS.UnityEngine.Mesh:GetIndexCount(submesh) end
--[[
	@combine CS.UnityEngine.CombineInstance{}
	@mergeSubMeshes CS.System.Boolean
	@useMatrices CS.System.Boolean
	@hasLightmapData CS.System.Boolean
--]]
function CS.UnityEngine.Mesh:CombineMeshes(combine,mergeSubMeshes,useMatrices,hasLightmapData) end
--[[
	@combine CS.UnityEngine.CombineInstance{}
	@mergeSubMeshes CS.System.Boolean
	@useMatrices CS.System.Boolean
--]]
function CS.UnityEngine.Mesh:CombineMeshes(combine,mergeSubMeshes,useMatrices) end
--[[
	@combine CS.UnityEngine.CombineInstance{}
	@mergeSubMeshes CS.System.Boolean
--]]
function CS.UnityEngine.Mesh:CombineMeshes(combine,mergeSubMeshes) end
--[[
	@combine CS.UnityEngine.CombineInstance{}
--]]
function CS.UnityEngine.Mesh:CombineMeshes(combine) end
function CS.UnityEngine.Mesh:MarkDynamic() end
--[[
	@markNoLogerReadable CS.System.Boolean
--]]
function CS.UnityEngine.Mesh:UploadMeshData(markNoLogerReadable) end
--[[
	@blendShapeName CS.System.String
	return CS.System.Int32
--]]
function CS.UnityEngine.Mesh:GetBlendShapeIndex(blendShapeName) end
--[[
	@vertices CS.System.Collections.Generic.List`1{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Mesh:GetVertices(vertices) end
--[[
	@inVertices CS.System.Collections.Generic.List`1{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Mesh:SetVertices(inVertices) end
--[[
	@normals CS.System.Collections.Generic.List`1{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Mesh:GetNormals(normals) end
--[[
	@inNormals CS.System.Collections.Generic.List`1{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Mesh:SetNormals(inNormals) end
--[[
	@tangents CS.System.Collections.Generic.List`1{{UnityEngine.Vector4, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Mesh:GetTangents(tangents) end
--[[
	@inTangents CS.System.Collections.Generic.List`1{{UnityEngine.Vector4, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Mesh:SetTangents(inTangents) end
--[[
	@colors CS.System.Collections.Generic.List`1{{UnityEngine.Color, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Mesh:GetColors(colors) end
--[[
	@inColors CS.System.Collections.Generic.List`1{{UnityEngine.Color, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Mesh:SetColors(inColors) end
--[[
	@colors CS.System.Collections.Generic.List`1{{UnityEngine.Color32, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Mesh:GetColors(colors) end
--[[
	@inColors CS.System.Collections.Generic.List`1{{UnityEngine.Color32, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Mesh:SetColors(inColors) end
--[[
	@channel CS.System.Int32
	@uvs CS.System.Collections.Generic.List`1{{UnityEngine.Vector2, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Mesh:SetUVs(channel,uvs) end
--[[
	@channel CS.System.Int32
	@uvs CS.System.Collections.Generic.List`1{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Mesh:SetUVs(channel,uvs) end
--[[
	@channel CS.System.Int32
	@uvs CS.System.Collections.Generic.List`1{{UnityEngine.Vector4, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Mesh:SetUVs(channel,uvs) end
--[[
	@channel CS.System.Int32
	@uvs CS.System.Collections.Generic.List`1{{UnityEngine.Vector2, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Mesh:GetUVs(channel,uvs) end
--[[
	@channel CS.System.Int32
	@uvs CS.System.Collections.Generic.List`1{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Mesh:GetUVs(channel,uvs) end
--[[
	@channel CS.System.Int32
	@uvs CS.System.Collections.Generic.List`1{{UnityEngine.Vector4, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Mesh:GetUVs(channel,uvs) end
--[[
	@submesh CS.System.Int32
	return CS.System.Int32{}
--]]
function CS.UnityEngine.Mesh:GetTriangles(submesh) end
--[[
	@triangles CS.System.Collections.Generic.List`1{{System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@submesh CS.System.Int32
--]]
function CS.UnityEngine.Mesh:GetTriangles(triangles,submesh) end
--[[
	@submesh CS.System.Int32
	return CS.System.Int32{}
--]]
function CS.UnityEngine.Mesh:GetIndices(submesh) end
--[[
	@indices CS.System.Collections.Generic.List`1{{System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@submesh CS.System.Int32
--]]
function CS.UnityEngine.Mesh:GetIndices(indices,submesh) end
--[[
	@bindposes CS.System.Collections.Generic.List`1{{UnityEngine.Matrix4x4, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Mesh:GetBindposes(bindposes) end
--[[
	@boneWeights CS.System.Collections.Generic.List`1{{UnityEngine.BoneWeight, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Mesh:GetBoneWeights(boneWeights) end

--@SuperType [luaIde#CS.UnityEngine.Texture]
CS.UnityEngine.Texture2D = {}
--[[
	@width CS.System.Int32
	@height CS.System.Int32
	@return [luaIde#CS.UnityEngine.Texture2D]
]]
function CS.UnityEngine.Texture2D(width,height) end
--[[
	@width CS.System.Int32
	@height CS.System.Int32
	@format CS.UnityEngine.TextureFormat
	@mipmap CS.System.Boolean
	@return [luaIde#CS.UnityEngine.Texture2D]
]]
function CS.UnityEngine.Texture2D(width,height,format,mipmap) end
--[[
	@width CS.System.Int32
	@height CS.System.Int32
	@format CS.UnityEngine.TextureFormat
	@mipmap CS.System.Boolean
	@linear CS.System.Boolean
	@return [luaIde#CS.UnityEngine.Texture2D]
]]
function CS.UnityEngine.Texture2D(width,height,format,mipmap,linear) end
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.Texture2D.mipmapCount = nil
--[[
	CS.UnityEngine.TextureFormat
	 Get 
--]]
CS.UnityEngine.Texture2D.format = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Texture2D]
	 Get 
--]]
CS.UnityEngine.Texture2D.whiteTexture = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Texture2D]
	 Get 
--]]
CS.UnityEngine.Texture2D.blackTexture = nil
--[[
	@width CS.System.Int32
	@height CS.System.Int32
	@format CS.UnityEngine.TextureFormat
	@mipmap CS.System.Boolean
	@linear CS.System.Boolean
	@nativeTex CS.System.IntPtr
	@return [luaIde#CS.UnityEngine.Texture2D]
--]]
function CS.UnityEngine.Texture2D:CreateExternalTexture(width,height,format,mipmap,linear,nativeTex) end
--[[
	@nativeTex CS.System.IntPtr
--]]
function CS.UnityEngine.Texture2D:UpdateExternalTexture(nativeTex) end
--[[
	@x CS.System.Int32
	@y CS.System.Int32
	@color CS.UnityEngine.Color
--]]
function CS.UnityEngine.Texture2D:SetPixel(x,y,color) end
--[[
	@x CS.System.Int32
	@y CS.System.Int32
	@return [luaIde#CS.UnityEngine.Color]
--]]
function CS.UnityEngine.Texture2D:GetPixel(x,y) end
--[[
	@u CS.System.Single
	@v CS.System.Single
	@return [luaIde#CS.UnityEngine.Color]
--]]
function CS.UnityEngine.Texture2D:GetPixelBilinear(u,v) end
--[[
	@colors CS.UnityEngine.Color{}
--]]
function CS.UnityEngine.Texture2D:SetPixels(colors) end
--[[
	@colors CS.UnityEngine.Color{}
	@miplevel CS.System.Int32
--]]
function CS.UnityEngine.Texture2D:SetPixels(colors,miplevel) end
--[[
	@x CS.System.Int32
	@y CS.System.Int32
	@blockWidth CS.System.Int32
	@blockHeight CS.System.Int32
	@colors CS.UnityEngine.Color{}
	@miplevel CS.System.Int32
--]]
function CS.UnityEngine.Texture2D:SetPixels(x,y,blockWidth,blockHeight,colors,miplevel) end
--[[
	@x CS.System.Int32
	@y CS.System.Int32
	@blockWidth CS.System.Int32
	@blockHeight CS.System.Int32
	@colors CS.UnityEngine.Color{}
--]]
function CS.UnityEngine.Texture2D:SetPixels(x,y,blockWidth,blockHeight,colors) end
--[[
	@colors CS.UnityEngine.Color32{}
--]]
function CS.UnityEngine.Texture2D:SetPixels32(colors) end
--[[
	@colors CS.UnityEngine.Color32{}
	@miplevel CS.System.Int32
--]]
function CS.UnityEngine.Texture2D:SetPixels32(colors,miplevel) end
--[[
	@x CS.System.Int32
	@y CS.System.Int32
	@blockWidth CS.System.Int32
	@blockHeight CS.System.Int32
	@colors CS.UnityEngine.Color32{}
--]]
function CS.UnityEngine.Texture2D:SetPixels32(x,y,blockWidth,blockHeight,colors) end
--[[
	@x CS.System.Int32
	@y CS.System.Int32
	@blockWidth CS.System.Int32
	@blockHeight CS.System.Int32
	@colors CS.UnityEngine.Color32{}
	@miplevel CS.System.Int32
--]]
function CS.UnityEngine.Texture2D:SetPixels32(x,y,blockWidth,blockHeight,colors,miplevel) end
--[[
	@data CS.System.Byte{}
	@markNonReadable CS.System.Boolean
	return CS.System.Boolean
--]]
function CS.UnityEngine.Texture2D:LoadImage(data,markNonReadable) end
--[[
	@data CS.System.Byte{}
	return CS.System.Boolean
--]]
function CS.UnityEngine.Texture2D:LoadImage(data) end
--[[
	@data CS.System.Byte{}
--]]
function CS.UnityEngine.Texture2D:LoadRawTextureData(data) end
--[[
	@data CS.System.IntPtr
	@size CS.System.Int32
--]]
function CS.UnityEngine.Texture2D:LoadRawTextureData(data,size) end
function CS.UnityEngine.Texture2D:GetRawTextureData() end
function CS.UnityEngine.Texture2D:GetPixels() end
--[[
	@miplevel CS.System.Int32
	return CS.UnityEngine.Color{}
--]]
function CS.UnityEngine.Texture2D:GetPixels(miplevel) end
--[[
	@x CS.System.Int32
	@y CS.System.Int32
	@blockWidth CS.System.Int32
	@blockHeight CS.System.Int32
	@miplevel CS.System.Int32
	return CS.UnityEngine.Color{}
--]]
function CS.UnityEngine.Texture2D:GetPixels(x,y,blockWidth,blockHeight,miplevel) end
--[[
	@x CS.System.Int32
	@y CS.System.Int32
	@blockWidth CS.System.Int32
	@blockHeight CS.System.Int32
	return CS.UnityEngine.Color{}
--]]
function CS.UnityEngine.Texture2D:GetPixels(x,y,blockWidth,blockHeight) end
--[[
	@miplevel CS.System.Int32
	return CS.UnityEngine.Color32{}
--]]
function CS.UnityEngine.Texture2D:GetPixels32(miplevel) end
function CS.UnityEngine.Texture2D:GetPixels32() end
--[[
	@updateMipmaps CS.System.Boolean
	@makeNoLongerReadable CS.System.Boolean
--]]
function CS.UnityEngine.Texture2D:Apply(updateMipmaps,makeNoLongerReadable) end
--[[
	@updateMipmaps CS.System.Boolean
--]]
function CS.UnityEngine.Texture2D:Apply(updateMipmaps) end
function CS.UnityEngine.Texture2D:Apply() end
--[[
	@width CS.System.Int32
	@height CS.System.Int32
	@format CS.UnityEngine.TextureFormat
	@hasMipMap CS.System.Boolean
	return CS.System.Boolean
--]]
function CS.UnityEngine.Texture2D:Resize(width,height,format,hasMipMap) end
--[[
	@width CS.System.Int32
	@height CS.System.Int32
	return CS.System.Boolean
--]]
function CS.UnityEngine.Texture2D:Resize(width,height) end
--[[
	@highQuality CS.System.Boolean
--]]
function CS.UnityEngine.Texture2D:Compress(highQuality) end
--[[
	@textures CS.UnityEngine.Texture2D{}
	@padding CS.System.Int32
	@maximumAtlasSize CS.System.Int32
	@makeNoLongerReadable CS.System.Boolean
	return CS.UnityEngine.Rect{}
--]]
function CS.UnityEngine.Texture2D:PackTextures(textures,padding,maximumAtlasSize,makeNoLongerReadable) end
--[[
	@textures CS.UnityEngine.Texture2D{}
	@padding CS.System.Int32
	@maximumAtlasSize CS.System.Int32
	return CS.UnityEngine.Rect{}
--]]
function CS.UnityEngine.Texture2D:PackTextures(textures,padding,maximumAtlasSize) end
--[[
	@textures CS.UnityEngine.Texture2D{}
	@padding CS.System.Int32
	return CS.UnityEngine.Rect{}
--]]
function CS.UnityEngine.Texture2D:PackTextures(textures,padding) end
--[[
	@sizes CS.UnityEngine.Vector2{}
	@padding CS.System.Int32
	@atlasSize CS.System.Int32
	@results CS.System.Collections.Generic.List`1{{UnityEngine.Rect, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	return CS.System.Boolean
--]]
function CS.UnityEngine.Texture2D:GenerateAtlas(sizes,padding,atlasSize,results) end
--[[
	@source CS.UnityEngine.Rect
	@destX CS.System.Int32
	@destY CS.System.Int32
	@recalculateMipMaps CS.System.Boolean
--]]
function CS.UnityEngine.Texture2D:ReadPixels(source,destX,destY,recalculateMipMaps) end
--[[
	@source CS.UnityEngine.Rect
	@destX CS.System.Int32
	@destY CS.System.Int32
--]]
function CS.UnityEngine.Texture2D:ReadPixels(source,destX,destY) end
function CS.UnityEngine.Texture2D:EncodeToPNG() end
--[[
	@quality CS.System.Int32
	return CS.System.Byte{}
--]]
function CS.UnityEngine.Texture2D:EncodeToJPG(quality) end
function CS.UnityEngine.Texture2D:EncodeToJPG() end
--[[
	@flags CS.UnityEngine.Texture2D.EXRFlags
	return CS.System.Byte{}
--]]
function CS.UnityEngine.Texture2D:EncodeToEXR(flags) end
function CS.UnityEngine.Texture2D:EncodeToEXR() end

--@SuperType [luaIde#CS.UnityEngine.Collider]
CS.UnityEngine.BoxCollider = {}
--[[
	@return [luaIde#CS.UnityEngine.BoxCollider]
]]
function CS.UnityEngine.BoxCollider() end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.BoxCollider.center = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.BoxCollider.size = nil

--@SuperType [luaIde#CS.UnityEngine.Collider2D]
CS.UnityEngine.BoxCollider2D = {}
--[[
	@return [luaIde#CS.UnityEngine.BoxCollider2D]
]]
function CS.UnityEngine.BoxCollider2D() end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.BoxCollider2D.size = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.BoxCollider2D.edgeRadius = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.BoxCollider2D.autoTiling = nil

--@SuperType [luaIde#CS.UnityEngine.Collider2D]
CS.UnityEngine.CircleCollider2D = {}
--[[
	@return [luaIde#CS.UnityEngine.CircleCollider2D]
]]
function CS.UnityEngine.CircleCollider2D() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.CircleCollider2D.radius = nil

--@SuperType [luaIde#CS.UnityEngine.Collider]
CS.UnityEngine.SphereCollider = {}
--[[
	@return [luaIde#CS.UnityEngine.SphereCollider]
]]
function CS.UnityEngine.SphereCollider() end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.SphereCollider.center = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.SphereCollider.radius = nil

--@SuperType [luaIde#CS.UnityEngine.Collider]
CS.UnityEngine.CapsuleCollider = {}
--[[
	@return [luaIde#CS.UnityEngine.CapsuleCollider]
]]
function CS.UnityEngine.CapsuleCollider() end
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.CapsuleCollider.center = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.CapsuleCollider.radius = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.CapsuleCollider.height = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.CapsuleCollider.direction = nil

--@SuperType [luaIde#CS.UnityEngine.Behaviour]
CS.UnityEngine.AudioSource = {}
--[[
	@return [luaIde#CS.UnityEngine.AudioSource]
]]
function CS.UnityEngine.AudioSource() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.volume = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.pitch = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.time = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.timeSamples = nil
--[[
	@RefType [luaIde#CS.UnityEngine.AudioClip]
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.clip = nil
--[[
	CS.UnityEngine.Audio.AudioMixerGroup
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.outputAudioMixerGroup = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.AudioSource.isPlaying = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.AudioSource.isVirtual = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.loop = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.ignoreListenerVolume = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.playOnAwake = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.ignoreListenerPause = nil
--[[
	CS.UnityEngine.AudioVelocityUpdateMode
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.velocityUpdateMode = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.panStereo = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.spatialBlend = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.spatialize = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.spatializePostEffects = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.reverbZoneMix = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.bypassEffects = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.bypassListenerEffects = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.bypassReverbZones = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.dopplerLevel = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.spread = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.priority = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.mute = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.minDistance = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.maxDistance = nil
--[[
	CS.UnityEngine.AudioRolloffMode
	 Get 	 Set 
--]]
CS.UnityEngine.AudioSource.rolloffMode = nil
--[[
	@delay CS.System.UInt64
--]]
function CS.UnityEngine.AudioSource:Play(delay) end
function CS.UnityEngine.AudioSource:Play() end
--[[
	@delay CS.System.Single
--]]
function CS.UnityEngine.AudioSource:PlayDelayed(delay) end
--[[
	@time CS.System.Double
--]]
function CS.UnityEngine.AudioSource:PlayScheduled(time) end
--[[
	@time CS.System.Double
--]]
function CS.UnityEngine.AudioSource:SetScheduledStartTime(time) end
--[[
	@time CS.System.Double
--]]
function CS.UnityEngine.AudioSource:SetScheduledEndTime(time) end
function CS.UnityEngine.AudioSource:Stop() end
function CS.UnityEngine.AudioSource:Pause() end
function CS.UnityEngine.AudioSource:UnPause() end
--[[
	@clip CS.UnityEngine.AudioClip
	@volumeScale CS.System.Single
--]]
function CS.UnityEngine.AudioSource:PlayOneShot(clip,volumeScale) end
--[[
	@clip CS.UnityEngine.AudioClip
--]]
function CS.UnityEngine.AudioSource:PlayOneShot(clip) end
--[[
	@clip CS.UnityEngine.AudioClip
	@position CS.UnityEngine.Vector3
--]]
function CS.UnityEngine.AudioSource:PlayClipAtPoint(clip,position) end
--[[
	@clip CS.UnityEngine.AudioClip
	@position CS.UnityEngine.Vector3
	@volume CS.System.Single
--]]
function CS.UnityEngine.AudioSource:PlayClipAtPoint(clip,position,volume) end
--[[
	@type CS.UnityEngine.AudioSourceCurveType
	@curve CS.UnityEngine.AnimationCurve
--]]
function CS.UnityEngine.AudioSource:SetCustomCurve(type,curve) end
--[[
	@type CS.UnityEngine.AudioSourceCurveType
	@return [luaIde#CS.UnityEngine.AnimationCurve]
--]]
function CS.UnityEngine.AudioSource:GetCustomCurve(type) end
--[[
	@numSamples CS.System.Int32
	@channel CS.System.Int32
	return CS.System.Single{}
--]]
function CS.UnityEngine.AudioSource:GetOutputData(numSamples,channel) end
--[[
	@samples CS.System.Single{}
	@channel CS.System.Int32
--]]
function CS.UnityEngine.AudioSource:GetOutputData(samples,channel) end
--[[
	@numSamples CS.System.Int32
	@channel CS.System.Int32
	@window CS.UnityEngine.FFTWindow
	return CS.System.Single{}
--]]
function CS.UnityEngine.AudioSource:GetSpectrumData(numSamples,channel,window) end
--[[
	@samples CS.System.Single{}
	@channel CS.System.Int32
	@window CS.UnityEngine.FFTWindow
--]]
function CS.UnityEngine.AudioSource:GetSpectrumData(samples,channel,window) end
--[[
	@index CS.System.Int32
	@value CS.System.Single
	return CS.System.Boolean
--]]
function CS.UnityEngine.AudioSource:SetSpatializerFloat(index,value) end
--[[
	@index CS.System.Int32
	@value CS.System.Single&
	return CS.System.Boolean
--]]
function CS.UnityEngine.AudioSource:GetSpatializerFloat(index,value) end

--@SuperType [luaIde#CS.UnityEngine.Object]
CS.UnityEngine.AudioClip = {}
--[[
	@return [luaIde#CS.UnityEngine.AudioClip]
]]
function CS.UnityEngine.AudioClip() end
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.AudioClip.length = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.AudioClip.samples = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.AudioClip.channels = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.AudioClip.frequency = nil
--[[
	CS.UnityEngine.AudioClipLoadType
	 Get 
--]]
CS.UnityEngine.AudioClip.loadType = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.AudioClip.preloadAudioData = nil
--[[
	CS.UnityEngine.AudioDataLoadState
	 Get 
--]]
CS.UnityEngine.AudioClip.loadState = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.AudioClip.loadInBackground = nil
function CS.UnityEngine.AudioClip:LoadAudioData() end
function CS.UnityEngine.AudioClip:UnloadAudioData() end
--[[
	@data CS.System.Single{}
	@offsetSamples CS.System.Int32
	return CS.System.Boolean
--]]
function CS.UnityEngine.AudioClip:GetData(data,offsetSamples) end
--[[
	@data CS.System.Single{}
	@offsetSamples CS.System.Int32
	return CS.System.Boolean
--]]
function CS.UnityEngine.AudioClip:SetData(data,offsetSamples) end
--[[
	@name CS.System.String
	@lengthSamples CS.System.Int32
	@channels CS.System.Int32
	@frequency CS.System.Int32
	@_3D CS.System.Boolean
	@stream CS.System.Boolean
	@return [luaIde#CS.UnityEngine.AudioClip]
--]]
function CS.UnityEngine.AudioClip:Create(name,lengthSamples,channels,frequency,_3D,stream) end
--[[
	@name CS.System.String
	@lengthSamples CS.System.Int32
	@channels CS.System.Int32
	@frequency CS.System.Int32
	@_3D CS.System.Boolean
	@stream CS.System.Boolean
	@pcmreadercallback CS.UnityEngine.AudioClip.PCMReaderCallback
	@return [luaIde#CS.UnityEngine.AudioClip]
--]]
function CS.UnityEngine.AudioClip:Create(name,lengthSamples,channels,frequency,_3D,stream,pcmreadercallback) end
--[[
	@name CS.System.String
	@lengthSamples CS.System.Int32
	@channels CS.System.Int32
	@frequency CS.System.Int32
	@_3D CS.System.Boolean
	@stream CS.System.Boolean
	@pcmreadercallback CS.UnityEngine.AudioClip.PCMReaderCallback
	@pcmsetpositioncallback CS.UnityEngine.AudioClip.PCMSetPositionCallback
	@return [luaIde#CS.UnityEngine.AudioClip]
--]]
function CS.UnityEngine.AudioClip:Create(name,lengthSamples,channels,frequency,_3D,stream,pcmreadercallback,pcmsetpositioncallback) end
--[[
	@name CS.System.String
	@lengthSamples CS.System.Int32
	@channels CS.System.Int32
	@frequency CS.System.Int32
	@stream CS.System.Boolean
	@return [luaIde#CS.UnityEngine.AudioClip]
--]]
function CS.UnityEngine.AudioClip:Create(name,lengthSamples,channels,frequency,stream) end
--[[
	@name CS.System.String
	@lengthSamples CS.System.Int32
	@channels CS.System.Int32
	@frequency CS.System.Int32
	@stream CS.System.Boolean
	@pcmreadercallback CS.UnityEngine.AudioClip.PCMReaderCallback
	@return [luaIde#CS.UnityEngine.AudioClip]
--]]
function CS.UnityEngine.AudioClip:Create(name,lengthSamples,channels,frequency,stream,pcmreadercallback) end
--[[
	@name CS.System.String
	@lengthSamples CS.System.Int32
	@channels CS.System.Int32
	@frequency CS.System.Int32
	@stream CS.System.Boolean
	@pcmreadercallback CS.UnityEngine.AudioClip.PCMReaderCallback
	@pcmsetpositioncallback CS.UnityEngine.AudioClip.PCMSetPositionCallback
	@return [luaIde#CS.UnityEngine.AudioClip]
--]]
function CS.UnityEngine.AudioClip:Create(name,lengthSamples,channels,frequency,stream,pcmreadercallback,pcmsetpositioncallback) end

--@SuperType [luaIde#CS.UnityEngine.Transform]
CS.UnityEngine.RectTransform = {}
--[[
	@return [luaIde#CS.UnityEngine.RectTransform]
]]
function CS.UnityEngine.RectTransform() end
--[[
	@RefType [luaIde#CS.UnityEngine.Rect]
	 Get 
--]]
CS.UnityEngine.RectTransform.rect = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.RectTransform.anchorMin = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.RectTransform.anchorMax = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.RectTransform.anchoredPosition3D = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.RectTransform.anchoredPosition = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.RectTransform.sizeDelta = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.RectTransform.pivot = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.RectTransform.offsetMin = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.RectTransform.offsetMax = nil
--[[
	@value CS.UnityEngine.RectTransform.ReapplyDrivenProperties
--]]
function CS.UnityEngine.RectTransform:add_reapplyDrivenProperties(value) end
--[[
	@value CS.UnityEngine.RectTransform.ReapplyDrivenProperties
--]]
function CS.UnityEngine.RectTransform:remove_reapplyDrivenProperties(value) end
--[[
	@fourCornersArray CS.UnityEngine.Vector3{}
--]]
function CS.UnityEngine.RectTransform:GetLocalCorners(fourCornersArray) end
--[[
	@fourCornersArray CS.UnityEngine.Vector3{}
--]]
function CS.UnityEngine.RectTransform:GetWorldCorners(fourCornersArray) end
--[[
	@edge CS.UnityEngine.RectTransform.Edge
	@inset CS.System.Single
	@size CS.System.Single
--]]
function CS.UnityEngine.RectTransform:SetInsetAndSizeFromParentEdge(edge,inset,size) end
--[[
	@axis CS.UnityEngine.RectTransform.Axis
	@size CS.System.Single
--]]
function CS.UnityEngine.RectTransform:SetSizeWithCurrentAnchors(axis,size) end

--@SuperType [luaIde#CS.System.ValueType]
CS.UnityEngine.Keyframe = {}
--[[
	@time CS.System.Single
	@value CS.System.Single
	@return [luaIde#CS.UnityEngine.Keyframe]
]]
function CS.UnityEngine.Keyframe(time,value) end
--[[
	@time CS.System.Single
	@value CS.System.Single
	@inTangent CS.System.Single
	@outTangent CS.System.Single
	@return [luaIde#CS.UnityEngine.Keyframe]
]]
function CS.UnityEngine.Keyframe(time,value,inTangent,outTangent) end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Keyframe.time = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Keyframe.value = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Keyframe.inTangent = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Keyframe.outTangent = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.Keyframe.tangentMode = nil

--@SuperType [luaIde#CS.System.Object]
CS.UnityEngine.AnimationCurve = {}
--[[
	@keys CS.UnityEngine.Keyframe{}
	@return [luaIde#CS.UnityEngine.AnimationCurve]
]]
function CS.UnityEngine.AnimationCurve(keys) end
--[[
	@return [luaIde#CS.UnityEngine.AnimationCurve]
]]
function CS.UnityEngine.AnimationCurve() end
--[[
	CS.UnityEngine.Keyframe{}
	 Get 	 Set 
--]]
CS.UnityEngine.AnimationCurve.keys = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.AnimationCurve.length = nil
--[[
	CS.UnityEngine.WrapMode
	 Get 	 Set 
--]]
CS.UnityEngine.AnimationCurve.preWrapMode = nil
--[[
	CS.UnityEngine.WrapMode
	 Get 	 Set 
--]]
CS.UnityEngine.AnimationCurve.postWrapMode = nil
--[[
	@time CS.System.Single
	return CS.System.Single
--]]
function CS.UnityEngine.AnimationCurve:Evaluate(time) end
--[[
	@time CS.System.Single
	@value CS.System.Single
	return CS.System.Int32
--]]
function CS.UnityEngine.AnimationCurve:AddKey(time,value) end
--[[
	@key CS.UnityEngine.Keyframe
	return CS.System.Int32
--]]
function CS.UnityEngine.AnimationCurve:AddKey(key) end
--[[
	@index CS.System.Int32
	@key CS.UnityEngine.Keyframe
	return CS.System.Int32
--]]
function CS.UnityEngine.AnimationCurve:MoveKey(index,key) end
--[[
	@index CS.System.Int32
--]]
function CS.UnityEngine.AnimationCurve:RemoveKey(index) end
--[[
	@index CS.System.Int32
	@weight CS.System.Single
--]]
function CS.UnityEngine.AnimationCurve:SmoothTangents(index,weight) end
--[[
	@timeStart CS.System.Single
	@valueStart CS.System.Single
	@timeEnd CS.System.Single
	@valueEnd CS.System.Single
	@return [luaIde#CS.UnityEngine.AnimationCurve]
--]]
function CS.UnityEngine.AnimationCurve:Linear(timeStart,valueStart,timeEnd,valueEnd) end
--[[
	@timeStart CS.System.Single
	@valueStart CS.System.Single
	@timeEnd CS.System.Single
	@valueEnd CS.System.Single
	@return [luaIde#CS.UnityEngine.AnimationCurve]
--]]
function CS.UnityEngine.AnimationCurve:EaseInOut(timeStart,valueStart,timeEnd,valueEnd) end

--@SuperType [luaIde#CS.UnityEngine.Motion]
CS.UnityEngine.AnimationClip = {}
--[[
	@return [luaIde#CS.UnityEngine.AnimationClip]
]]
function CS.UnityEngine.AnimationClip() end
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.AnimationClip.length = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.AnimationClip.frameRate = nil
--[[
	CS.UnityEngine.WrapMode
	 Get 	 Set 
--]]
CS.UnityEngine.AnimationClip.wrapMode = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Bounds]
	 Get 	 Set 
--]]
CS.UnityEngine.AnimationClip.localBounds = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.AnimationClip.legacy = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.AnimationClip.humanMotion = nil
--[[
	CS.UnityEngine.AnimationEvent{}
	 Get 	 Set 
--]]
CS.UnityEngine.AnimationClip.events = nil
--[[
	@go CS.UnityEngine.GameObject
	@time CS.System.Single
--]]
function CS.UnityEngine.AnimationClip:SampleAnimation(go,time) end
--[[
	@relativePath CS.System.String
	@type CS.System.Type
	@propertyName CS.System.String
	@curve CS.UnityEngine.AnimationCurve
--]]
function CS.UnityEngine.AnimationClip:SetCurve(relativePath,type,propertyName,curve) end
function CS.UnityEngine.AnimationClip:EnsureQuaternionContinuity() end
function CS.UnityEngine.AnimationClip:ClearCurves() end
--[[
	@evt CS.UnityEngine.AnimationEvent
--]]
function CS.UnityEngine.AnimationClip:AddEvent(evt) end

--@SuperType [luaIde#CS.UnityEngine.Behaviour]
CS.UnityEngine.MonoBehaviour = {}
--[[
	@return [luaIde#CS.UnityEngine.MonoBehaviour]
]]
function CS.UnityEngine.MonoBehaviour() end
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.MonoBehaviour.useGUILayout = nil
--[[
	@methodName CS.System.String
	@time CS.System.Single
--]]
function CS.UnityEngine.MonoBehaviour:Invoke(methodName,time) end
--[[
	@methodName CS.System.String
	@time CS.System.Single
	@repeatRate CS.System.Single
--]]
function CS.UnityEngine.MonoBehaviour:InvokeRepeating(methodName,time,repeatRate) end
function CS.UnityEngine.MonoBehaviour:CancelInvoke() end
--[[
	@methodName CS.System.String
--]]
function CS.UnityEngine.MonoBehaviour:CancelInvoke(methodName) end
--[[
	@methodName CS.System.String
	return CS.System.Boolean
--]]
function CS.UnityEngine.MonoBehaviour:IsInvoking(methodName) end
function CS.UnityEngine.MonoBehaviour:IsInvoking() end
--[[
	@routine CS.System.Collections.IEnumerator
	return CS.UnityEngine.Coroutine
--]]
function CS.UnityEngine.MonoBehaviour:StartCoroutine(routine) end
--[[
	@routine CS.System.Collections.IEnumerator
	return CS.UnityEngine.Coroutine
--]]
function CS.UnityEngine.MonoBehaviour:StartCoroutine_Auto(routine) end
--[[
	@methodName CS.System.String
	@value CS.System.Object
	return CS.UnityEngine.Coroutine
--]]
function CS.UnityEngine.MonoBehaviour:StartCoroutine(methodName,value) end
--[[
	@methodName CS.System.String
	return CS.UnityEngine.Coroutine
--]]
function CS.UnityEngine.MonoBehaviour:StartCoroutine(methodName) end
--[[
	@methodName CS.System.String
--]]
function CS.UnityEngine.MonoBehaviour:StopCoroutine(methodName) end
--[[
	@routine CS.System.Collections.IEnumerator
--]]
function CS.UnityEngine.MonoBehaviour:StopCoroutine(routine) end
--[[
	@routine CS.UnityEngine.Coroutine
--]]
function CS.UnityEngine.MonoBehaviour:StopCoroutine(routine) end
function CS.UnityEngine.MonoBehaviour:StopAllCoroutines() end
--[[
	@message CS.System.Object
--]]
function CS.UnityEngine.MonoBehaviour:print(message) end

--@SuperType [luaIde#CS.UnityEngine.Component]
CS.UnityEngine.ParticleSystem = {}
--[[
	@return [luaIde#CS.UnityEngine.ParticleSystem]
]]
function CS.UnityEngine.ParticleSystem() end
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.ParticleSystem.isPlaying = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.ParticleSystem.isEmitting = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.ParticleSystem.isStopped = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.ParticleSystem.isPaused = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.ParticleSystem.time = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.ParticleSystem.particleCount = nil
--[[
	CS.System.UInt32
	 Get 	 Set 
--]]
CS.UnityEngine.ParticleSystem.randomSeed = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.ParticleSystem.useAutoRandomSeed = nil
--[[
	CS.UnityEngine.ParticleSystem.MainModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.main = nil
--[[
	CS.UnityEngine.ParticleSystem.EmissionModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.emission = nil
--[[
	CS.UnityEngine.ParticleSystem.ShapeModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.shape = nil
--[[
	CS.UnityEngine.ParticleSystem.VelocityOverLifetimeModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.velocityOverLifetime = nil
--[[
	CS.UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.limitVelocityOverLifetime = nil
--[[
	CS.UnityEngine.ParticleSystem.InheritVelocityModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.inheritVelocity = nil
--[[
	CS.UnityEngine.ParticleSystem.ForceOverLifetimeModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.forceOverLifetime = nil
--[[
	CS.UnityEngine.ParticleSystem.ColorOverLifetimeModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.colorOverLifetime = nil
--[[
	CS.UnityEngine.ParticleSystem.ColorBySpeedModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.colorBySpeed = nil
--[[
	CS.UnityEngine.ParticleSystem.SizeOverLifetimeModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.sizeOverLifetime = nil
--[[
	CS.UnityEngine.ParticleSystem.SizeBySpeedModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.sizeBySpeed = nil
--[[
	CS.UnityEngine.ParticleSystem.RotationOverLifetimeModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.rotationOverLifetime = nil
--[[
	CS.UnityEngine.ParticleSystem.RotationBySpeedModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.rotationBySpeed = nil
--[[
	CS.UnityEngine.ParticleSystem.ExternalForcesModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.externalForces = nil
--[[
	CS.UnityEngine.ParticleSystem.NoiseModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.noise = nil
--[[
	CS.UnityEngine.ParticleSystem.CollisionModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.collision = nil
--[[
	CS.UnityEngine.ParticleSystem.TriggerModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.trigger = nil
--[[
	CS.UnityEngine.ParticleSystem.SubEmittersModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.subEmitters = nil
--[[
	CS.UnityEngine.ParticleSystem.TextureSheetAnimationModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.textureSheetAnimation = nil
--[[
	CS.UnityEngine.ParticleSystem.LightsModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.lights = nil
--[[
	CS.UnityEngine.ParticleSystem.TrailModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.trails = nil
--[[
	CS.UnityEngine.ParticleSystem.CustomDataModule
	 Get 
--]]
CS.UnityEngine.ParticleSystem.customData = nil
--[[
	@particles CS.UnityEngine.ParticleSystem.Particle{}
	@size CS.System.Int32
--]]
function CS.UnityEngine.ParticleSystem:SetParticles(particles,size) end
--[[
	@particles CS.UnityEngine.ParticleSystem.Particle{}
	return CS.System.Int32
--]]
function CS.UnityEngine.ParticleSystem:GetParticles(particles) end
--[[
	@customData CS.System.Collections.Generic.List`1{{UnityEngine.Vector4, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@streamIndex CS.UnityEngine.ParticleSystemCustomData
--]]
function CS.UnityEngine.ParticleSystem:SetCustomParticleData(customData,streamIndex) end
--[[
	@customData CS.System.Collections.Generic.List`1{{UnityEngine.Vector4, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	@streamIndex CS.UnityEngine.ParticleSystemCustomData
	return CS.System.Int32
--]]
function CS.UnityEngine.ParticleSystem:GetCustomParticleData(customData,streamIndex) end
--[[
	@t CS.System.Single
	@withChildren CS.System.Boolean
	@restart CS.System.Boolean
--]]
function CS.UnityEngine.ParticleSystem:Simulate(t,withChildren,restart) end
--[[
	@t CS.System.Single
	@withChildren CS.System.Boolean
--]]
function CS.UnityEngine.ParticleSystem:Simulate(t,withChildren) end
--[[
	@t CS.System.Single
--]]
function CS.UnityEngine.ParticleSystem:Simulate(t) end
--[[
	@t CS.System.Single
	@withChildren CS.System.Boolean
	@restart CS.System.Boolean
	@fixedTimeStep CS.System.Boolean
--]]
function CS.UnityEngine.ParticleSystem:Simulate(t,withChildren,restart,fixedTimeStep) end
function CS.UnityEngine.ParticleSystem:Play() end
--[[
	@withChildren CS.System.Boolean
--]]
function CS.UnityEngine.ParticleSystem:Play(withChildren) end
--[[
	@withChildren CS.System.Boolean
--]]
function CS.UnityEngine.ParticleSystem:Stop(withChildren) end
function CS.UnityEngine.ParticleSystem:Stop() end
--[[
	@withChildren CS.System.Boolean
	@stopBehavior CS.UnityEngine.ParticleSystemStopBehavior
--]]
function CS.UnityEngine.ParticleSystem:Stop(withChildren,stopBehavior) end
function CS.UnityEngine.ParticleSystem:Pause() end
--[[
	@withChildren CS.System.Boolean
--]]
function CS.UnityEngine.ParticleSystem:Pause(withChildren) end
function CS.UnityEngine.ParticleSystem:Clear() end
--[[
	@withChildren CS.System.Boolean
--]]
function CS.UnityEngine.ParticleSystem:Clear(withChildren) end
function CS.UnityEngine.ParticleSystem:IsAlive() end
--[[
	@withChildren CS.System.Boolean
	return CS.System.Boolean
--]]
function CS.UnityEngine.ParticleSystem:IsAlive(withChildren) end
--[[
	@count CS.System.Int32
--]]
function CS.UnityEngine.ParticleSystem:Emit(count) end
--[[
	@position CS.UnityEngine.Vector3
	@velocity CS.UnityEngine.Vector3
	@size CS.System.Single
	@lifetime CS.System.Single
	@color CS.UnityEngine.Color32
--]]
function CS.UnityEngine.ParticleSystem:Emit(position,velocity,size,lifetime,color) end
--[[
	@particle CS.UnityEngine.ParticleSystem.Particle
--]]
function CS.UnityEngine.ParticleSystem:Emit(particle) end
--[[
	@emitParams CS.UnityEngine.ParticleSystem.EmitParams
	@count CS.System.Int32
--]]
function CS.UnityEngine.ParticleSystem:Emit(emitParams,count) end

--@SuperType [luaIde#CS.UnityEngine.Renderer]
CS.UnityEngine.SkinnedMeshRenderer = {}
--[[
	@return [luaIde#CS.UnityEngine.SkinnedMeshRenderer]
]]
function CS.UnityEngine.SkinnedMeshRenderer() end
--[[
	CS.UnityEngine.Transform{}
	 Get 	 Set 
--]]
CS.UnityEngine.SkinnedMeshRenderer.bones = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Transform]
	 Get 	 Set 
--]]
CS.UnityEngine.SkinnedMeshRenderer.rootBone = nil
--[[
	CS.UnityEngine.SkinQuality
	 Get 	 Set 
--]]
CS.UnityEngine.SkinnedMeshRenderer.quality = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Mesh]
	 Get 	 Set 
--]]
CS.UnityEngine.SkinnedMeshRenderer.sharedMesh = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.SkinnedMeshRenderer.updateWhenOffscreen = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.SkinnedMeshRenderer.skinnedMotionVectors = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Bounds]
	 Get 	 Set 
--]]
CS.UnityEngine.SkinnedMeshRenderer.localBounds = nil
--[[
	@mesh CS.UnityEngine.Mesh
--]]
function CS.UnityEngine.SkinnedMeshRenderer:BakeMesh(mesh) end
--[[
	@index CS.System.Int32
	return CS.System.Single
--]]
function CS.UnityEngine.SkinnedMeshRenderer:GetBlendShapeWeight(index) end
--[[
	@index CS.System.Int32
	@value CS.System.Single
--]]
function CS.UnityEngine.SkinnedMeshRenderer:SetBlendShapeWeight(index,value) end

--@SuperType [luaIde#CS.UnityEngine.Component]
CS.UnityEngine.Renderer = {}
--[[
	@return [luaIde#CS.UnityEngine.Renderer]
]]
function CS.UnityEngine.Renderer() end
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.Renderer.isPartOfStaticBatch = nil
--[[
	CS.UnityEngine.Matrix4x4
	 Get 
--]]
CS.UnityEngine.Renderer.worldToLocalMatrix = nil
--[[
	CS.UnityEngine.Matrix4x4
	 Get 
--]]
CS.UnityEngine.Renderer.localToWorldMatrix = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Renderer.enabled = nil
--[[
	CS.UnityEngine.Rendering.ShadowCastingMode
	 Get 	 Set 
--]]
CS.UnityEngine.Renderer.shadowCastingMode = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Renderer.receiveShadows = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Material]
	 Get 	 Set 
--]]
CS.UnityEngine.Renderer.material = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Material]
	 Get 	 Set 
--]]
CS.UnityEngine.Renderer.sharedMaterial = nil
--[[
	CS.UnityEngine.Material{}
	 Get 	 Set 
--]]
CS.UnityEngine.Renderer.materials = nil
--[[
	CS.UnityEngine.Material{}
	 Get 	 Set 
--]]
CS.UnityEngine.Renderer.sharedMaterials = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Bounds]
	 Get 
--]]
CS.UnityEngine.Renderer.bounds = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.Renderer.lightmapIndex = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.Renderer.realtimeLightmapIndex = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector4]
	 Get 	 Set 
--]]
CS.UnityEngine.Renderer.lightmapScaleOffset = nil
--[[
	CS.UnityEngine.MotionVectorGenerationMode
	 Get 	 Set 
--]]
CS.UnityEngine.Renderer.motionVectorGenerationMode = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector4]
	 Get 	 Set 
--]]
CS.UnityEngine.Renderer.realtimeLightmapScaleOffset = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.Renderer.isVisible = nil
--[[
	CS.UnityEngine.Rendering.LightProbeUsage
	 Get 	 Set 
--]]
CS.UnityEngine.Renderer.lightProbeUsage = nil
--[[
	@RefType [luaIde#CS.UnityEngine.GameObject]
	 Get 	 Set 
--]]
CS.UnityEngine.Renderer.lightProbeProxyVolumeOverride = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Transform]
	 Get 	 Set 
--]]
CS.UnityEngine.Renderer.probeAnchor = nil
--[[
	CS.UnityEngine.Rendering.ReflectionProbeUsage
	 Get 	 Set 
--]]
CS.UnityEngine.Renderer.reflectionProbeUsage = nil
--[[
	CS.System.String
	 Get 	 Set 
--]]
CS.UnityEngine.Renderer.sortingLayerName = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.Renderer.sortingLayerID = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.Renderer.sortingOrder = nil
--[[
	@properties CS.UnityEngine.MaterialPropertyBlock
--]]
function CS.UnityEngine.Renderer:SetPropertyBlock(properties) end
--[[
	@dest CS.UnityEngine.MaterialPropertyBlock
--]]
function CS.UnityEngine.Renderer:GetPropertyBlock(dest) end
--[[
	@result CS.System.Collections.Generic.List`1{{UnityEngine.Rendering.ReflectionProbeBlendInfo, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Renderer:GetClosestReflectionProbes(result) end

--@SuperType [luaIde#CS.UnityEngine.Behaviour]
CS.UnityEngine.Camera = {}
--[[
	@return [luaIde#CS.UnityEngine.Camera]
]]
function CS.UnityEngine.Camera() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.fieldOfView = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.nearClipPlane = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.farClipPlane = nil
--[[
	CS.UnityEngine.RenderingPath
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.renderingPath = nil
--[[
	CS.UnityEngine.RenderingPath
	 Get 
--]]
CS.UnityEngine.Camera.actualRenderingPath = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.allowHDR = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.forceIntoRenderTexture = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.allowMSAA = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.orthographicSize = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.orthographic = nil
--[[
	CS.UnityEngine.Rendering.OpaqueSortMode
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.opaqueSortMode = nil
--[[
	CS.UnityEngine.TransparencySortMode
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.transparencySortMode = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.transparencySortAxis = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.depth = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.aspect = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.cullingMask = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.eventMask = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.backgroundColor = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Rect]
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.rect = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Rect]
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.pixelRect = nil
--[[
	CS.UnityEngine.RenderTexture
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.targetTexture = nil
--[[
	CS.UnityEngine.RenderTexture
	 Get 
--]]
CS.UnityEngine.Camera.activeTexture = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.Camera.pixelWidth = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.Camera.pixelHeight = nil
--[[
	CS.UnityEngine.Matrix4x4
	 Get 
--]]
CS.UnityEngine.Camera.cameraToWorldMatrix = nil
--[[
	CS.UnityEngine.Matrix4x4
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.worldToCameraMatrix = nil
--[[
	CS.UnityEngine.Matrix4x4
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.projectionMatrix = nil
--[[
	CS.UnityEngine.Matrix4x4
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.nonJitteredProjectionMatrix = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.useJitteredProjectionMatrixForTransparentRendering = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector3]
	 Get 
--]]
CS.UnityEngine.Camera.velocity = nil
--[[
	CS.UnityEngine.CameraClearFlags
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.clearFlags = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.Camera.stereoEnabled = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.stereoSeparation = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.stereoConvergence = nil
--[[
	CS.UnityEngine.CameraType
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.cameraType = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.stereoMirrorMode = nil
--[[
	CS.UnityEngine.StereoTargetEyeMask
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.stereoTargetEye = nil
--[[
	CS.UnityEngine.Camera.MonoOrStereoscopicEye
	 Get 
--]]
CS.UnityEngine.Camera.stereoActiveEye = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.targetDisplay = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Camera]
	 Get 
--]]
CS.UnityEngine.Camera.main = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Camera]
	 Get 
--]]
CS.UnityEngine.Camera.current = nil
--[[
	CS.UnityEngine.Camera{}
	 Get 
--]]
CS.UnityEngine.Camera.allCameras = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.Camera.allCamerasCount = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.useOcclusionCulling = nil
--[[
	CS.UnityEngine.Matrix4x4
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.cullingMatrix = nil
--[[
	CS.System.Single{}
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.layerCullDistances = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.layerCullSpherical = nil
--[[
	CS.UnityEngine.DepthTextureMode
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.depthTextureMode = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.clearStencilAfterLightingPass = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.Camera.commandBufferCount = nil
--[[
	CS.UnityEngine.Camera.CameraCallback
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.onPreCull = nil
--[[
	CS.UnityEngine.Camera.CameraCallback
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.onPreRender = nil
--[[
	CS.UnityEngine.Camera.CameraCallback
	 Get 	 Set 
--]]
CS.UnityEngine.Camera.onPostRender = nil
--[[
	@colorBuffer CS.UnityEngine.RenderBuffer
	@depthBuffer CS.UnityEngine.RenderBuffer
--]]
function CS.UnityEngine.Camera:SetTargetBuffers(colorBuffer,depthBuffer) end
--[[
	@colorBuffer CS.UnityEngine.RenderBuffer{}
	@depthBuffer CS.UnityEngine.RenderBuffer
--]]
function CS.UnityEngine.Camera:SetTargetBuffers(colorBuffer,depthBuffer) end
function CS.UnityEngine.Camera:ResetWorldToCameraMatrix() end
function CS.UnityEngine.Camera:ResetProjectionMatrix() end
function CS.UnityEngine.Camera:ResetAspect() end
function CS.UnityEngine.Camera:ResetFieldOfView() end
function CS.UnityEngine.Camera:GetStereoViewMatrices() end
--[[
	@eye CS.UnityEngine.Camera.StereoscopicEye
	return CS.UnityEngine.Matrix4x4
--]]
function CS.UnityEngine.Camera:GetStereoViewMatrix(eye) end
--[[
	@leftMatrix CS.UnityEngine.Matrix4x4
	@rightMatrix CS.UnityEngine.Matrix4x4
--]]
function CS.UnityEngine.Camera:SetStereoViewMatrices(leftMatrix,rightMatrix) end
--[[
	@eye CS.UnityEngine.Camera.StereoscopicEye
	@matrix CS.UnityEngine.Matrix4x4
--]]
function CS.UnityEngine.Camera:SetStereoViewMatrix(eye,matrix) end
function CS.UnityEngine.Camera:ResetStereoViewMatrices() end
function CS.UnityEngine.Camera:GetStereoProjectionMatrices() end
--[[
	@eye CS.UnityEngine.Camera.StereoscopicEye
	return CS.UnityEngine.Matrix4x4
--]]
function CS.UnityEngine.Camera:GetStereoProjectionMatrix(eye) end
--[[
	@eye CS.UnityEngine.Camera.StereoscopicEye
	@matrix CS.UnityEngine.Matrix4x4
--]]
function CS.UnityEngine.Camera:SetStereoProjectionMatrix(eye,matrix) end
--[[
	@leftMatrix CS.UnityEngine.Matrix4x4
	@rightMatrix CS.UnityEngine.Matrix4x4
--]]
function CS.UnityEngine.Camera:SetStereoProjectionMatrices(leftMatrix,rightMatrix) end
--[[
	@viewport CS.UnityEngine.Rect
	@z CS.System.Single
	@eye CS.UnityEngine.Camera.MonoOrStereoscopicEye
	@outCorners CS.UnityEngine.Vector3{}
--]]
function CS.UnityEngine.Camera:CalculateFrustumCorners(viewport,z,eye,outCorners) end
function CS.UnityEngine.Camera:ResetStereoProjectionMatrices() end
function CS.UnityEngine.Camera:ResetTransparencySortSettings() end
--[[
	@position CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Camera:WorldToScreenPoint(position) end
--[[
	@position CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Camera:WorldToViewportPoint(position) end
--[[
	@position CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Camera:ViewportToWorldPoint(position) end
--[[
	@position CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Camera:ScreenToWorldPoint(position) end
--[[
	@position CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Camera:ScreenToViewportPoint(position) end
--[[
	@position CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector3]
--]]
function CS.UnityEngine.Camera:ViewportToScreenPoint(position) end
--[[
	@position CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Ray]
--]]
function CS.UnityEngine.Camera:ViewportPointToRay(position) end
--[[
	@position CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Ray]
--]]
function CS.UnityEngine.Camera:ScreenPointToRay(position) end
--[[
	@cameras CS.UnityEngine.Camera{}
	return CS.System.Int32
--]]
function CS.UnityEngine.Camera:GetAllCameras(cameras) end
function CS.UnityEngine.Camera:Render() end
--[[
	@shader CS.UnityEngine.Shader
	@replacementTag CS.System.String
--]]
function CS.UnityEngine.Camera:RenderWithShader(shader,replacementTag) end
--[[
	@shader CS.UnityEngine.Shader
	@replacementTag CS.System.String
--]]
function CS.UnityEngine.Camera:SetReplacementShader(shader,replacementTag) end
function CS.UnityEngine.Camera:ResetReplacementShader() end
function CS.UnityEngine.Camera:ResetCullingMatrix() end
function CS.UnityEngine.Camera:RenderDontRestore() end
--[[
	@cur CS.UnityEngine.Camera
--]]
function CS.UnityEngine.Camera:SetupCurrent(cur) end
--[[
	@cubemap CS.UnityEngine.Cubemap
	return CS.System.Boolean
--]]
function CS.UnityEngine.Camera:RenderToCubemap(cubemap) end
--[[
	@cubemap CS.UnityEngine.Cubemap
	@faceMask CS.System.Int32
	return CS.System.Boolean
--]]
function CS.UnityEngine.Camera:RenderToCubemap(cubemap,faceMask) end
--[[
	@cubemap CS.UnityEngine.RenderTexture
	return CS.System.Boolean
--]]
function CS.UnityEngine.Camera:RenderToCubemap(cubemap) end
--[[
	@cubemap CS.UnityEngine.RenderTexture
	@faceMask CS.System.Int32
	return CS.System.Boolean
--]]
function CS.UnityEngine.Camera:RenderToCubemap(cubemap,faceMask) end
--[[
	@other CS.UnityEngine.Camera
--]]
function CS.UnityEngine.Camera:CopyFrom(other) end
--[[
	@evt CS.UnityEngine.Rendering.CameraEvent
	@buffer CS.UnityEngine.Rendering.CommandBuffer
--]]
function CS.UnityEngine.Camera:AddCommandBuffer(evt,buffer) end
--[[
	@evt CS.UnityEngine.Rendering.CameraEvent
	@buffer CS.UnityEngine.Rendering.CommandBuffer
--]]
function CS.UnityEngine.Camera:RemoveCommandBuffer(evt,buffer) end
--[[
	@evt CS.UnityEngine.Rendering.CameraEvent
--]]
function CS.UnityEngine.Camera:RemoveCommandBuffers(evt) end
function CS.UnityEngine.Camera:RemoveAllCommandBuffers() end
--[[
	@evt CS.UnityEngine.Rendering.CameraEvent
	return CS.UnityEngine.Rendering.CommandBuffer{}
--]]
function CS.UnityEngine.Camera:GetCommandBuffers(evt) end
--[[
	@clipPlane CS.UnityEngine.Vector4
	return CS.UnityEngine.Matrix4x4
--]]
function CS.UnityEngine.Camera:CalculateObliqueMatrix(clipPlane) end
function CS.UnityEngine.Camera:GetScreenWidth() end
function CS.UnityEngine.Camera:GetScreenHeight() end
function CS.UnityEngine.Camera:DoClear() end

--@SuperType [luaIde#CS.System.Object]
CS.UnityEngine.WWW = {}
--[[
	@url CS.System.String
	@return [luaIde#CS.UnityEngine.WWW]
]]
function CS.UnityEngine.WWW(url) end
--[[
	@url CS.System.String
	@form CS.UnityEngine.WWWForm
	@return [luaIde#CS.UnityEngine.WWW]
]]
function CS.UnityEngine.WWW(url,form) end
--[[
	@url CS.System.String
	@postData CS.System.Byte{}
	@return [luaIde#CS.UnityEngine.WWW]
]]
function CS.UnityEngine.WWW(url,postData) end
--[[
	@url CS.System.String
	@postData CS.System.Byte{}
	@headers CS.System.Collections.Generic.Dictionary`2{{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@return [luaIde#CS.UnityEngine.WWW]
]]
function CS.UnityEngine.WWW(url,postData,headers) end
--[[
	CS.System.Collections.Generic.Dictionary`2{{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089},{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	 Get 
--]]
CS.UnityEngine.WWW.responseHeaders = nil
--[[
	CS.System.String
	 Get 
--]]
CS.UnityEngine.WWW.text = nil
--[[
	CS.System.Byte{}
	 Get 
--]]
CS.UnityEngine.WWW.bytes = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.WWW.size = nil
--[[
	CS.System.String
	 Get 
--]]
CS.UnityEngine.WWW.error = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Texture2D]
	 Get 
--]]
CS.UnityEngine.WWW.texture = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Texture2D]
	 Get 
--]]
CS.UnityEngine.WWW.textureNonReadable = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.WWW.isDone = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.WWW.progress = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.WWW.uploadProgress = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.WWW.bytesDownloaded = nil
--[[
	CS.System.String
	 Get 
--]]
CS.UnityEngine.WWW.url = nil
--[[
	CS.UnityEngine.AssetBundle
	 Get 
--]]
CS.UnityEngine.WWW.assetBundle = nil
--[[
	CS.UnityEngine.ThreadPriority
	 Get 	 Set 
--]]
CS.UnityEngine.WWW.threadPriority = nil
function CS.UnityEngine.WWW:Dispose() end
--[[
	@url CS.System.String
	@postData CS.System.Byte{}
	@iHeaders CS.System.String{}
--]]
function CS.UnityEngine.WWW:InitWWW(url,postData,iHeaders) end
--[[
	@s CS.System.String
	return CS.System.String
--]]
function CS.UnityEngine.WWW:EscapeURL(s) end
--[[
	@s CS.System.String
	@e CS.System.Text.Encoding
	return CS.System.String
--]]
function CS.UnityEngine.WWW:EscapeURL(s,e) end
--[[
	@s CS.System.String
	return CS.System.String
--]]
function CS.UnityEngine.WWW:UnEscapeURL(s) end
--[[
	@s CS.System.String
	@e CS.System.Text.Encoding
	return CS.System.String
--]]
function CS.UnityEngine.WWW:UnEscapeURL(s,e) end
--[[
	@tex CS.UnityEngine.Texture2D
--]]
function CS.UnityEngine.WWW:LoadImageIntoTexture(tex) end
--[[
	@url CS.System.String
	return CS.System.String
--]]
function CS.UnityEngine.WWW:GetURL(url) end
--[[
	@url CS.System.String
	@return [luaIde#CS.UnityEngine.Texture2D]
--]]
function CS.UnityEngine.WWW:GetTextureFromURL(url) end
function CS.UnityEngine.WWW:LoadUnityWeb() end
--[[
	@url CS.System.String
	@version CS.System.Int32
	@return [luaIde#CS.UnityEngine.WWW]
--]]
function CS.UnityEngine.WWW:LoadFromCacheOrDownload(url,version) end
--[[
	@url CS.System.String
	@version CS.System.Int32
	@crc CS.System.UInt32
	@return [luaIde#CS.UnityEngine.WWW]
--]]
function CS.UnityEngine.WWW:LoadFromCacheOrDownload(url,version,crc) end
--[[
	@url CS.System.String
	@hash CS.UnityEngine.Hash128
	@return [luaIde#CS.UnityEngine.WWW]
--]]
function CS.UnityEngine.WWW:LoadFromCacheOrDownload(url,hash) end
--[[
	@url CS.System.String
	@hash CS.UnityEngine.Hash128
	@crc CS.System.UInt32
	@return [luaIde#CS.UnityEngine.WWW]
--]]
function CS.UnityEngine.WWW:LoadFromCacheOrDownload(url,hash,crc) end

--@SuperType [luaIde#CS.System.Object]
CS.UnityEngine.Application = {}
--[[
	@return [luaIde#CS.UnityEngine.Application]
]]
function CS.UnityEngine.Application() end
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.Application.streamedBytes = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.Application.isPlaying = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.Application.isFocused = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.Application.isEditor = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.Application.isWebPlayer = nil
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 
--]]
CS.UnityEngine.Application.platform = nil
--[[
	CS.System.String
	 Get 
--]]
CS.UnityEngine.Application.buildGUID = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.Application.isMobilePlatform = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.Application.isConsolePlatform = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Application.runInBackground = nil
--[[
	CS.System.String
	 Get 
--]]
CS.UnityEngine.Application.dataPath = nil
--[[
	CS.System.String
	 Get 
--]]
CS.UnityEngine.Application.streamingAssetsPath = nil
--[[
	CS.System.String
	 Get 
--]]
CS.UnityEngine.Application.persistentDataPath = nil
--[[
	CS.System.String
	 Get 
--]]
CS.UnityEngine.Application.temporaryCachePath = nil
--[[
	CS.System.String
	 Get 
--]]
CS.UnityEngine.Application.srcValue = nil
--[[
	CS.System.String
	 Get 
--]]
CS.UnityEngine.Application.absoluteURL = nil
--[[
	CS.System.String
	 Get 
--]]
CS.UnityEngine.Application.unityVersion = nil
--[[
	CS.System.String
	 Get 
--]]
CS.UnityEngine.Application.version = nil
--[[
	CS.System.String
	 Get 
--]]
CS.UnityEngine.Application.installerName = nil
--[[
	CS.System.String
	 Get 
--]]
CS.UnityEngine.Application.identifier = nil
--[[
	CS.UnityEngine.ApplicationInstallMode
	 Get 
--]]
CS.UnityEngine.Application.installMode = nil
--[[
	CS.UnityEngine.ApplicationSandboxType
	 Get 
--]]
CS.UnityEngine.Application.sandboxType = nil
--[[
	CS.System.String
	 Get 
--]]
CS.UnityEngine.Application.productName = nil
--[[
	CS.System.String
	 Get 
--]]
CS.UnityEngine.Application.companyName = nil
--[[
	CS.System.String
	 Get 
--]]
CS.UnityEngine.Application.cloudProjectId = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.Application.targetFrameRate = nil
--[[
	CS.UnityEngine.SystemLanguage
	 Get 
--]]
CS.UnityEngine.Application.systemLanguage = nil
--[[
	CS.UnityEngine.ThreadPriority
	 Get 	 Set 
--]]
CS.UnityEngine.Application.backgroundLoadingPriority = nil
--[[
	CS.UnityEngine.NetworkReachability
	 Get 
--]]
CS.UnityEngine.Application.internetReachability = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.Application.genuine = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.Application.genuineCheckAvailable = nil
--[[
	@value CS.UnityEngine.Application.LowMemoryCallback
--]]
function CS.UnityEngine.Application:add_lowMemory(value) end
--[[
	@value CS.UnityEngine.Application.LowMemoryCallback
--]]
function CS.UnityEngine.Application:remove_lowMemory(value) end
function CS.UnityEngine.Application:Quit() end
function CS.UnityEngine.Application:CancelQuit() end
function CS.UnityEngine.Application:Unload() end
--[[
	@levelIndex CS.System.Int32
	return CS.System.Single
--]]
function CS.UnityEngine.Application:GetStreamProgressForLevel(levelIndex) end
--[[
	@levelName CS.System.String
	return CS.System.Single
--]]
function CS.UnityEngine.Application:GetStreamProgressForLevel(levelName) end
--[[
	@levelIndex CS.System.Int32
	return CS.System.Boolean
--]]
function CS.UnityEngine.Application:CanStreamedLevelBeLoaded(levelIndex) end
--[[
	@levelName CS.System.String
	return CS.System.Boolean
--]]
function CS.UnityEngine.Application:CanStreamedLevelBeLoaded(levelName) end
function CS.UnityEngine.Application:GetBuildTags() end
--[[
	@filename CS.System.String
	@superSize CS.System.Int32
--]]
function CS.UnityEngine.Application:CaptureScreenshot(filename,superSize) end
--[[
	@filename CS.System.String
--]]
function CS.UnityEngine.Application:CaptureScreenshot(filename) end
function CS.UnityEngine.Application:HasProLicense() end
--[[
	@mono CS.UnityEngine.Object
--]]
function CS.UnityEngine.Application:DontDestroyOnLoad(mono) end
--[[
	@functionName CS.System.String
	@args CS.System.Object{}
--]]
function CS.UnityEngine.Application:ExternalCall(functionName,args) end
--[[
	@script CS.System.String
--]]
function CS.UnityEngine.Application:ExternalEval(script) end
--[[
	@delegateMethod CS.UnityEngine.Application.AdvertisingIdentifierCallback
	return CS.System.Boolean
--]]
function CS.UnityEngine.Application:RequestAdvertisingIdentifierAsync(delegateMethod) end
--[[
	@url CS.System.String
--]]
function CS.UnityEngine.Application:OpenURL(url) end
--[[
	@mode CS.System.Int32
--]]
function CS.UnityEngine.Application:ForceCrash(mode) end
--[[
	@value CS.UnityEngine.Application.LogCallback
--]]
function CS.UnityEngine.Application:add_logMessageReceived(value) end
--[[
	@value CS.UnityEngine.Application.LogCallback
--]]
function CS.UnityEngine.Application:remove_logMessageReceived(value) end
--[[
	@value CS.UnityEngine.Application.LogCallback
--]]
function CS.UnityEngine.Application:add_logMessageReceivedThreaded(value) end
--[[
	@value CS.UnityEngine.Application.LogCallback
--]]
function CS.UnityEngine.Application:remove_logMessageReceivedThreaded(value) end
--[[
	@logType CS.UnityEngine.LogType
	return CS.UnityEngine.StackTraceLogType
--]]
function CS.UnityEngine.Application:GetStackTraceLogType(logType) end
--[[
	@logType CS.UnityEngine.LogType
	@stackTraceType CS.UnityEngine.StackTraceLogType
--]]
function CS.UnityEngine.Application:SetStackTraceLogType(logType,stackTraceType) end
--[[
	@mode CS.UnityEngine.UserAuthorization
	return CS.UnityEngine.AsyncOperation
--]]
function CS.UnityEngine.Application:RequestUserAuthorization(mode) end
--[[
	@mode CS.UnityEngine.UserAuthorization
	return CS.System.Boolean
--]]
function CS.UnityEngine.Application:HasUserAuthorization(mode) end
--[[
	@handler CS.UnityEngine.Application.LogCallback
--]]
function CS.UnityEngine.Application:RegisterLogCallback(handler) end
--[[
	@handler CS.UnityEngine.Application.LogCallback
--]]
function CS.UnityEngine.Application:RegisterLogCallbackThreaded(handler) end
--[[
	@index CS.System.Int32
--]]
function CS.UnityEngine.Application:LoadLevel(index) end
--[[
	@name CS.System.String
--]]
function CS.UnityEngine.Application:LoadLevel(name) end
--[[
	@index CS.System.Int32
--]]
function CS.UnityEngine.Application:LoadLevelAdditive(index) end
--[[
	@name CS.System.String
--]]
function CS.UnityEngine.Application:LoadLevelAdditive(name) end
--[[
	@index CS.System.Int32
	return CS.UnityEngine.AsyncOperation
--]]
function CS.UnityEngine.Application:LoadLevelAsync(index) end
--[[
	@levelName CS.System.String
	return CS.UnityEngine.AsyncOperation
--]]
function CS.UnityEngine.Application:LoadLevelAsync(levelName) end
--[[
	@index CS.System.Int32
	return CS.UnityEngine.AsyncOperation
--]]
function CS.UnityEngine.Application:LoadLevelAdditiveAsync(index) end
--[[
	@levelName CS.System.String
	return CS.UnityEngine.AsyncOperation
--]]
function CS.UnityEngine.Application:LoadLevelAdditiveAsync(levelName) end
--[[
	@index CS.System.Int32
	return CS.System.Boolean
--]]
function CS.UnityEngine.Application:UnloadLevel(index) end
--[[
	@scenePath CS.System.String
	return CS.System.Boolean
--]]
function CS.UnityEngine.Application:UnloadLevel(scenePath) end

--@SuperType [luaIde#CS.System.Enum]
CS.UnityEngine.RuntimePlatform = {}
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.OSXEditor = 0
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.OSXPlayer = 1
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.WindowsPlayer = 2
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.OSXDashboardPlayer = 4
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.WindowsEditor = 7
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.IPhonePlayer = 8
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.Android = 11
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.LinuxPlayer = 13
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.LinuxEditor = 16
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.WebGLPlayer = 17
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.WSAPlayerX86 = 18
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.WSAPlayerX64 = 19
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.WSAPlayerARM = 20
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.TizenPlayer = 23
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.PSP2 = 24
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.PS4 = 25
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.PSM = 26
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.XboxOne = 27
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.SamsungTVPlayer = 28
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.WiiU = 30
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.tvOS = 31
--[[
	CS.UnityEngine.RuntimePlatform
	 Get 	 Set 
--]]
CS.UnityEngine.RuntimePlatform.Switch = 32

--@SuperType [luaIde#CS.System.Object]
CS.UnityEngine.Screen = {}
--[[
	@return [luaIde#CS.UnityEngine.Screen]
]]
function CS.UnityEngine.Screen() end
--[[
	CS.UnityEngine.Resolution{}
	 Get 
--]]
CS.UnityEngine.Screen.resolutions = nil
--[[
	CS.UnityEngine.Resolution
	 Get 
--]]
CS.UnityEngine.Screen.currentResolution = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.Screen.width = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.Screen.height = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.Screen.dpi = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Screen.fullScreen = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Screen.autorotateToPortrait = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Screen.autorotateToPortraitUpsideDown = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Screen.autorotateToLandscapeLeft = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.Screen.autorotateToLandscapeRight = nil
--[[
	CS.UnityEngine.ScreenOrientation
	 Get 	 Set 
--]]
CS.UnityEngine.Screen.orientation = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.Screen.sleepTimeout = nil
--[[
	@width CS.System.Int32
	@height CS.System.Int32
	@fullscreen CS.System.Boolean
	@preferredRefreshRate CS.System.Int32
--]]
function CS.UnityEngine.Screen:SetResolution(width,height,fullscreen,preferredRefreshRate) end
--[[
	@width CS.System.Int32
	@height CS.System.Int32
	@fullscreen CS.System.Boolean
--]]
function CS.UnityEngine.Screen:SetResolution(width,height,fullscreen) end

--@SuperType [luaIde#CS.System.Object]
CS.UnityEngine.PlayerPrefs = {}
--[[
	@return [luaIde#CS.UnityEngine.PlayerPrefs]
]]
function CS.UnityEngine.PlayerPrefs() end
--[[
	@key CS.System.String
	@value CS.System.Int32
--]]
function CS.UnityEngine.PlayerPrefs:SetInt(key,value) end
--[[
	@key CS.System.String
	@defaultValue CS.System.Int32
	return CS.System.Int32
--]]
function CS.UnityEngine.PlayerPrefs:GetInt(key,defaultValue) end
--[[
	@key CS.System.String
	return CS.System.Int32
--]]
function CS.UnityEngine.PlayerPrefs:GetInt(key) end
--[[
	@key CS.System.String
	@value CS.System.Single
--]]
function CS.UnityEngine.PlayerPrefs:SetFloat(key,value) end
--[[
	@key CS.System.String
	@defaultValue CS.System.Single
	return CS.System.Single
--]]
function CS.UnityEngine.PlayerPrefs:GetFloat(key,defaultValue) end
--[[
	@key CS.System.String
	return CS.System.Single
--]]
function CS.UnityEngine.PlayerPrefs:GetFloat(key) end
--[[
	@key CS.System.String
	@value CS.System.String
--]]
function CS.UnityEngine.PlayerPrefs:SetString(key,value) end
--[[
	@key CS.System.String
	@defaultValue CS.System.String
	return CS.System.String
--]]
function CS.UnityEngine.PlayerPrefs:GetString(key,defaultValue) end
--[[
	@key CS.System.String
	return CS.System.String
--]]
function CS.UnityEngine.PlayerPrefs:GetString(key) end
--[[
	@key CS.System.String
	return CS.System.Boolean
--]]
function CS.UnityEngine.PlayerPrefs:HasKey(key) end
--[[
	@key CS.System.String
--]]
function CS.UnityEngine.PlayerPrefs:DeleteKey(key) end
function CS.UnityEngine.PlayerPrefs:DeleteAll() end
function CS.UnityEngine.PlayerPrefs:Save() end

--@SuperType [luaIde#CS.System.Enum]
CS.UnityEngine.AdditionalCanvasShaderChannels = {}
--[[
	CS.UnityEngine.AdditionalCanvasShaderChannels
	 Get 	 Set 
--]]
CS.UnityEngine.AdditionalCanvasShaderChannels.None = 0
--[[
	CS.UnityEngine.AdditionalCanvasShaderChannels
	 Get 	 Set 
--]]
CS.UnityEngine.AdditionalCanvasShaderChannels.TexCoord1 = 1
--[[
	CS.UnityEngine.AdditionalCanvasShaderChannels
	 Get 	 Set 
--]]
CS.UnityEngine.AdditionalCanvasShaderChannels.TexCoord2 = 2
--[[
	CS.UnityEngine.AdditionalCanvasShaderChannels
	 Get 	 Set 
--]]
CS.UnityEngine.AdditionalCanvasShaderChannels.TexCoord3 = 4
--[[
	CS.UnityEngine.AdditionalCanvasShaderChannels
	 Get 	 Set 
--]]
CS.UnityEngine.AdditionalCanvasShaderChannels.Normal = 8
--[[
	CS.UnityEngine.AdditionalCanvasShaderChannels
	 Get 	 Set 
--]]
CS.UnityEngine.AdditionalCanvasShaderChannels.Tangent = 16

--@SuperType [luaIde#CS.System.Enum]
CS.UnityEngine.RenderMode = {}
--[[
	CS.UnityEngine.RenderMode
	 Get 	 Set 
--]]
CS.UnityEngine.RenderMode.ScreenSpaceOverlay = 0
--[[
	CS.UnityEngine.RenderMode
	 Get 	 Set 
--]]
CS.UnityEngine.RenderMode.ScreenSpaceCamera = 1
--[[
	CS.UnityEngine.RenderMode
	 Get 	 Set 
--]]
CS.UnityEngine.RenderMode.WorldSpace = 2

--@SuperType [luaIde#CS.UnityEngine.Object]
CS.UnityEngine.Sprite = {}
--[[
	@return [luaIde#CS.UnityEngine.Sprite]
]]
function CS.UnityEngine.Sprite() end
--[[
	@RefType [luaIde#CS.UnityEngine.Bounds]
	 Get 
--]]
CS.UnityEngine.Sprite.bounds = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Rect]
	 Get 
--]]
CS.UnityEngine.Sprite.rect = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.Sprite.pixelsPerUnit = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Texture2D]
	 Get 
--]]
CS.UnityEngine.Sprite.texture = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Texture2D]
	 Get 
--]]
CS.UnityEngine.Sprite.associatedAlphaSplitTexture = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Rect]
	 Get 
--]]
CS.UnityEngine.Sprite.textureRect = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 
--]]
CS.UnityEngine.Sprite.textureRectOffset = nil
--[[
	CS.System.Boolean
	 Get 
--]]
CS.UnityEngine.Sprite.packed = nil
--[[
	CS.UnityEngine.SpritePackingMode
	 Get 
--]]
CS.UnityEngine.Sprite.packingMode = nil
--[[
	CS.UnityEngine.SpritePackingRotation
	 Get 
--]]
CS.UnityEngine.Sprite.packingRotation = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 
--]]
CS.UnityEngine.Sprite.pivot = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector4]
	 Get 
--]]
CS.UnityEngine.Sprite.border = nil
--[[
	CS.UnityEngine.Vector2{}
	 Get 
--]]
CS.UnityEngine.Sprite.vertices = nil
--[[
	CS.System.UInt16{}
	 Get 
--]]
CS.UnityEngine.Sprite.triangles = nil
--[[
	CS.UnityEngine.Vector2{}
	 Get 
--]]
CS.UnityEngine.Sprite.uv = nil
--[[
	@texture CS.UnityEngine.Texture2D
	@rect CS.UnityEngine.Rect
	@pivot CS.UnityEngine.Vector2
	@pixelsPerUnit CS.System.Single
	@extrude CS.System.UInt32
	@meshType CS.UnityEngine.SpriteMeshType
	@border CS.UnityEngine.Vector4
	@return [luaIde#CS.UnityEngine.Sprite]
--]]
function CS.UnityEngine.Sprite:Create(texture,rect,pivot,pixelsPerUnit,extrude,meshType,border) end
--[[
	@texture CS.UnityEngine.Texture2D
	@rect CS.UnityEngine.Rect
	@pivot CS.UnityEngine.Vector2
	@pixelsPerUnit CS.System.Single
	@extrude CS.System.UInt32
	@meshType CS.UnityEngine.SpriteMeshType
	@return [luaIde#CS.UnityEngine.Sprite]
--]]
function CS.UnityEngine.Sprite:Create(texture,rect,pivot,pixelsPerUnit,extrude,meshType) end
--[[
	@texture CS.UnityEngine.Texture2D
	@rect CS.UnityEngine.Rect
	@pivot CS.UnityEngine.Vector2
	@pixelsPerUnit CS.System.Single
	@extrude CS.System.UInt32
	@return [luaIde#CS.UnityEngine.Sprite]
--]]
function CS.UnityEngine.Sprite:Create(texture,rect,pivot,pixelsPerUnit,extrude) end
--[[
	@texture CS.UnityEngine.Texture2D
	@rect CS.UnityEngine.Rect
	@pivot CS.UnityEngine.Vector2
	@pixelsPerUnit CS.System.Single
	@return [luaIde#CS.UnityEngine.Sprite]
--]]
function CS.UnityEngine.Sprite:Create(texture,rect,pivot,pixelsPerUnit) end
--[[
	@texture CS.UnityEngine.Texture2D
	@rect CS.UnityEngine.Rect
	@pivot CS.UnityEngine.Vector2
	@return [luaIde#CS.UnityEngine.Sprite]
--]]
function CS.UnityEngine.Sprite:Create(texture,rect,pivot) end
--[[
	@vertices CS.UnityEngine.Vector2{}
	@triangles CS.System.UInt16{}
--]]
function CS.UnityEngine.Sprite:OverrideGeometry(vertices,triangles) end

--@SuperType [luaIde#CS.UnityEngine.Events.UnityEvent`1[[System.Boolean, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]]
CS.UnityEngine.UI.MaskableGraphic.CullStateChangedEvent = {}
--[[
	@return [luaIde#CS.UnityEngine.UI.MaskableGraphic.CullStateChangedEvent]
]]
function CS.UnityEngine.UI.MaskableGraphic.CullStateChangedEvent() end

--@SuperType [luaIde#CS.System.Enum]
CS.UnityEngine.UI.Image.FillMethod = {}
--[[
	CS.UnityEngine.UI.Image.FillMethod
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Image.FillMethod.Horizontal = 0
--[[
	CS.UnityEngine.UI.Image.FillMethod
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Image.FillMethod.Vertical = 1
--[[
	CS.UnityEngine.UI.Image.FillMethod
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Image.FillMethod.Radial90 = 2
--[[
	CS.UnityEngine.UI.Image.FillMethod
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Image.FillMethod.Radial180 = 3
--[[
	CS.UnityEngine.UI.Image.FillMethod
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Image.FillMethod.Radial360 = 4

--@SuperType [luaIde#CS.System.Enum]
CS.UnityEngine.UI.Image.Type = {}
--[[
	CS.UnityEngine.UI.Image.Type
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Image.Type.Simple = 0
--[[
	CS.UnityEngine.UI.Image.Type
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Image.Type.Sliced = 1
--[[
	CS.UnityEngine.UI.Image.Type
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Image.Type.Tiled = 2
--[[
	CS.UnityEngine.UI.Image.Type
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Image.Type.Filled = 3

--@SuperType [luaIde#CS.System.Enum]
CS.UnityEngine.TextAnchor = {}
--[[
	CS.UnityEngine.TextAnchor
	 Get 	 Set 
--]]
CS.UnityEngine.TextAnchor.UpperLeft = 0
--[[
	CS.UnityEngine.TextAnchor
	 Get 	 Set 
--]]
CS.UnityEngine.TextAnchor.UpperCenter = 1
--[[
	CS.UnityEngine.TextAnchor
	 Get 	 Set 
--]]
CS.UnityEngine.TextAnchor.UpperRight = 2
--[[
	CS.UnityEngine.TextAnchor
	 Get 	 Set 
--]]
CS.UnityEngine.TextAnchor.MiddleLeft = 3
--[[
	CS.UnityEngine.TextAnchor
	 Get 	 Set 
--]]
CS.UnityEngine.TextAnchor.MiddleCenter = 4
--[[
	CS.UnityEngine.TextAnchor
	 Get 	 Set 
--]]
CS.UnityEngine.TextAnchor.MiddleRight = 5
--[[
	CS.UnityEngine.TextAnchor
	 Get 	 Set 
--]]
CS.UnityEngine.TextAnchor.LowerLeft = 6
--[[
	CS.UnityEngine.TextAnchor
	 Get 	 Set 
--]]
CS.UnityEngine.TextAnchor.LowerCenter = 7
--[[
	CS.UnityEngine.TextAnchor
	 Get 	 Set 
--]]
CS.UnityEngine.TextAnchor.LowerRight = 8

--@SuperType [luaIde#CS.System.Enum]
CS.UnityEngine.FontStyle = {}
--[[
	CS.UnityEngine.FontStyle
	 Get 	 Set 
--]]
CS.UnityEngine.FontStyle.Normal = 0
--[[
	CS.UnityEngine.FontStyle
	 Get 	 Set 
--]]
CS.UnityEngine.FontStyle.Bold = 1
--[[
	CS.UnityEngine.FontStyle
	 Get 	 Set 
--]]
CS.UnityEngine.FontStyle.Italic = 2
--[[
	CS.UnityEngine.FontStyle
	 Get 	 Set 
--]]
CS.UnityEngine.FontStyle.BoldAndItalic = 3

--@SuperType [luaIde#CS.System.Enum]
CS.UnityEngine.HorizontalWrapMode = {}
--[[
	CS.UnityEngine.HorizontalWrapMode
	 Get 	 Set 
--]]
CS.UnityEngine.HorizontalWrapMode.Wrap = 0
--[[
	CS.UnityEngine.HorizontalWrapMode
	 Get 	 Set 
--]]
CS.UnityEngine.HorizontalWrapMode.Overflow = 1

--@SuperType [luaIde#CS.System.Object]
CS.UnityEngine.TextGenerator = {}
--[[
	@return [luaIde#CS.UnityEngine.TextGenerator]
]]
function CS.UnityEngine.TextGenerator() end
--[[
	@initialCapacity CS.System.Int32
	@return [luaIde#CS.UnityEngine.TextGenerator]
]]
function CS.UnityEngine.TextGenerator(initialCapacity) end
--[[
	CS.System.Collections.Generic.IList`1{{UnityEngine.UIVertex, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.UnityEngine.TextGenerator.verts = nil
--[[
	CS.System.Collections.Generic.IList`1{{UnityEngine.UICharInfo, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.UnityEngine.TextGenerator.characters = nil
--[[
	CS.System.Collections.Generic.IList`1{{UnityEngine.UILineInfo, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
	 Get 
--]]
CS.UnityEngine.TextGenerator.lines = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Rect]
	 Get 
--]]
CS.UnityEngine.TextGenerator.rectExtents = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.TextGenerator.vertexCount = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.TextGenerator.characterCount = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.TextGenerator.characterCountVisible = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.TextGenerator.lineCount = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.TextGenerator.fontSizeUsedForBestFit = nil
function CS.UnityEngine.TextGenerator:Invalidate() end
--[[
	@characters CS.System.Collections.Generic.List`1{{UnityEngine.UICharInfo, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.TextGenerator:GetCharacters(characters) end
--[[
	@lines CS.System.Collections.Generic.List`1{{UnityEngine.UILineInfo, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.TextGenerator:GetLines(lines) end
--[[
	@vertices CS.System.Collections.Generic.List`1{{UnityEngine.UIVertex, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.TextGenerator:GetVertices(vertices) end
--[[
	@str CS.System.String
	@settings CS.UnityEngine.TextGenerationSettings
	return CS.System.Single
--]]
function CS.UnityEngine.TextGenerator:GetPreferredWidth(str,settings) end
--[[
	@str CS.System.String
	@settings CS.UnityEngine.TextGenerationSettings
	return CS.System.Single
--]]
function CS.UnityEngine.TextGenerator:GetPreferredHeight(str,settings) end
--[[
	@str CS.System.String
	@settings CS.UnityEngine.TextGenerationSettings
	@context CS.UnityEngine.GameObject
	return CS.System.Boolean
--]]
function CS.UnityEngine.TextGenerator:PopulateWithErrors(str,settings,context) end
--[[
	@str CS.System.String
	@settings CS.UnityEngine.TextGenerationSettings
	return CS.System.Boolean
--]]
function CS.UnityEngine.TextGenerator:Populate(str,settings) end
function CS.UnityEngine.TextGenerator:GetVerticesArray() end
function CS.UnityEngine.TextGenerator:GetCharactersArray() end
function CS.UnityEngine.TextGenerator:GetLinesArray() end

--@SuperType [luaIde#CS.System.Enum]
CS.UnityEngine.VerticalWrapMode = {}
--[[
	CS.UnityEngine.VerticalWrapMode
	 Get 	 Set 
--]]
CS.UnityEngine.VerticalWrapMode.Truncate = 0
--[[
	CS.UnityEngine.VerticalWrapMode
	 Get 	 Set 
--]]
CS.UnityEngine.VerticalWrapMode.Overflow = 1

--@SuperType [luaIde#CS.System.ValueType]
CS.UnityEngine.TextGenerationSettings = {}
--[[
	CS.UnityEngine.Font
	 Get 	 Set 
--]]
CS.UnityEngine.TextGenerationSettings.font = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 	 Set 
--]]
CS.UnityEngine.TextGenerationSettings.color = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.TextGenerationSettings.fontSize = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.TextGenerationSettings.lineSpacing = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.TextGenerationSettings.richText = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.TextGenerationSettings.scaleFactor = nil
--[[
	CS.UnityEngine.FontStyle
	 Get 	 Set 
--]]
CS.UnityEngine.TextGenerationSettings.fontStyle = nil
--[[
	CS.UnityEngine.TextAnchor
	 Get 	 Set 
--]]
CS.UnityEngine.TextGenerationSettings.textAnchor = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.TextGenerationSettings.alignByGeometry = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.TextGenerationSettings.resizeTextForBestFit = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.TextGenerationSettings.resizeTextMinSize = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.TextGenerationSettings.resizeTextMaxSize = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.TextGenerationSettings.updateBounds = nil
--[[
	CS.UnityEngine.VerticalWrapMode
	 Get 	 Set 
--]]
CS.UnityEngine.TextGenerationSettings.verticalOverflow = nil
--[[
	CS.UnityEngine.HorizontalWrapMode
	 Get 	 Set 
--]]
CS.UnityEngine.TextGenerationSettings.horizontalOverflow = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.TextGenerationSettings.generationExtents = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.TextGenerationSettings.pivot = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.TextGenerationSettings.generateOutOfBounds = nil
--[[
	@other CS.UnityEngine.TextGenerationSettings
	return CS.System.Boolean
--]]
function CS.UnityEngine.TextGenerationSettings:Equals(other) end

--@SuperType [luaIde#CS.System.Enum]
CS.UnityEngine.UI.InputField.LineType = {}
--[[
	CS.UnityEngine.UI.InputField.LineType
	 Get 	 Set 
--]]
CS.UnityEngine.UI.InputField.LineType.SingleLine = 0
--[[
	CS.UnityEngine.UI.InputField.LineType
	 Get 	 Set 
--]]
CS.UnityEngine.UI.InputField.LineType.MultiLineSubmit = 1
--[[
	CS.UnityEngine.UI.InputField.LineType
	 Get 	 Set 
--]]
CS.UnityEngine.UI.InputField.LineType.MultiLineNewline = 2

--@SuperType [luaIde#CS.System.Enum]
CS.UnityEngine.UI.InputField.ContentType = {}
--[[
	CS.UnityEngine.UI.InputField.ContentType
	 Get 	 Set 
--]]
CS.UnityEngine.UI.InputField.ContentType.Standard = 0
--[[
	CS.UnityEngine.UI.InputField.ContentType
	 Get 	 Set 
--]]
CS.UnityEngine.UI.InputField.ContentType.Autocorrected = 1
--[[
	CS.UnityEngine.UI.InputField.ContentType
	 Get 	 Set 
--]]
CS.UnityEngine.UI.InputField.ContentType.IntegerNumber = 2
--[[
	CS.UnityEngine.UI.InputField.ContentType
	 Get 	 Set 
--]]
CS.UnityEngine.UI.InputField.ContentType.DecimalNumber = 3
--[[
	CS.UnityEngine.UI.InputField.ContentType
	 Get 	 Set 
--]]
CS.UnityEngine.UI.InputField.ContentType.Alphanumeric = 4
--[[
	CS.UnityEngine.UI.InputField.ContentType
	 Get 	 Set 
--]]
CS.UnityEngine.UI.InputField.ContentType.Name = 5
--[[
	CS.UnityEngine.UI.InputField.ContentType
	 Get 	 Set 
--]]
CS.UnityEngine.UI.InputField.ContentType.EmailAddress = 6
--[[
	CS.UnityEngine.UI.InputField.ContentType
	 Get 	 Set 
--]]
CS.UnityEngine.UI.InputField.ContentType.Password = 7
--[[
	CS.UnityEngine.UI.InputField.ContentType
	 Get 	 Set 
--]]
CS.UnityEngine.UI.InputField.ContentType.Pin = 8
--[[
	CS.UnityEngine.UI.InputField.ContentType
	 Get 	 Set 
--]]
CS.UnityEngine.UI.InputField.ContentType.Custom = 9

--@SuperType [luaIde#CS.UnityEngine.Events.UnityEvent`1[[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]]
CS.UnityEngine.UI.InputField.OnChangeEvent = {}
--[[
	@return [luaIde#CS.UnityEngine.UI.InputField.OnChangeEvent]
]]
function CS.UnityEngine.UI.InputField.OnChangeEvent() end

--@SuperType [luaIde#CS.UnityEngine.Events.UnityEvent`1[[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]]
CS.UnityEngine.UI.InputField.SubmitEvent = {}
--[[
	@return [luaIde#CS.UnityEngine.UI.InputField.SubmitEvent]
]]
function CS.UnityEngine.UI.InputField.SubmitEvent() end

--@SuperType [luaIde#CS.System.Enum]
CS.UnityEngine.TouchScreenKeyboardType = {}
--[[
	CS.UnityEngine.TouchScreenKeyboardType
	 Get 	 Set 
--]]
CS.UnityEngine.TouchScreenKeyboardType.Default = 0
--[[
	CS.UnityEngine.TouchScreenKeyboardType
	 Get 	 Set 
--]]
CS.UnityEngine.TouchScreenKeyboardType.ASCIICapable = 1
--[[
	CS.UnityEngine.TouchScreenKeyboardType
	 Get 	 Set 
--]]
CS.UnityEngine.TouchScreenKeyboardType.NumbersAndPunctuation = 2
--[[
	CS.UnityEngine.TouchScreenKeyboardType
	 Get 	 Set 
--]]
CS.UnityEngine.TouchScreenKeyboardType.URL = 3
--[[
	CS.UnityEngine.TouchScreenKeyboardType
	 Get 	 Set 
--]]
CS.UnityEngine.TouchScreenKeyboardType.NumberPad = 4
--[[
	CS.UnityEngine.TouchScreenKeyboardType
	 Get 	 Set 
--]]
CS.UnityEngine.TouchScreenKeyboardType.PhonePad = 5
--[[
	CS.UnityEngine.TouchScreenKeyboardType
	 Get 	 Set 
--]]
CS.UnityEngine.TouchScreenKeyboardType.NamePhonePad = 6
--[[
	CS.UnityEngine.TouchScreenKeyboardType
	 Get 	 Set 
--]]
CS.UnityEngine.TouchScreenKeyboardType.EmailAddress = 7
--[[
	CS.UnityEngine.TouchScreenKeyboardType
	 Get 	 Set 
--]]
CS.UnityEngine.TouchScreenKeyboardType.NintendoNetworkAccount = 8

--@SuperType [luaIde#CS.System.Enum]
CS.UnityEngine.UI.InputField.CharacterValidation = {}
--[[
	CS.UnityEngine.UI.InputField.CharacterValidation
	 Get 	 Set 
--]]
CS.UnityEngine.UI.InputField.CharacterValidation.None = 0
--[[
	CS.UnityEngine.UI.InputField.CharacterValidation
	 Get 	 Set 
--]]
CS.UnityEngine.UI.InputField.CharacterValidation.Integer = 1
--[[
	CS.UnityEngine.UI.InputField.CharacterValidation
	 Get 	 Set 
--]]
CS.UnityEngine.UI.InputField.CharacterValidation.Decimal = 2
--[[
	CS.UnityEngine.UI.InputField.CharacterValidation
	 Get 	 Set 
--]]
CS.UnityEngine.UI.InputField.CharacterValidation.Alphanumeric = 3
--[[
	CS.UnityEngine.UI.InputField.CharacterValidation
	 Get 	 Set 
--]]
CS.UnityEngine.UI.InputField.CharacterValidation.Name = 4
--[[
	CS.UnityEngine.UI.InputField.CharacterValidation
	 Get 	 Set 
--]]
CS.UnityEngine.UI.InputField.CharacterValidation.EmailAddress = 5

--@SuperType [luaIde#CS.System.Enum]
CS.UnityEngine.UI.ScrollRect.ScrollbarVisibility = {}
--[[
	CS.UnityEngine.UI.ScrollRect.ScrollbarVisibility
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.ScrollbarVisibility.Permanent = 0
--[[
	CS.UnityEngine.UI.ScrollRect.ScrollbarVisibility
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.ScrollbarVisibility.AutoHide = 1
--[[
	CS.UnityEngine.UI.ScrollRect.ScrollbarVisibility
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.ScrollbarVisibility.AutoHideAndExpandViewport = 2

--@SuperType [luaIde#CS.System.Enum]
CS.UnityEngine.UI.ScrollRect.MovementType = {}
--[[
	CS.UnityEngine.UI.ScrollRect.MovementType
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.MovementType.Unrestricted = 0
--[[
	CS.UnityEngine.UI.ScrollRect.MovementType
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.MovementType.Elastic = 1
--[[
	CS.UnityEngine.UI.ScrollRect.MovementType
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.MovementType.Clamped = 2

--@SuperType [luaIde#CS.UnityEngine.Events.UnityEvent`1[[UnityEngine.Vector2, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]]
CS.UnityEngine.UI.ScrollRect.ScrollRectEvent = {}
--[[
	@return [luaIde#CS.UnityEngine.UI.ScrollRect.ScrollRectEvent]
]]
function CS.UnityEngine.UI.ScrollRect.ScrollRectEvent() end

--@SuperType [luaIde#CS.UnityEngine.Events.UnityEventBase]
CS.UnityEngine.Events.UnityEvent`1[[UnityEngine.Vector2, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]] = {}
--[[
	@return [luaIde#CS.UnityEngine.Events.UnityEvent`1[[UnityEngine.Vector2, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]]
]]
function CS.UnityEngine.Events.UnityEvent`1[[UnityEngine.Vector2, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]() end
--[[
	@call CS.UnityEngine.Events.UnityAction`1{{UnityEngine.Vector2, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Events.UnityEvent`1[[UnityEngine.Vector2, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]:AddListener(call) end
--[[
	@call CS.UnityEngine.Events.UnityAction`1{{UnityEngine.Vector2, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Events.UnityEvent`1[[UnityEngine.Vector2, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]:RemoveListener(call) end
--[[
	@arg0 CS.UnityEngine.Vector2
--]]
function CS.UnityEngine.Events.UnityEvent`1[[UnityEngine.Vector2, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]:Invoke(arg0) end

--@SuperType [luaIde#CS.System.Enum]
CS.UnityEngine.UI.CanvasUpdate = {}
--[[
	CS.UnityEngine.UI.CanvasUpdate
	 Get 	 Set 
--]]
CS.UnityEngine.UI.CanvasUpdate.Prelayout = 0
--[[
	CS.UnityEngine.UI.CanvasUpdate
	 Get 	 Set 
--]]
CS.UnityEngine.UI.CanvasUpdate.Layout = 1
--[[
	CS.UnityEngine.UI.CanvasUpdate
	 Get 	 Set 
--]]
CS.UnityEngine.UI.CanvasUpdate.PostLayout = 2
--[[
	CS.UnityEngine.UI.CanvasUpdate
	 Get 	 Set 
--]]
CS.UnityEngine.UI.CanvasUpdate.PreRender = 3
--[[
	CS.UnityEngine.UI.CanvasUpdate
	 Get 	 Set 
--]]
CS.UnityEngine.UI.CanvasUpdate.LatePreRender = 4
--[[
	CS.UnityEngine.UI.CanvasUpdate
	 Get 	 Set 
--]]
CS.UnityEngine.UI.CanvasUpdate.MaxUpdateValue = 5

--@SuperType [luaIde#CS.System.Enum]
CS.UnityEngine.UI.Scrollbar.Direction = {}
--[[
	CS.UnityEngine.UI.Scrollbar.Direction
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Scrollbar.Direction.LeftToRight = 0
--[[
	CS.UnityEngine.UI.Scrollbar.Direction
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Scrollbar.Direction.RightToLeft = 1
--[[
	CS.UnityEngine.UI.Scrollbar.Direction
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Scrollbar.Direction.BottomToTop = 2
--[[
	CS.UnityEngine.UI.Scrollbar.Direction
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Scrollbar.Direction.TopToBottom = 3

--@SuperType [luaIde#CS.UnityEngine.Events.UnityEvent`1[[System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]]
CS.UnityEngine.UI.Scrollbar.ScrollEvent = {}
--[[
	@return [luaIde#CS.UnityEngine.UI.Scrollbar.ScrollEvent]
]]
function CS.UnityEngine.UI.Scrollbar.ScrollEvent() end

--@SuperType [luaIde#CS.UnityEngine.Events.UnityEvent`1[[System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]]
CS.UnityEngine.UI.Slider.SliderEvent = {}
--[[
	@return [luaIde#CS.UnityEngine.UI.Slider.SliderEvent]
]]
function CS.UnityEngine.UI.Slider.SliderEvent() end

--@SuperType [luaIde#CS.System.Enum]
CS.UnityEngine.UI.Slider.Direction = {}
--[[
	CS.UnityEngine.UI.Slider.Direction
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Slider.Direction.LeftToRight = 0
--[[
	CS.UnityEngine.UI.Slider.Direction
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Slider.Direction.RightToLeft = 1
--[[
	CS.UnityEngine.UI.Slider.Direction
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Slider.Direction.BottomToTop = 2
--[[
	CS.UnityEngine.UI.Slider.Direction
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Slider.Direction.TopToBottom = 3

--@SuperType [luaIde#CS.UnityEngine.EventSystems.UIBehaviour]
CS.UnityEngine.UI.LayoutElement = {}
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.UI.LayoutElement.ignoreLayout = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.UI.LayoutElement.minWidth = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.UI.LayoutElement.minHeight = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.UI.LayoutElement.preferredWidth = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.UI.LayoutElement.preferredHeight = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.UI.LayoutElement.flexibleWidth = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.UI.LayoutElement.flexibleHeight = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.UI.LayoutElement.layoutPriority = nil
function CS.UnityEngine.UI.LayoutElement:CalculateLayoutInputHorizontal() end
function CS.UnityEngine.UI.LayoutElement:CalculateLayoutInputVertical() end

--@SuperType [luaIde#CS.UnityEngine.EventSystems.UIBehaviour]
CS.UnityEngine.UI.ContentSizeFitter = {}
--[[
	CS.UnityEngine.UI.ContentSizeFitter.FitMode
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ContentSizeFitter.horizontalFit = nil
--[[
	CS.UnityEngine.UI.ContentSizeFitter.FitMode
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ContentSizeFitter.verticalFit = nil
function CS.UnityEngine.UI.ContentSizeFitter:SetLayoutHorizontal() end
function CS.UnityEngine.UI.ContentSizeFitter:SetLayoutVertical() end

--@SuperType [luaIde#CS.System.Enum]
CS.UnityEngine.UI.ContentSizeFitter.FitMode = {}
--[[
	CS.UnityEngine.UI.ContentSizeFitter.FitMode
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ContentSizeFitter.FitMode.Unconstrained = 0
--[[
	CS.UnityEngine.UI.ContentSizeFitter.FitMode
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ContentSizeFitter.FitMode.MinSize = 1
--[[
	CS.UnityEngine.UI.ContentSizeFitter.FitMode
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ContentSizeFitter.FitMode.PreferredSize = 2

--@SuperType [luaIde#CS.System.Object]
CS.UnityEngine.UI.LayoutUtility = {}
--[[
	@rect CS.UnityEngine.RectTransform
	@axis CS.System.Int32
	return CS.System.Single
--]]
function CS.UnityEngine.UI.LayoutUtility:GetMinSize(rect,axis) end
--[[
	@rect CS.UnityEngine.RectTransform
	@axis CS.System.Int32
	return CS.System.Single
--]]
function CS.UnityEngine.UI.LayoutUtility:GetPreferredSize(rect,axis) end
--[[
	@rect CS.UnityEngine.RectTransform
	@axis CS.System.Int32
	return CS.System.Single
--]]
function CS.UnityEngine.UI.LayoutUtility:GetFlexibleSize(rect,axis) end
--[[
	@rect CS.UnityEngine.RectTransform
	return CS.System.Single
--]]
function CS.UnityEngine.UI.LayoutUtility:GetMinWidth(rect) end
--[[
	@rect CS.UnityEngine.RectTransform
	return CS.System.Single
--]]
function CS.UnityEngine.UI.LayoutUtility:GetPreferredWidth(rect) end
--[[
	@rect CS.UnityEngine.RectTransform
	return CS.System.Single
--]]
function CS.UnityEngine.UI.LayoutUtility:GetFlexibleWidth(rect) end
--[[
	@rect CS.UnityEngine.RectTransform
	return CS.System.Single
--]]
function CS.UnityEngine.UI.LayoutUtility:GetMinHeight(rect) end
--[[
	@rect CS.UnityEngine.RectTransform
	return CS.System.Single
--]]
function CS.UnityEngine.UI.LayoutUtility:GetPreferredHeight(rect) end
--[[
	@rect CS.UnityEngine.RectTransform
	return CS.System.Single
--]]
function CS.UnityEngine.UI.LayoutUtility:GetFlexibleHeight(rect) end
--[[
	@rect CS.UnityEngine.RectTransform
	@property CS.System.Func`2{{UnityEngine.UI.ILayoutElement, UnityEngine.UI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null},{System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@defaultValue CS.System.Single
	return CS.System.Single
--]]
function CS.UnityEngine.UI.LayoutUtility:GetLayoutProperty(rect,property,defaultValue) end
--[[
	@rect CS.UnityEngine.RectTransform
	@property CS.System.Func`2{{UnityEngine.UI.ILayoutElement, UnityEngine.UI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null},{System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
	@defaultValue CS.System.Single
	@source CS.UnityEngine.UI.ILayoutElement&
	return CS.System.Single
--]]
function CS.UnityEngine.UI.LayoutUtility:GetLayoutProperty(rect,property,defaultValue,source) end

--@SuperType [luaIde#CS.UnityEngine.EventSystems.UIBehaviour]
CS.UnityEngine.UI.LayoutGroup = {}
--[[
	CS.UnityEngine.RectOffset
	 Get 	 Set 
--]]
CS.UnityEngine.UI.LayoutGroup.padding = nil
--[[
	CS.UnityEngine.TextAnchor
	 Get 	 Set 
--]]
CS.UnityEngine.UI.LayoutGroup.childAlignment = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.UI.LayoutGroup.minWidth = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.UI.LayoutGroup.preferredWidth = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.UI.LayoutGroup.flexibleWidth = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.UI.LayoutGroup.minHeight = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.UI.LayoutGroup.preferredHeight = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.UI.LayoutGroup.flexibleHeight = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.UI.LayoutGroup.layoutPriority = nil
function CS.UnityEngine.UI.LayoutGroup:CalculateLayoutInputHorizontal() end
function CS.UnityEngine.UI.LayoutGroup:CalculateLayoutInputVertical() end
function CS.UnityEngine.UI.LayoutGroup:SetLayoutHorizontal() end
function CS.UnityEngine.UI.LayoutGroup:SetLayoutVertical() end

--@SuperType [luaIde#CS.UnityEngine.UI.LayoutGroup]
CS.UnityEngine.UI.HorizontalOrVerticalLayoutGroup = {}
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.UI.HorizontalOrVerticalLayoutGroup.spacing = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.UI.HorizontalOrVerticalLayoutGroup.childForceExpandWidth = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.UI.HorizontalOrVerticalLayoutGroup.childForceExpandHeight = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.UI.HorizontalOrVerticalLayoutGroup.childControlWidth = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.UI.HorizontalOrVerticalLayoutGroup.childControlHeight = nil

--@SuperType [luaIde#CS.UnityEngine.UI.HorizontalOrVerticalLayoutGroup]
CS.UnityEngine.UI.VerticalLayoutGroup = {}
function CS.UnityEngine.UI.VerticalLayoutGroup:CalculateLayoutInputHorizontal() end
function CS.UnityEngine.UI.VerticalLayoutGroup:CalculateLayoutInputVertical() end
function CS.UnityEngine.UI.VerticalLayoutGroup:SetLayoutHorizontal() end
function CS.UnityEngine.UI.VerticalLayoutGroup:SetLayoutVertical() end

--@SuperType [luaIde#CS.UnityEngine.UI.HorizontalOrVerticalLayoutGroup]
CS.UnityEngine.UI.HorizontalLayoutGroup = {}
function CS.UnityEngine.UI.HorizontalLayoutGroup:CalculateLayoutInputHorizontal() end
function CS.UnityEngine.UI.HorizontalLayoutGroup:CalculateLayoutInputVertical() end
function CS.UnityEngine.UI.HorizontalLayoutGroup:SetLayoutHorizontal() end
function CS.UnityEngine.UI.HorizontalLayoutGroup:SetLayoutVertical() end

--@SuperType [luaIde#CS.UnityEngine.UI.LayoutGroup]
CS.UnityEngine.UI.GridLayoutGroup = {}
--[[
	CS.UnityEngine.UI.GridLayoutGroup.Corner
	 Get 	 Set 
--]]
CS.UnityEngine.UI.GridLayoutGroup.startCorner = nil
--[[
	CS.UnityEngine.UI.GridLayoutGroup.Axis
	 Get 	 Set 
--]]
CS.UnityEngine.UI.GridLayoutGroup.startAxis = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.UI.GridLayoutGroup.cellSize = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.UI.GridLayoutGroup.spacing = nil
--[[
	CS.UnityEngine.UI.GridLayoutGroup.Constraint
	 Get 	 Set 
--]]
CS.UnityEngine.UI.GridLayoutGroup.constraint = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.UI.GridLayoutGroup.constraintCount = nil
function CS.UnityEngine.UI.GridLayoutGroup:CalculateLayoutInputHorizontal() end
function CS.UnityEngine.UI.GridLayoutGroup:CalculateLayoutInputVertical() end
function CS.UnityEngine.UI.GridLayoutGroup:SetLayoutHorizontal() end
function CS.UnityEngine.UI.GridLayoutGroup:SetLayoutVertical() end

--@SuperType [luaIde#CS.UnityEngine.Component]
CS.UnityEngine.CanvasGroup = {}
--[[
	@return [luaIde#CS.UnityEngine.CanvasGroup]
]]
function CS.UnityEngine.CanvasGroup() end
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.CanvasGroup.alpha = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.CanvasGroup.interactable = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.CanvasGroup.blocksRaycasts = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.CanvasGroup.ignoreParentGroups = nil
--[[
	@sp CS.UnityEngine.Vector2
	@eventCamera CS.UnityEngine.Camera
	return CS.System.Boolean
--]]
function CS.UnityEngine.CanvasGroup:IsRaycastLocationValid(sp,eventCamera) end

--@SuperType [luaIde#CS.UnityEngine.Events.UnityEventBase]
CS.UnityEngine.Events.UnityEvent = {}
--[[
	@return [luaIde#CS.UnityEngine.Events.UnityEvent]
]]
function CS.UnityEngine.Events.UnityEvent() end
--[[
	@call CS.UnityEngine.Events.UnityAction
--]]
function CS.UnityEngine.Events.UnityEvent:AddListener(call) end
--[[
	@call CS.UnityEngine.Events.UnityAction
--]]
function CS.UnityEngine.Events.UnityEvent:RemoveListener(call) end
function CS.UnityEngine.Events.UnityEvent:Invoke() end

--@SuperType [luaIde#CS.UnityEngine.Events.UnityEventBase]
CS.UnityEngine.Events.UnityEvent`1[[System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]] = {}
--[[
	@return [luaIde#CS.UnityEngine.Events.UnityEvent`1[[System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]]
]]
function CS.UnityEngine.Events.UnityEvent`1[[System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]() end
--[[
	@call CS.UnityEngine.Events.UnityAction`1{{System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.UnityEngine.Events.UnityEvent`1[[System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]:AddListener(call) end
--[[
	@call CS.UnityEngine.Events.UnityAction`1{{System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.UnityEngine.Events.UnityEvent`1[[System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]:RemoveListener(call) end
--[[
	@arg0 CS.System.Single
--]]
function CS.UnityEngine.Events.UnityEvent`1[[System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]:Invoke(arg0) end

--@SuperType [luaIde#CS.System.ValueType]
CS.UnityEngine.GradientColorKey = {}
--[[
	@col CS.UnityEngine.Color
	@time CS.System.Single
	@return [luaIde#CS.UnityEngine.GradientColorKey]
]]
function CS.UnityEngine.GradientColorKey(col,time) end
--[[
	@RefType [luaIde#CS.UnityEngine.Color]
	 Get 	 Set 
--]]
CS.UnityEngine.GradientColorKey.color = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.GradientColorKey.time = nil

--@SuperType [luaIde#CS.System.Object]
CS.UnityEngine.RectTransformUtility = {}
--[[
	@rect CS.UnityEngine.RectTransform
	@screenPoint CS.UnityEngine.Vector2
	return CS.System.Boolean
--]]
function CS.UnityEngine.RectTransformUtility:RectangleContainsScreenPoint(rect,screenPoint) end
--[[
	@rect CS.UnityEngine.RectTransform
	@screenPoint CS.UnityEngine.Vector2
	@cam CS.UnityEngine.Camera
	@worldPoint CS.UnityEngine.Vector3&
	return CS.System.Boolean
--]]
function CS.UnityEngine.RectTransformUtility:ScreenPointToWorldPointInRectangle(rect,screenPoint,cam,worldPoint) end
--[[
	@rect CS.UnityEngine.RectTransform
	@screenPoint CS.UnityEngine.Vector2
	@cam CS.UnityEngine.Camera
	@localPoint CS.UnityEngine.Vector2&
	return CS.System.Boolean
--]]
function CS.UnityEngine.RectTransformUtility:ScreenPointToLocalPointInRectangle(rect,screenPoint,cam,localPoint) end
--[[
	@cam CS.UnityEngine.Camera
	@screenPos CS.UnityEngine.Vector2
	@return [luaIde#CS.UnityEngine.Ray]
--]]
function CS.UnityEngine.RectTransformUtility:ScreenPointToRay(cam,screenPos) end
--[[
	@cam CS.UnityEngine.Camera
	@worldPoint CS.UnityEngine.Vector3
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.RectTransformUtility:WorldToScreenPoint(cam,worldPoint) end
--[[
	@root CS.UnityEngine.Transform
	@child CS.UnityEngine.Transform
	@return [luaIde#CS.UnityEngine.Bounds]
--]]
function CS.UnityEngine.RectTransformUtility:CalculateRelativeRectTransformBounds(root,child) end
--[[
	@trans CS.UnityEngine.Transform
	@return [luaIde#CS.UnityEngine.Bounds]
--]]
function CS.UnityEngine.RectTransformUtility:CalculateRelativeRectTransformBounds(trans) end
--[[
	@rect CS.UnityEngine.RectTransform
	@axis CS.System.Int32
	@keepPositioning CS.System.Boolean
	@recursive CS.System.Boolean
--]]
function CS.UnityEngine.RectTransformUtility:FlipLayoutOnAxis(rect,axis,keepPositioning,recursive) end
--[[
	@rect CS.UnityEngine.RectTransform
	@keepPositioning CS.System.Boolean
	@recursive CS.System.Boolean
--]]
function CS.UnityEngine.RectTransformUtility:FlipLayoutAxes(rect,keepPositioning,recursive) end
--[[
	@rect CS.UnityEngine.RectTransform
	@screenPoint CS.UnityEngine.Vector2
	@cam CS.UnityEngine.Camera
	return CS.System.Boolean
--]]
function CS.UnityEngine.RectTransformUtility:RectangleContainsScreenPoint(rect,screenPoint,cam) end
--[[
	@point CS.UnityEngine.Vector2
	@elementTransform CS.UnityEngine.Transform
	@canvas CS.UnityEngine.Canvas
	@return [luaIde#CS.UnityEngine.Vector2]
--]]
function CS.UnityEngine.RectTransformUtility:PixelAdjustPoint(point,elementTransform,canvas) end
--[[
	@rectTransform CS.UnityEngine.RectTransform
	@canvas CS.UnityEngine.Canvas
	@return [luaIde#CS.UnityEngine.Rect]
--]]
function CS.UnityEngine.RectTransformUtility:PixelAdjustRect(rectTransform,canvas) end

--@SuperType [luaIde#CS.UnityEngine.EventSystems.UIBehaviour]
CS.UnityEngine.UI.ScrollRect = {}
--[[
	@RefType [luaIde#CS.UnityEngine.RectTransform]
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.content = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.horizontal = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.vertical = nil
--[[
	CS.UnityEngine.UI.ScrollRect.MovementType
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.movementType = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.elasticity = nil
--[[
	CS.System.Boolean
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.inertia = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.decelerationRate = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.scrollSensitivity = nil
--[[
	@RefType [luaIde#CS.UnityEngine.RectTransform]
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.viewport = nil
--[[
	@RefType [luaIde#CS.UnityEngine.UI.Scrollbar]
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.horizontalScrollbar = nil
--[[
	@RefType [luaIde#CS.UnityEngine.UI.Scrollbar]
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.verticalScrollbar = nil
--[[
	CS.UnityEngine.UI.ScrollRect.ScrollbarVisibility
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.horizontalScrollbarVisibility = nil
--[[
	CS.UnityEngine.UI.ScrollRect.ScrollbarVisibility
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.verticalScrollbarVisibility = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.horizontalScrollbarSpacing = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.verticalScrollbarSpacing = nil
--[[
	@RefType [luaIde#CS.UnityEngine.UI.ScrollRect.ScrollRectEvent]
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.onValueChanged = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.velocity = nil
--[[
	@RefType [luaIde#CS.UnityEngine.Vector2]
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.normalizedPosition = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.horizontalNormalizedPosition = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.UI.ScrollRect.verticalNormalizedPosition = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.UI.ScrollRect.minWidth = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.UI.ScrollRect.preferredWidth = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.UI.ScrollRect.flexibleWidth = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.UI.ScrollRect.minHeight = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.UI.ScrollRect.preferredHeight = nil
--[[
	CS.System.Single
	 Get 
--]]
CS.UnityEngine.UI.ScrollRect.flexibleHeight = nil
--[[
	CS.System.Int32
	 Get 
--]]
CS.UnityEngine.UI.ScrollRect.layoutPriority = nil
--[[
	@executing CS.UnityEngine.UI.CanvasUpdate
--]]
function CS.UnityEngine.UI.ScrollRect:Rebuild(executing) end
function CS.UnityEngine.UI.ScrollRect:LayoutComplete() end
function CS.UnityEngine.UI.ScrollRect:GraphicUpdateComplete() end
function CS.UnityEngine.UI.ScrollRect:IsActive() end
function CS.UnityEngine.UI.ScrollRect:StopMovement() end
--[[
	@data CS.UnityEngine.EventSystems.PointerEventData
--]]
function CS.UnityEngine.UI.ScrollRect:OnScroll(data) end
--[[
	@eventData CS.UnityEngine.EventSystems.PointerEventData
--]]
function CS.UnityEngine.UI.ScrollRect:OnInitializePotentialDrag(eventData) end
--[[
	@eventData CS.UnityEngine.EventSystems.PointerEventData
--]]
function CS.UnityEngine.UI.ScrollRect:OnBeginDrag(eventData) end
--[[
	@eventData CS.UnityEngine.EventSystems.PointerEventData
--]]
function CS.UnityEngine.UI.ScrollRect:OnEndDrag(eventData) end
--[[
	@eventData CS.UnityEngine.EventSystems.PointerEventData
--]]
function CS.UnityEngine.UI.ScrollRect:OnDrag(eventData) end
function CS.UnityEngine.UI.ScrollRect:CalculateLayoutInputHorizontal() end
function CS.UnityEngine.UI.ScrollRect:CalculateLayoutInputVertical() end
function CS.UnityEngine.UI.ScrollRect:SetLayoutHorizontal() end
function CS.UnityEngine.UI.ScrollRect:SetLayoutVertical() end

--@SuperType [luaIde#CS.UnityEngine.UI.Selectable]
CS.UnityEngine.UI.Scrollbar = {}
--[[
	@RefType [luaIde#CS.UnityEngine.RectTransform]
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Scrollbar.handleRect = nil
--[[
	CS.UnityEngine.UI.Scrollbar.Direction
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Scrollbar.direction = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Scrollbar.value = nil
--[[
	CS.System.Single
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Scrollbar.size = nil
--[[
	CS.System.Int32
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Scrollbar.numberOfSteps = nil
--[[
	@RefType [luaIde#CS.UnityEngine.UI.Scrollbar.ScrollEvent]
	 Get 	 Set 
--]]
CS.UnityEngine.UI.Scrollbar.onValueChanged = nil
--[[
	@executing CS.UnityEngine.UI.CanvasUpdate
--]]
function CS.UnityEngine.UI.Scrollbar:Rebuild(executing) end
function CS.UnityEngine.UI.Scrollbar:LayoutComplete() end
function CS.UnityEngine.UI.Scrollbar:GraphicUpdateComplete() end
--[[
	@eventData CS.UnityEngine.EventSystems.PointerEventData
--]]
function CS.UnityEngine.UI.Scrollbar:OnBeginDrag(eventData) end
--[[
	@eventData CS.UnityEngine.EventSystems.PointerEventData
--]]
function CS.UnityEngine.UI.Scrollbar:OnDrag(eventData) end
--[[
	@eventData CS.UnityEngine.EventSystems.PointerEventData
--]]
function CS.UnityEngine.UI.Scrollbar:OnPointerDown(eventData) end
--[[
	@eventData CS.UnityEngine.EventSystems.PointerEventData
--]]
function CS.UnityEngine.UI.Scrollbar:OnPointerUp(eventData) end
--[[
	@eventData CS.UnityEngine.EventSystems.AxisEventData
--]]
function CS.UnityEngine.UI.Scrollbar:OnMove(eventData) end
function CS.UnityEngine.UI.Scrollbar:FindSelectableOnLeft() end
function CS.UnityEngine.UI.Scrollbar:FindSelectableOnRight() end
function CS.UnityEngine.UI.Scrollbar:FindSelectableOnUp() end
function CS.UnityEngine.UI.Scrollbar:FindSelectableOnDown() end
--[[
	@eventData CS.UnityEngine.EventSystems.PointerEventData
--]]
function CS.UnityEngine.UI.Scrollbar:OnInitializePotentialDrag(eventData) end
--[[
	@direction CS.UnityEngine.UI.Scrollbar.Direction
	@includeRectLayouts CS.System.Boolean
--]]
function CS.UnityEngine.UI.Scrollbar:SetDirection(direction,includeRectLayouts) end

--@SuperType [luaIde#CS.System.Object]
CS.UnityEngine.Events.UnityEventBase = {}
function CS.UnityEngine.Events.UnityEventBase:GetPersistentEventCount() end
--[[
	@index CS.System.Int32
	@return [luaIde#CS.UnityEngine.Object]
--]]
function CS.UnityEngine.Events.UnityEventBase:GetPersistentTarget(index) end
--[[
	@index CS.System.Int32
	return CS.System.String
--]]
function CS.UnityEngine.Events.UnityEventBase:GetPersistentMethodName(index) end
--[[
	@index CS.System.Int32
	@state CS.UnityEngine.Events.UnityEventCallState
--]]
function CS.UnityEngine.Events.UnityEventBase:SetPersistentListenerState(index,state) end
function CS.UnityEngine.Events.UnityEventBase:RemoveAllListeners() end
function CS.UnityEngine.Events.UnityEventBase:ToString() end
--[[
	@obj CS.System.Object
	@functionName CS.System.String
	@argumentTypes CS.System.Type{}
	return CS.System.Reflection.MethodInfo
--]]
function CS.UnityEngine.Events.UnityEventBase:GetValidMethodInfo(obj,functionName,argumentTypes) end

--@SuperType [luaIde#CS.UnityEngine.Events.UnityEventBase]
CS.UnityEngine.Events.UnityEvent`1[[UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]] = {}
--[[
	@return [luaIde#CS.UnityEngine.Events.UnityEvent`1[[UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]]
]]
function CS.UnityEngine.Events.UnityEvent`1[[UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]() end
--[[
	@call CS.UnityEngine.Events.UnityAction`1{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Events.UnityEvent`1[[UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]:AddListener(call) end
--[[
	@call CS.UnityEngine.Events.UnityAction`1{{UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null}}
--]]
function CS.UnityEngine.Events.UnityEvent`1[[UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]:RemoveListener(call) end
--[[
	@arg0 CS.UnityEngine.Vector3
--]]
function CS.UnityEngine.Events.UnityEvent`1[[UnityEngine.Vector3, UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]:Invoke(arg0) end

--@SuperType [luaIde#CS.UnityEngine.Events.UnityEventBase]
CS.UnityEngine.Events.UnityEvent`1[[System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]] = {}
--[[
	@return [luaIde#CS.UnityEngine.Events.UnityEvent`1[[System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]]
]]
function CS.UnityEngine.Events.UnityEvent`1[[System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]() end
--[[
	@call CS.UnityEngine.Events.UnityAction`1{{System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.UnityEngine.Events.UnityEvent`1[[System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]:AddListener(call) end
--[[
	@call CS.UnityEngine.Events.UnityAction`1{{System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.UnityEngine.Events.UnityEvent`1[[System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]:RemoveListener(call) end
--[[
	@arg0 CS.System.Int32
--]]
function CS.UnityEngine.Events.UnityEvent`1[[System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]:Invoke(arg0) end

--@SuperType [luaIde#CS.UnityEngine.Events.UnityEventBase]
CS.UnityEngine.Events.UnityEvent`1[[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]] = {}
--[[
	@return [luaIde#CS.UnityEngine.Events.UnityEvent`1[[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]]
]]
function CS.UnityEngine.Events.UnityEvent`1[[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]() end
--[[
	@call CS.UnityEngine.Events.UnityAction`1{{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.UnityEngine.Events.UnityEvent`1[[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]:AddListener(call) end
--[[
	@call CS.UnityEngine.Events.UnityAction`1{{System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089}}
--]]
function CS.UnityEngine.Events.UnityEvent`1[[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]:RemoveListener(call) end
--[[
	@arg0 CS.System.String
--]]
function CS.UnityEngine.Events.UnityEvent`1[[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]:Invoke(arg0) end


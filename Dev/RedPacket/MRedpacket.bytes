local EventCenter = JRequire "Dev.EventCenter"
local HeartBeat = JRequire "Dev.Player.HeartBeat"

local _M = {}
local _P = {}

_M.REDPACKET_CD = Csv.Const(93)
_M.REDPACKET_SHOW = 1800

_M.isShowTicks = false
_M.ShowpacketHandle = nil
_M.isRedTicks = false
_M.RedpacketHandle = nil

_M.GetRedPacketTime = 0
_M.isRedPackets = false
_M.redPacketList = {}
_M.redPackInfo = {}

function _M.Clean()
	if _M.isRedTicks then
		EventCenter.UnRegistCallEvent(_M.RedpacketHandle)
	end

	_M.GetRedPacketTime = 0
	_M.isShowTicks = false
	_M.isRedTicks = false
	_M.isRedPackets = false
	_M.redPacketList = {}
	_M.redPackInfo = {}
end

function _M.InitRedPacket(data)
	_M.redPacketList = {}
	if data.list ~= nil then
		for k,v in pairs(data.list)do
			local redpacket =  _P.OnRedpacketInfo(v)
			table.insert(_M.redPacketList,redpacket)
		end
	end
	_M.GetRedPacketTime = _M.GetNearPacket()--HeartBeat.ServSecond()
	_M.RefreshShowTick()
	_M.RefreshRedPacketTick()

	_P.CheckIsRedPacket()
	

end

function _M.GetNewRedPacket(data)
	if data.redPacket ~= nil then
		local redpacket =  _P.OnRedpacketInfo(data.redPacket)
		table.insert(_M.redPacketList,redpacket)
	end
	_M.GetRedPacketTime = _M.GetNearPacket()--HeartBeat.ServSecond()
	_M.RefreshShowTick()
	_M.RefreshRedPacketTick()

	_P.CheckIsRedPacket()
	
end

--已领完，已领取 都移除
function _M.RemoveRedPacket(id)
	if _M.redPacketList ~= nil then
		for k,v in pairs(_M.redPacketList)do
			if v.id == id then
				table.remove(_M.redPacketList,k)
			end
		end
	end
	_P.CheckIsRedPacket()
end

function _M.SetRedpacketInfo(data)
	_M.redPackInfo = {
		id = data.id,
		result = data.result,
		redPacket = _P.OnRedpacketInfo(data.redPacket)
	}
end

function _P.OnRedpacketInfo(data)
	local redPacket = {
		id = data.id,
		senderId = data.senderId,
		senderName = data.senderName,
		senderHead = data.senderHead,
		sendTime = data.sendTime,
		type = data.type,
		gold = data.gold,
		leftGold = data.leftGold,
		packetNum = data.packetNum,
		receivedNum = data.receivedNum,
		receiverList = _P.GetReceiverList(data),
		expireTime = data.sendTime + _M.REDPACKET_CD,
		talkChannel = data.talkChannel,
	}
	return redPacket
end

function _P.GetReceiverList(data)
	receiverList = {}
	if data.receiverList ~= nil then
		for k,v in pairs(data.receiverList)do
			local RedPacketReceiver = {
				playerId = v.playerId,
				playerName = v.playerName,
				head = {headid = v.head.headid,gender = v.head.gender},
				playerId = v.playerId,
				gold = v.gold,
				time = v.time,
			}
			table.insert(receiverList,v)
		end
	end
	return receiverList
end

--已领完，已过期
function _P.CheckIsRedPacket()
	_M.isRedPackets = false
	if _M.redPacketList ~= nil and #_M.redPacketList > 0 and _M.isShowTicks then
		_M.isRedPackets = true
	end
	--
	WindowMgr.Call("UMain", "RefreshRedpacket")
end


--检测红包过期
function _M.RefreshRedPacketTick()
	if _M.isRedTicks == false then
		local tick = _P.GetRedpacketTick()
		if tick>0 then
			_M.isRedTicks = true
			_M.RedpacketHandle = EventCenter.RegistCallEvent(Define.EventListenId.SecondUpdate,function (eventHandle, now)
				local _tick = _P.GetRedpacketTick()
				if _tick > 0 then
					for k,v in pairs(_M.redPacketList)do
						if v.expireTime < HeartBeat.ServSecond() then
							--过期
							_M.RemoveRedPacket(v.id)
						end
					end
				else
					_M.isRedTicks = false
					EventCenter.UnRegistCallEvent(eventHandle)
				end
			end)
		end
	end
end

function _M.GetTopRedPacked()
	if _M.redPacketList ~= nil and #_M.redPacketList > 0 then
		return _M.redPacketList[1]
	end
	return nil
end

function _P.GetRedpacketTick()
	local tick = 0
	for k,v in pairs(_M.redPacketList)do
		if v.expireTime ~= nil then
			if tick < v.expireTime then
				tick = v.expireTime
			end
		end
	end
	return tick
end

---------------------
function _M.GetNearPacket()
	local packList = _M.redPacketList
	local lessTime = 0
	if packList ~= nil then
		for k,v in pairs(packList)do
			if v.sendTime > lessTime then
				lessTime = v.sendTime
			end
		end
	end
	return lessTime
end

--检测红包展示时间
function _M.RefreshShowTick()
	if _M.isShowTicks == false then
		local tick = _M.GetRedPacketTime
		if tick>0 then
			_M.isShowTicks = true
			_M.ShowpacketHandle = EventCenter.RegistCallEvent(Define.EventListenId.SecondUpdate,function (eventHandle, now)
				local _tick = _M.GetRedPacketTime
				if _tick > 0 then
					if HeartBeat.ServSecond() - _tick >= _M.REDPACKET_SHOW then
						_M.GetRedPacketTime = 0

						_M.isShowTicks = false
						_M.ShowpacketHandle = nil
						_P.CheckIsRedPacket()
						EventCenter.UnRegistCallEvent(eventHandle)
					end
				end
			end)
		end
	end
end

_M.RedPacketType = {
	isNotOpen = 1,
	isGot = 2,
	isGetOver = 4,
	isPass = 3,
}

--红包弹窗最多显示红包数
_M.MaxShowRedPacketNum = 12

function _M.GetAllRedPacket()
	local count = #_M.redPacketList
	if _M.redPacketList == nil or count == 0 then
		return
	end
	local dataList = {}
	for index, data in ipairs(_M.redPacketList) do
		data.headid = data.senderHead.headid
		data.gender = data.senderHead.gender
		dataList[index] = data
	end
	if count > _M.MaxShowRedPacketNum then
		for index = _M.MaxShowRedPacketNum + 1, count do
			dataList[index] = nil
		end
	end
	table.sort(dataList, _M.SortRedPacketData)
	return dataList
end

function _M.SortRedPacketData(left, right)
	return left.expireTime < right.expireTime
end

return _M
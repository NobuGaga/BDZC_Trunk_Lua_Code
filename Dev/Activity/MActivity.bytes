local MMain = JRequire "Dev.Main.MMain"
local MPlayer = JRequire "Dev.Player.MPlayer"
local HeartBeat = JRequire "Dev.Player.HeartBeat"
local _M = {}

_M.ActivityState = 
{
	Waiting = 1,	--未开始
	Doing = 2,		--进行中
	Finish = 3,		--已结束（显示界面）
	Close = 4,		--关闭（不显示界面）
}

_M.RewardGetState = 
{
	CanNotGet = 2,	--不可领取
	CanGet = 0,		--可领取
	Geted = 1,		--已领取
	Buying = 3,		--订单处理中
}

_M.CharityGetState = 
{
	CanGet = 1, --可领取
	Geted = 2,	--已领取
	CanNotGet = 3,--不能领取
}

_M.AdventureTaskType = 
{
	Event = 1,
	Box = 2,
	PersonBoss = 3,
	GangBoss = 4,
}

_M.AdventureTypeEnum = {
	Person = 1,
	Gang = 2,
}

_M.XinGuanTypeEnum = {
	Gang = 1,
	Personal = 2
}

_M.AdvReqTypeEnum = {
	Gongguan = 1, --公关
	Xingzheng = 2,--行政
	Tech = 3,	  --技术
	Sell = 4,	  --营销
	Sex = 5,	  --性别
	Nationality = 6,--国籍
	Age = 7,		--年龄
	YuanGong = 8,	--员工
	Job = 9,		--职位
	cloth = 10,		--衣服颜色
	tile = 11,		--领带颜色
	glass = 12, 	--戴眼镜
}

_M.AdvSexEnum = {
	Female = 1,	-- 女性
	Man = 2, 	--	男性
}

--全局配置表冲榜活动商会冲榜榜单类型
local CommerceRankType = Csv.Const(67)
_M.CommerceRank = {}
if CommerceRankType and type(CommerceRankType) == "table" then
	for _, rankType in ipairs(CommerceRankType) do
		_M.CommerceRank[rankType] = true
	end
end

-- 消费积分返利，设置每一阶段每一类型请求刷新标记
function _M.GetConsumePointRefreshState()
	local stateList = {}
	for i=1,3 do
		local stageNum = _M.GetConsumePointStageNum(i)
		if stageNum > 0 then
			local typeList = {}
			for j=1,stageNum do
				typeList[j] = false
			end

			stateList[i] = typeList
		end
	end

	return stateList
end


function _M.GetConsumePointStageNum(typeId)
	local stageNum = 0
	for k,v in pairs(Csv.ConsumeScore) do
		if v.consumeType == typeId then
			stageNum = stageNum + 1
		end
	end

	return stageNum
end

_M.FuturesState = {
	DEF = 1, -- 未抽取
	CHOU=2, -- 已抽取
	RECHARGE=3 -- 已充值
}

_M.ActList = {}
_M.ActTypeCached = {}
_M.ActRankTypeToID = {}
_M.ActRedpointCached = {}
_M.ActRankQuestTime = {}
_M.XinGuanStatus = {} 				-- 新官上任活动，每日有个时间段，标记每日是否在活动时间段内
_M.IsUpdateTime1 = false 			-- 新官上任，倒计时为0，向后端请求数据标记
_M.IsUpdateTime2 = false 			-- 新官上任，倒计时为0，向后端请求数据标记
_M.ActIdForType = {}				-- 活动类型对应活动ID
_M.LotteryMessage = {}				-- 抽奖消息
_M.LotterySuperGetter = {playerId = 0, playerName = ""}
_M.XinGuanRed = false
_M.XinGuanRankRed = false
_M.SevenDayTargetPageRedIndex = -1	-- 七日目标今日目标页签红点Index
_M.MaxStageNum = tonumber(Csv.Const(20151))
_M.InvestmentRed = false
_M.FuturesSelectIndex = 0 -- 操纵期货 选择的文件
_M.FuturesReward = {} -- 操纵期货中奖信息
_M.AdventureShopRed = false
_M.AdventureAchieveRed = false
_M.GloalTravalRed = false
_M.TravalDicsItemId = tonumber(Csv.Const(20158))
_M.IsTravalAutoBuy = false -- 环球旅行自动购买标记
_M.AdventureTaskNames = Csv.Const(20161) -- 奇遇任务四大类型图片
_M.AdventureConstData = Csv.Const(20162) -- 奇遇系统全局配置表数据
_M.AdventureBattleRewards = {}			 -- 奇遇系统战斗奖励
_M.IsShowsOneRecharge = true
_M.AdventureUpdateTmp = nil
_M.IsMidFireAutoBuy = false
_M.IsMergeSerFireAutoBuy = false
_M.ConsumePointReqState = _M.GetConsumePointRefreshState()
_M.ConsumePointRed = false
_M.FlopCardRed = {}
_M.FlopCardRefreshData = {} -- 倒计时数据
_M.IsExploreAutoBuy = false -- 探险寻宝自动购买标记
_M.CharityFirstRed = false -- 慈善活动首次打开红点
_M.CharitableRankRed = false -- 排行版红点

function _M.Clean()
	_M.ActList = {}
	_M.ActTypeCached = {}
	_M.ActRankTypeToID = {}
	_M.ActRedpointCached = {}	
	_M.ActRankQuestTime = {}
	_M.ActIdForType = {}
	_M.IsUpdateTime1 = false
	_M.IsUpdateTime2 = false
	_M.XinGuanStatus = {}
	_M.LotteryMessage = {}
	_M.LotterySuperGetter = {playerId = 0, playerName = ""}
	_M.XinGuanRed = false
	_M.XinGuanRankRed = false
	_M.InvestmentRed = false
	_M.FuturesSelectIndex = 0
	_M.FuturesReward = {}
	_M.AdventureShopRed = false
	_M.AdventureAchieveRed = false
	_M.GloalTravalRed = false
	_M.IsTravalAutoBuy = false
	_M.AdventureBattleRewards = {}
	_M.IsShowsOneRecharge = true
	_M.AdventureUpdateTmp = nil
	_M.IsMidFireAutoBuy = false
	_M.IsMergeSerFireAutoBuy = false
	_M.ConsumePointReqState = _M.GetConsumePointRefreshState()
	_M.ConsumePointRed = false
	_M.FlopCardRed = {}
	_M.FlopCardRefreshData = {}
	_M.IsExploreAutoBuy = false
	_M.CharityFirstRed = false
	_M.CharitableRankRed = false
end

function _M.ClearForType(actType)
	local list = _M.ActTypeCached[actType]
	if list ~= nil then
		for k,v in pairs(list) do
			_M.ActList[k] = nil
			_M.ActRedpointCached[k] = nil
		end
		_M.ActTypeCached[actType] = nil
	end
end

function _M.ClearForId(actId)
	if _M.ActList ~= nil and _M.ActList[actId] ~= nil then
		local actType = _M.ActList[actId].actType
		_M.ActList[actId] = nil
		_M.ActRedpointCached[actId] = nil
		if _M.ActTypeCached[actType] ~= nil then
			_M.ActTypeCached[actType][actId] = nil
			if not _M.IsHaveActForType(actType) then
				_M.ActTypeCached[actType] = nil
			end
		end
	end
end

function _M.ClearAll()
	_M.ActList = {}
	_M.ActTypeCached = {}
	_M.ActRankTypeToID = {}
end

function _M.UpdateAct(id, type, info)
	_M.ActList[id] = info
	local tmp = _M.ActTypeCached[type]
	if tmp ~= nil then
		tmp[id] = info
	else
		tmp = {[id] = info}
	
		_M.ActTypeCached[type] = tmp
	end
	_M.ActIdForType[type] = id

	if info and info.selfRank and info.rankType then
		_M.ActRankTypeToID[info.rankType] = id
	end
end

function _M.ActRedpoint(id, index, needRedpoint)
	local tmp = _M.ActRedpointCached[id]
	if tmp == nil then
		tmp = {[index] = needRedpoint}
		_M.ActRedpointCached[id] = tmp
		return true
	elseif tmp[index] ~= needRedpoint then
		tmp[index] = needRedpoint
		return true
	end
	return false
end

--根据活动ID或活动索引项获取活动红点情况
function _M.IsHaveRedpointForAct(actId, index)
	if actId ~= nil then
		local actRedpoint = _M.ActRedpointCached[actId]
		if actRedpoint ~= nil then	
			if index ~= nil then
				return actRedpoint[index]
			end
			for _, isCanGet in pairs(actRedpoint) do
				if isCanGet then
					return true
				end
			end
		end
		return false
	end
	return false
end

function _M.GetListFromType(actType)
	return _M.ActTypeCached[actType]
end

function _M.GetFromId(actId)
	return _M.ActList[actId]
end

function _M.IsHaveActForType(actType)
	return _M.ActTypeCached[actType] ~= nil and next(_M.ActTypeCached[actType]) ~= nil
end

function _M.SetLastRankTime(id, time)
	if _M.ActRankQuestTime ~= nil then
		_M.ActRankQuestTime[id] = time
	end
end

function _M.GetLastRankTime(id)
	if _M.ActRankQuestTime ~= nil and _M.ActRankQuestTime[id] ~= nil then
		return _M.ActRankQuestTime[id]
	end
	return nil
end

--获取充值奖励切页状态
function _M.GetRechargeOpenFunc()
	local funcs = {}
	local csvLines = Csv.FuncMap[Define.SysId.RechargeReward]
	if csvLines ~= nil and #csvLines > 0 then
		for k,v in pairs(csvLines) do
			if MMain.FuncIsOpen(v.id) then
				if (v.id == Define.SysId.RechargeReward_Day and _M.GetListFromType(Define.ActivityType.RechargeReward_Day) ~= nil) or
					(v.id == Define.SysId.RechargeReward_Total and _M.GetListFromType(Define.ActivityType.RechargeReward_Total) ~= nil) or
					 (v.id == Define.SysId.RechargeReward_TotalDay and _M.GetListFromType(Define.ActivityType.RechargeReward_TotalDay) ~= nil) or
					  (v.id == Define.SysId.RechargeReward_DailyGift and _M.GetListFromType(Define.ActivityType.RechargeReward_DailyGift) ~= nil) or
					  	(v.id == Define.SysId.RechargeReward_Single and _M.GetListFromType(Define.ActivityType.RechargeReward_Single) ~= nil) then
						table.insert(funcs, v)
				end
			end
		end
	end
	if #funcs > 0 then
		table.sort( funcs, function (a, b)
			return a.sort < b.sort
		end )
	end
	
	return funcs
end

--更新带有榜单类型的活动自己排名数据
function _M.UpdateActivitySelfRank(rankType, selfRank, selfValue)
	if _M.ActRankTypeToID and _M.ActRankTypeToID[rankType] and _M.ActList and 
									 _M.ActList[_M.ActRankTypeToID[rankType]] then
		local actData = _M.ActList[_M.ActRankTypeToID[rankType]]
		if not _M.CommerceRank[rankType] then
			if actData.selfRank and selfRank then
				actData.selfRank = selfRank
			end
			if actData.rankPro and selfValue then
				actData.rankPro = selfValue
			end
		end
		return true
	else
		return false
	end
end

function _M.UpdatePersonEvent(actId,data)
	if _M.ActList[actId] ~= nil then
		--看下事件是不是满了
		local count = 0
		for k,v in pairs(_M.ActList[actId].personalTasklist) do
			count = count + 1
		end
		if count == Csv.Const(20162)[1] then
			local removeIndex = -1
			for k,v in pairs(_M.ActList[actId].personalTasklist) do
				if removeIndex == -1 then
					removeIndex = v.taskIndex
				end
				if removeIndex > v.taskIndex then
					removeIndex = v.taskIndex
				end
			end
			--移除
			_M.ActList[actId].personalTasklist[removeIndex] = nil
		end
		local event = _M.GetNewOneTask(data)
		_M.ActList[actId].personalTasklist[event.taskIndex] = event
	end
end

-- 是否是自己参与的事件
function _M.IsJoin(datalist)
	if datalist == nil then return false end

	for k,v in pairs(datalist) do
		if v.playerId == MPlayer.GetId() then
			return true
		end
	end
	return false
end

function _M.GetNewOneTask(data)
	local eventInfo = {}
	local otherEventRule = {}
	local adventureItemCsv = Csv.AdventureMainEvent[data.taskId]
	if adventureItemCsv == nil then
		error("事件id"..data.taskId.."错误")
		return
	end

	if data.eventInfo ~= nil then
		for i=1, #data.eventInfo do
			if data.eventInfo[i].index < 100 then
				local item = {
					index = data.eventInfo[i].index,
					attrInfo = {}
				}
				if data.eventInfo[i].attrInfo ~= nil then
					for k,v in pairs(data.eventInfo[i].attrInfo) do
						local one = {
							type = v.type,
							val = v.value,
							extra = v.extra,
						}
						item.attrInfo[k] = one
					end
					eventInfo[i] = item
				end
			elseif data.eventInfo[i].index == 100 then
				otherEventRule = {[1] = data.eventInfo[i].attrInfo[1].type, [2] = data.eventInfo[i].attrInfo[1].value}
			end
		end
	end

	local one = {
		title = adventureItemCsv.title,
		start = adventureItemCsv.start,
		quality = adventureItemCsv.quality,
		desc = adventureItemCsv.desc,
		eventInfo = eventInfo,
		taskId = data.taskId,
		taskIndex = data.taskIndex,
		otherEventRule = otherEventRule,
		curblood = data.curblood or 0,
		totalBlood = data.totalBlood or 0,
		bossTriTime = data.bossTriTime or 0,
		taskState = data.state or 0,
		joinInfo = data.joinInfo or {},
		isDown = data.isDown or false
	}
	return one
end

--奇遇更新商城数据
function _M.UpdateAdvShop(data)
	local shopData = _M.ActList[data.actId].shop
	if shopData ~= nil then
		for k,v in pairs(shopData.itemList) do
			if v.index == data.index then
				v.buyCount = data.buyCount
				break
			end
		end
	end
end

--奇遇刷新后商店数据更新
function _M.SetShopAdvData(data)
	_M.ActList[data.actId].shop = data
end

-- 奇遇，拆分奖励，得到普通物品奖励、积分、奇遇币
function _M.AdventureRewardSplit(rewardList)
	local rewards = {}
	rewards.items = {}
	rewards.point = 0
	rewards.currency = 0
	rewards.exp = 0

	if rewardList ~= nil then
		for k,v in pairs(rewardList) do
			if v.id == _M.AdventureConstData[10] or v[1] == _M.AdventureConstData[10] then 		-- 积分
				rewards.point = (v.count or v[2])
			elseif v.id == _M.AdventureConstData[11] or v[1] == _M.AdventureConstData[11] then	-- 商会经验
				rewards.exp = (v.count or v[2])
			else
				if v.id == _M.AdventureConstData[7] or v[1] == _M.AdventureConstData[7] then	-- 奇遇币
					rewards.currency = (v.count or v[2])
				end
				rewards.items[#rewards.items + 1] = v
			end
		end
	end

	return rewards
end

-- isBossBattle是否是商会boss
function _M.OpenBattleView(addExp, isBossBattle, blood, bossFullBlood, bossImg, bossTab, bossBg, startCallBack)
	local csvBattleTab = Csv.BattleIcon[bossTab]
	local csvBattleScene = Csv.BattleIcon[bossBg]
	WindowMgr.Create("UBattleBossNew", {bossBlood = blood, bossFullBlood = bossFullBlood, bossImg = bossImg, bossTab = csvBattleTab.str, bossBg = csvBattleScene.str},
		function()
			if startCallBack ~= nil then startCallBack() end
		end,
		function(data,param)
			if not isBossBattle and (data.result == nil or data.result == false) then
				WindowMgr.Create("UAdventureBattleFail", function( ... )
					WindowMgr.Destroy("UBattleBossNew")

					if _M.AdventureUpdateTmp ~= nil then
						if WindowMgr.IsCreated("UAdventureMain") then
							WindowMgr.Call("UAdventureMain", "UpdateOwnData", _M.AdventureUpdateTmp, false)
						end
						_M.AdventureUpdateTmp = nil
					end
				end)
			else
				WindowMgr.Create("UAdventureBattleWin", addExp, function( ... )
					WindowMgr.Destroy("UBattleBossNew")

					if _M.AdventureUpdateTmp ~= nil then
						if WindowMgr.IsCreated("UAdventureMain") then
							WindowMgr.Call("UAdventureMain", "UpdateOwnData", _M.AdventureUpdateTmp, false)
						end
						_M.AdventureUpdateTmp = nil
					end
				end)
			end
		end
	)
end

function _M.GetFuturesData()
	local typeId = Define.ActivityType.Futures
	local data = _M.GetListFromType(typeId)
	if data == nil then
		return nil
	end
	local activityId = _M.ActIdForType[typeId]
	if data[activityId] == nil then
		return nil
	end
	return data[activityId]
end

-- 环球旅行
function _M.GetCurExchageData(exchangeShop, exchangeId)
	if exchangeShop == nil then
		return {id = exchangeId, count = 0}
	end

	if exchangeShop[exchangeId] == nil then
		return {id = exchangeId, count = 0}
	end
	
	return exchangeShop[exchangeId]
end

function _M.CheckThisItemIsLight(exchangeConf, exchangeShop, data, numId)
	local needList = {}
	for k,v in pairs(exchangeConf.diceItems) do
		if needList[v[1]] == nil then
			needList[v[1]] = v[2]
		else
			needList[v[1]] = needList[v[1]] + v[2]
		end
	end

	local count = 0
	local totalNum = 0
	for k,v in pairs(needList) do
		local hasData = (data and data[k]) or nil
		local hasCount = (hasData and hasData.count) or 0
		if v <= hasCount then
			count = count + 1
		end

		totalNum = totalNum + 1
	end

	local curExchangeData = _M.GetCurExchageData(exchangeShop, exchangeConf.id)
	local curNum = exchangeConf.limitCount - curExchangeData.count
	return count ~= totalNum or curNum == 0
end

function _M.CheckHasExchange(actId, exchangeShop, numberCount)
	local isHas = false
	for k,v in pairs(Csv.GlobalTravalExchange) do
		if v.actId == actId and not _M.CheckThisItemIsLight(v, exchangeShop, numberCount, v.id) then
			isHas = true
			break
		end
	end

	return isHas
end


-- 中秋活动，每天档位不一样，若找不到当天档位，默认取最后一位的
function _M.GetTodayData(listData, today)
	if listData == nil then
		return
	end

	local curData = listData[today]
	if curData then
		return curData
	else
		return listData[#listData]
	end
end


-- 欢乐周末-合服活动，判断是否有该系统该类型的活动数据
function _M.CheckHasFixActData(actTypeList, funcId)
	if actTypeList ~= nil then
		for k,actType in pairs(actTypeList) do
			local actDataList = _M.GetListFromType(actType)
			if actDataList then
				for actKey, actData in pairs(actDataList) do
					if actData.sysId == funcId then
						return true
					end
				end
			end
		end
	end
	
	return false
end


return _M
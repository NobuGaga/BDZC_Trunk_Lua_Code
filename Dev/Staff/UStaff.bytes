local WindowBase = JRequire "Libs.WindowMgr.WindowBase"
local MStaff = JRequire "Dev.Staff.MStaff"
local WindowType = JRequire "Libs.WindowMgr.WindowType"
local SoundMgr = JRequire "Libs.Sound.SoundMgr"
local ScrollGrid = JRequire "Dev.Common.ScrollGrid"
local MMain = JRequire "Dev.Main.MMain"
local ULineUp = JRequire "Dev.LineUp.ULineUp"
local UStaffList = JRequire "Dev.Staff.UStaffList"
local TabGroup = JRequire "Dev.Common.TabGroup"

local _M = Class(WindowBase)
local _P = {}
local _R = {}

--事件派发
function _M:Dispatch(funcName, ...)
	local fun = _R[funcName]
	if fun ~= nil then 
		fun(self, ...)
	end
end

function _M:BeforeDestroy()
	if self.ChooseMoudle ~= nil then
		self.ChooseMoudle:delete()
		self.ChooseMoudle = nil
	end
end

--界面构建
function _M:OnCreate(sysId)
	local moudle = self:CreateMoudle(self._RootNode, "M_Staff_UMain")
	self.mMoudle = moudle

	--默认打开队伍
	if sysId == nil or sysId == Define.SysId.Staff then
		sysId = Define.SysId.LineUp
	end
	local lightColor = Color(91/255, 0/255, 0/255, 1)
	self.tabHandle = TabGroup.new(function (sysId)
		_P.OnChoose(self, sysId)
	end, "duiwu2", "duiwu1", nil, lightColor)

	local funcs = MMain.GetOpenedFuncs(Define.SysId.Staff,true)
	local firstSysId = nil
	for k, v in pairs(funcs) do
		if v.id == sysId then
			firstSysId = sysId
		end
		if not firstSysId then
			firstSysId = v.id
		end
		self.tabHandle:Add(v.id, moudle:Get("C_Btn_a"..k), moudle:Get("C_text"..k), v.name)
	end

	self.mTabContentRoot = moudle:Get("TabContentRoot")
	local TextTitle = moudle:Get("C_Text")
	TextTitle.Text = Csv.Text("staff_title")
	
	local BtnClose = moudle:Get("C_Back_Btn")
	BtnClose:AddOnButton(function ( ... )
		SoundMgr.Play(10002)
		self:Destroy()
		end, nil, 1.2)

	local BtnRule = moudle:Get("C_Full_Help_Btn")
	BtnRule:AddOnButton(function ( ... )
		SoundMgr.Play(10001)
		WindowMgr.Create("URuleTips",Define.SysId.Staff)
		end, nil, 1.2)

	self.tabHandle:Choose(firstSysId)

	self:RegistRedpoint(moudle:Get("teamRed1"), Define.SysId.Staff, Define.SysId.Staff_List)
	self:RegistRedpoint(moudle:Get("teamRed2"), Define.SysId.Staff, Define.SysId.LineUp)
end

function _P.OnChoose(self, sysId)
	if self.ChooseMoudle ~= nil then
		self.ChooseMoudle:Destroy()
		self.ChooseMoudle:delete()
		self.ChooseMoudle = nil
	end

	self.mCurTabSysId = sysId
	if sysId == Define.SysId.Staff_List then
		self.ChooseMoudle = UStaffList.new(self.mTabContentRoot)
	elseif sysId == Define.SysId.LineUp then
		self.ChooseMoudle = ULineUp.new(self.mTabContentRoot)
	end
end

---------------------------------------------------------------------------------
--员工列表 refresh
function _R.ChangeStaffLv(self,staffid)
	if self.mCurTabSysId == Define.SysId.Staff_List and self.ChooseMoudle then
		self.ChooseMoudle:ChangeStaffLv(staffid)
	end
end

function _R.ChangeStaffColor(self,staffid)
	if self.ChooseMoudle ~= nil then
		self.ChooseMoudle:ChangeStaffColor(staffid)
	end
end

function _R.RefreshStaffName(self,id)
	if self.mCurTabSysId == Define.SysId.Staff_List and self.ChooseMoudle then
		self.ChooseMoudle:RefreshStaffName(staffid)
	end
end

------队伍 refresh
function _R.LineUpdateEquip(self)
	if self.mCurTabSysId == Define.SysId.LineUp and self.ChooseMoudle then
		self.ChooseMoudle:Dispatch("UpdateEquip")
	end
end

function _R.LineSetList(self)
	if self.mCurTabSysId == Define.SysId.LineUp and self.ChooseMoudle then
		self.ChooseMoudle:Dispatch("SetList")
	end
end

function _R.OnLineUpOpen(self)
	if self.mCurTabSysId == Define.SysId.LineUp and self.ChooseMoudle then
		self.ChooseMoudle:Dispatch("OnLineUpOpen")
	end
end

function _R.SetNowSelect(self, index)
	if self.mCurTabSysId == Define.SysId.LineUp and self.ChooseMoudle then
		self.ChooseMoudle:Dispatch("SetNowSelect", index)
	end
end

function _R.SetNoSelect(self)
	if self.mCurTabSysId == Define.SysId.LineUp and self.ChooseMoudle then
		self.ChooseMoudle:Dispatch("SetNoSelect")
	end
end

function _R.StaffChange(self)
	if self.mCurTabSysId == Define.SysId.LineUp and self.ChooseMoudle then
		self.ChooseMoudle:Dispatch("StaffChange")
	end
end

function _R.JumptoEmptyItem(self)
	if self.mCurTabSysId == Define.SysId.LineUp and self.ChooseMoudle then
		self.ChooseMoudle:Dispatch("JumptoEmptyItem")
	end
end

return _M
local MCrossArena = JRequire "Dev.CrossArena.MCrossArena"
local EventCenter = JRequire "Dev.EventCenter"
local CMain = JRequire "Dev.Main.CMain"
local MMain = JRequire "Dev.Main.MMain"
local CCommon = JRequire "Dev.Common.CCommon"
local HeartBeat = JRequire "Dev.Player.HeartBeat"
local MPlayer = JRequire "Dev.Player.MPlayer"

local _M = {}
local _P = {}

local CMD_ID = 
{
	cCUArenaTopRank = 1,				--竞技场前10名信息请求	
	cCUMatchInfo = 2,					--请求匹配信息
	cCUMatchPlayer = 3,					--请求匹配玩家
	cCUArenaFight = 4,					--请求战斗
	cCUArenaReward = 5,					--请求领取积分排名奖励	PCrossArena.CCUArenaReward
	cCUArenaChipInfo = 6,				--请求押注信息 
	cCUArenaChip = 7,					--请求押注				PCrossArena.CCUArenaChip
	cCUArenaFightRecord = 8,			--请求战斗记录--获取淘汰赛数据
	
	sCUArenaTopRank = 1,				--竞技场战力前10榜单	PCrossArena.SRankList
	sCUMatchInfo = 2,					--匹配信息				PCrossArena.SCUArenaMatchInfo
	sCUMatchPlayer = 3,					--请求匹配玩家			PCrossArena.SCUArenaMatchInfo
	sCUArenaFight = 4,					--战斗结果下发			PCrossArena.SCUArenaFight
	sCUArenaReward = 5,					--领取积分排名奖励		PCrossArena.SCUArenaReward 
	sCUArenaChipInfo = 6,				--押注信息				PCrossArena.SCUArenaChipInfo 
	sCUArenaChip = 7,					--押注
	sCUArenaFightRecord = 8,			--战斗记录				PCrossArena.SCUArenaFightRecord --返回淘汰赛数据
	sCUArenaActUpdate = 10,		  		--活动状态更新			PCrossArena.SInit
	sCUArenaVsPlayer = 11,		  		--战斗记录即将对决玩家下发	PCrossArena.SCUArenaVsPlayer
	sCUArenaMyChip = 12,		  		--我的押注玩家			PCrossArena.SCUArenaMyChip
}

function _M.ModuleInit(isReload)
	local send = {
		[CMD_ID.cCUArenaTopRank] = "",
		[CMD_ID.cCUMatchInfo] = "",
		[CMD_ID.cCUMatchPlayer] = "",
		[CMD_ID.cCUArenaFight] = "",
		[CMD_ID.cCUArenaReward] = "PCrossArena.CCUArenaReward",
		[CMD_ID.cCUArenaChipInfo] = "",
		[CMD_ID.cCUArenaChip] = "PCrossArena.CCUArenaChip",
		[CMD_ID.cCUArenaFightRecord] = "",
	}
	local recv = {
		[CMD_ID.sCUArenaTopRank]	=		{proto = "PCrossArena.SRankList",			handle = _P.OnSRankList},
		[CMD_ID.sCUMatchInfo]		=		{proto = "PCrossArena.SCUArenaMatchInfo",	handle = _P.OnSCUArenaMatchInfo},
		[CMD_ID.sCUMatchPlayer]		=		{proto = "PCrossArena.SCUArenaMatchInfo",	handle = _P.OnSPCUArenaPlayer},
		[CMD_ID.sCUArenaFight]		=		{proto = "PCrossArena.SCUArenaFight",		handle = _P.OnSCUArenaFight},
		[CMD_ID.sCUArenaReward]		=		{proto = "PCrossArena.SCUArenaReward",		handle = _P.OnSCUArenaReward},
		[CMD_ID.sCUArenaChipInfo]	=		{proto = "PCrossArena.SCUArenaChipInfo",	handle = _P.OnSCUArenaChipInfo},
		[CMD_ID.sCUArenaFightRecord]=		{proto = "PCrossArena.SCUArenaFightRecord",	handle = _P.OnSCUArenaFightRecord},
		[CMD_ID.sCUArenaActUpdate]	=		{proto = "PCrossArena.SCorssArenaInit",	handle = _P.OnSInit},
		[CMD_ID.sCUArenaVsPlayer]	=		{proto = "PCrossArena.SCUArenaVsPlayer",	handle = _P.OnCUArenaVsPlayer},
		[CMD_ID.sCUArenaMyChip]		=		{proto = "PCrossArena.SCUArenaMyChip",	handle = _P.OnCUArenaMyChip},
	}
	_M.Send = SocketMgr.Regist(Define.SysId.CrossArena, send, recv, isReload)
end

_P.STAGE_TRANSFORM_UI_FUNC =
{
	["KNOCKOUT_UI"] = function()
		local isInArenaUI = false
		if WindowMgr.IsCreated("UCrossArenaKnockoutReady") then
			WindowMgr.Destroy("UCrossArenaKnockoutReady")
			isInArenaUI = true
		end
		if WindowMgr.IsCreated("UCrossArenaKnockoutToday") then
			WindowMgr.Destroy("UCrossArenaKnockoutToday")
			isInArenaUI = true
		end
		if WindowMgr.IsCreated("UCrossArenaKnockoutBattle") then
			--WindowMgr.Destroy("UCrossArenaKnockoutBattle")
			isInArenaUI = true
		end
		if WindowMgr.IsCreated("UCrossArenaKnockoutAll") then
			WindowMgr.Destroy("UCrossArenaKnockoutAll")
			isInArenaUI = true
		end
		return isInArenaUI
	end,
	[MCrossArena.ARENA_STAGE_TYPE.None] = function(openUI)
		--TODO(关闭所有跨服竞技场界面)
	end,
	[MCrossArena.ARENA_STAGE_TYPE.Ready] = function(openUI)
		if openUI then
			MCrossArena.SaveCacheCrossArenaStartTime()
			_M.CheckRedpoint()
			WindowMgr.Create("UCrossArena")
		end
	end,
	[MCrossArena.ARENA_STAGE_TYPE.ReadyRslt] = function(openUI)
		local isInArenaUI = false
		if WindowMgr.IsCreated("UCrossArena") then
			--WindowMgr.Destroy("UCrossArena")
			isInArenaUI = true
		end
		if openUI or isInArenaUI then
			_M.CCUArenaTopRank()
			WindowMgr.Create("UCrossArenaInRank")
		end
	end,
	[MCrossArena.ARENA_STAGE_TYPE.ScoreMatch] = function(openUI)
		local isInArenaUI = false
		if WindowMgr.IsCreated("UCrossArenaInRank") then
			CCommon.ShowRight(Csv.Text("cross_arena_tips2"))
			--WindowMgr.Destroy("UCrossArenaInRank")
			isInArenaUI = true
		end
		if openUI or isInArenaUI then
			if MCrossArena.GetIsCanScoreMatch() then
				_M.CCUMatchInfo()
			else
				WindowMgr.Create("UCrossArenaScoreRank")
			end
		end
	end,
	[MCrossArena.ARENA_STAGE_TYPE.ScoreMatchRslt] = function(openUI)
		local isInArenaUI = false
		if WindowMgr.IsCreated("UCrossArenaScoreBattle") then
			--WindowMgr.Destroy("UCrossArenaScoreBattle", true)
			isInArenaUI = true
		end
		if WindowMgr.IsCreated("UCrossArenaScoreReady") then
			WindowMgr.Destroy("UCrossArenaScoreReady")
			isInArenaUI = true
		end
		if isInArenaUI then
			CCommon.ShowRight(Csv.Text("cross_arena_tips3"))
		end
		if openUI or isInArenaUI then
			WindowMgr.Create("UCrossArenaScoreRank")
		end
	end,
	[MCrossArena.ARENA_STAGE_TYPE.SixTeenReady] = function(openUI)
		local isInArenaUI = false
		if WindowMgr.IsCreated("UCrossArenaScoreRank") then
			CCommon.ShowRight(Csv.Text("cross_arena_tips4"))
			--WindowMgr.Destroy("UCrossArenaScoreRank")
			isInArenaUI = true
		end
		if openUI or isInArenaUI then
			_M.CCUArenaChipInfo()
			MCrossArena.SaveCacheCrossArenaStage()
			_M.CheckRedpoint()
		end
	end,
	[MCrossArena.ARENA_STAGE_TYPE.SixTeenBattle] = function(openUI)
		local isInArenaUI = _P.STAGE_TRANSFORM_UI_FUNC["KNOCKOUT_UI"]()
		if isInArenaUI then
			CCommon.ShowRight(Csv.Text("cross_arena_tips5", {num = 16}))
		end
		if openUI or isInArenaUI then
			_M.CCUArenaFightRecord()
			WindowMgr.Create("UCrossArenaKnockoutBattle", MCrossArena.ARENA_STAGE_TYPE.SixTeenBattle)
			MCrossArena.SaveCacheCrossArenaStage()
			_M.CheckRedpoint()
		end
	end,
	[MCrossArena.ARENA_STAGE_TYPE.EightReady] = function(openUI)
		local isInArenaUI = _P.STAGE_TRANSFORM_UI_FUNC["KNOCKOUT_UI"]()
		if isInArenaUI then
			CCommon.ShowRight(Csv.Text("cross_arena_tips6", {num = 16, num2 = 8}))
		end
		if openUI or isInArenaUI then
			_M.CCUArenaChipInfo()
			MCrossArena.SaveCacheCrossArenaStage()
			_M.CheckRedpoint()
		end
	end,
	[MCrossArena.ARENA_STAGE_TYPE.EightBattle] = function(openUI)
		local isInArenaUI = _P.STAGE_TRANSFORM_UI_FUNC["KNOCKOUT_UI"]()
		if isInArenaUI then
			CCommon.ShowRight(Csv.Text("cross_arena_tips5", {num = 8}))
		end
		if openUI or isInArenaUI then
			_M.CCUArenaFightRecord()
			WindowMgr.Create("UCrossArenaKnockoutBattle", MCrossArena.ARENA_STAGE_TYPE.EightBattle)
			MCrossArena.SaveCacheCrossArenaStage()
			_M.CheckRedpoint()
		end
	end,
	[MCrossArena.ARENA_STAGE_TYPE.FourReady] = function(openUI)
		local isInArenaUI = _P.STAGE_TRANSFORM_UI_FUNC["KNOCKOUT_UI"]()
		if isInArenaUI then
			CCommon.ShowRight(Csv.Text("cross_arena_tips6", {num = 8, num2 = 4}))
		end
		if openUI or isInArenaUI then
			_M.CCUArenaChipInfo()
			MCrossArena.SaveCacheCrossArenaStage()
			_M.CheckRedpoint()
		end
	end,
	[MCrossArena.ARENA_STAGE_TYPE.FourBattle] = function(openUI)
		local isInArenaUI = _P.STAGE_TRANSFORM_UI_FUNC["KNOCKOUT_UI"]()
		if isInArenaUI then
			CCommon.ShowRight(Csv.Text("cross_arena_tips5", {num = 4}))
		end
		if openUI or isInArenaUI then
			_M.CCUArenaFightRecord()
			WindowMgr.Create("UCrossArenaKnockoutBattle", MCrossArena.ARENA_STAGE_TYPE.FourBattle)
			MCrossArena.SaveCacheCrossArenaStage()
			_M.CheckRedpoint()
		end
	end,
	[MCrossArena.ARENA_STAGE_TYPE.FinalReady] = function(openUI)
		local isInArenaUI = _P.STAGE_TRANSFORM_UI_FUNC["KNOCKOUT_UI"]()
		if isInArenaUI then
			CCommon.ShowRight(Csv.Text("cross_arena_tips7", {num = 4}))
		end
		if openUI or isInArenaUI then
			_M.CCUArenaChipInfo()
			MCrossArena.SaveCacheCrossArenaStage()
			_M.CheckRedpoint()
		end
	end,
	[MCrossArena.ARENA_STAGE_TYPE.FinalBattle] = function(openUI)
		local isInArenaUI = _P.STAGE_TRANSFORM_UI_FUNC["KNOCKOUT_UI"]()
		if isInArenaUI then
			CCommon.ShowRight(Csv.Text("cross_arena_tips8"))
		end
		if openUI or isInArenaUI then
			_M.CCUArenaFightRecord()
			WindowMgr.Create("UCrossArenaKnockoutBattle", MCrossArena.ARENA_STAGE_TYPE.FinalBattle)
			MCrossArena.SaveCacheCrossArenaStage()
			_M.CheckRedpoint()
		end
	end,
	[MCrossArena.ARENA_STAGE_TYPE.FinalRslt] = function(openUI)
		local isInArenaUI = _P.STAGE_TRANSFORM_UI_FUNC["KNOCKOUT_UI"]()
		-- if isInArenaUI then
		-- 	CCommon.ShowRight(Csv.Text("cross_arena_tips9"))
		-- end
		if not MCrossArena.GetIsArenaOpen() then 
			return
		end
		if openUI or isInArenaUI then
			_M.CCUArenaChipInfo()
		end
	end,
}

--清空模块
function _M.ModuleClean()
	MCrossArena.Clean()
end

function _M.OpenUI()
	local curStage = MCrossArena.GetArenaStageType()
	local func = _P.STAGE_TRANSFORM_UI_FUNC[curStage]
	if func then
		func(true)
	end
end

------------------------------------C=>S
function _M.CCUArenaTopRank()
	_M.Send(CMD_ID.cCUArenaTopRank)
end

function _M.CCUMatchInfo()
	_M.Send(CMD_ID.cCUMatchInfo)
end

function _M.CCUMatchPlayer()
	_M.Send(CMD_ID.cCUMatchPlayer)
end

function _M.CCUArenaFight()
	_M.Send(CMD_ID.cCUArenaFight)
end

--type:1:积分排名奖励 2:玩家押注奖励 3:押注奖池奖励 4:淘汰赛奖励
function _M.CCUArenaReward(type, playerid)
	_M.Send(CMD_ID.cCUArenaReward, {type = type, playerid = playerid or 0})
end

function _M.CCUArenaChipInfo()
	_M.Send(CMD_ID.cCUArenaChipInfo)
end

--//type1:一票, 2:全下, index对应分组
function _M.CCUArenaChip(playerId, type, index)
	_M.Send(CMD_ID.cCUArenaChip, {playerId = playerId, type = type, index = index})
end

--请求所有比赛数据-赛程表
function _M.CCUArenaFightRecord()
	_M.Send(CMD_ID.cCUArenaFightRecord)
end

------------------------------------S=>C
function _P.RefreshMainBtn()
	WindowMgr.Call("UMain", "RefreshTopBtns")
end

-- --小红点相关
-- function _P.IsShowRedpoint()
-- 	local arenaStage = MCrossArena.GetArenaStageType()
-- 	if arenaStage == MCrossArena.ARENA_STAGE_TYPE.Ready then
-- 		--预备筛选阶段，第一次打开
-- 		return not MCrossArena.IsSaveCacheCrossArenaStartTime()
-- 	elseif arenaStage == MCrossArena.ARENA_STAGE_TYPE.ScoreMatch then
-- 		--积分赛，如果有匹配次数，一直红点提示
-- 		return MCrossArena.GetScoreMatchCount() > 0
-- 	elseif arenaStage == MCrossArena.ARENA_STAGE_TYPE.SixTeenReady 
-- 		or arenaStage == MCrossArena.ARENA_STAGE_TYPE.SixTeenBattle
-- 		or arenaStage == MCrossArena.ARENA_STAGE_TYPE.EightReady
-- 		or arenaStage == MCrossArena.ARENA_STAGE_TYPE.EightBattle
-- 		or arenaStage == MCrossArena.ARENA_STAGE_TYPE.FourReady
-- 		or arenaStage == MCrossArena.ARENA_STAGE_TYPE.FourBattle
-- 		or arenaStage == MCrossArena.ARENA_STAGE_TYPE.FinalReady
-- 		or arenaStage == MCrossArena.ARENA_STAGE_TYPE.FinalBattle then
-- 			--竞选对决阶段，所有人每日首次登陆游戏就给一次红点，进入活动页后不再显示红点
-- 			return not MCrossArena.IsSaveCacheCrossArenaStage()
-- 	end
-- 	return false
-- end

function _P.OnSInit(data)
	local preState = MCrossArena.GetStateType()
	local preStage = MCrossArena.GetArenaStageType()
	MCrossArena.SetInit(data)
	local curStage = MCrossArena.GetArenaStageType()
	local curState = MCrossArena.GetStateType()
	if preStage ~= curStage or preState ~= curState then
		_P.RefreshMainBtn()
		local func = _P.STAGE_TRANSFORM_UI_FUNC[curStage]
		if func then
			func()
		end
	end
	_M.CheckRedpoint()
end

function _P.OnVsPlayer(data)
	local preState = MCrossArena.GetStateType()
	local preStage = MCrossArena.GetArenaStageType()
	MCrossArena.SetInit(data)
	local curStage = MCrossArena.GetArenaStageType()
	local curState = MCrossArena.GetStateType()
	if preStage ~= curStage or preState ~= curState then
		_P.RefreshMainBtn()
		local func = _P.STAGE_TRANSFORM_UI_FUNC[curStage]
		if func then
			func()
		end
	end
	_M.CheckRedpoint()
end

function _P.OnSRankList(data)
	MCrossArena.SetScoreRankList(data)
	if WindowMgr.IsCreated("UCrossArenaInRank") then
		WindowMgr.Call("UCrossArenaInRank", "RefreshData")
	end
	_M.CheckRedpoint()
end

function _P.OnSCUArenaMatchInfo(data)
	MCrossArena.SetSCUArenaMatchInfo(data)
	if data and data.other then
		WindowMgr.Create("UCrossArenaScoreBattle")
	else
		WindowMgr.Create("UCrossArenaScoreReady")
	end
	_M.CheckRedpoint()
end

function _P.OnSPCUArenaPlayer(data)
	MCrossArena.SetSCUArenaMatchInfo(data)
	if WindowMgr.IsCreated("UCrossArenaScoreReady") then
		WindowMgr.Call("UCrossArenaScoreReady", "RefreshData")
	end
	_M.CheckRedpoint()
end

function _P.OnSCUArenaFight(data)
	--匹配玩家战斗信息
	--1.战斗完关闭战斗PVPUI，战斗完关闭UCrossArenaScoreBattle，显示UCrossArenaScoreReady
	WindowMgr.Call("UCrossArenaScoreBattle", "OnArenaFight", data)
end

function _P.OnSCUArenaReward(data)
	local rewardinfo
	if data.type == MCrossArena.REWARD_TYPE.ChipPool and MCrossArena.SCUArenaChipInfo ~= nil then
		rewardinfo = MCrossArena.SCUArenaChipInfo.reward
	end

	MCrossArena.SetArenaRewardFlag(data)
	if WindowMgr.IsCreated("UCrossArenaScoreRank") then
		WindowMgr.Call("UCrossArenaScoreRank", "RefreshData", data)
	end
	if WindowMgr.IsCreated("UCrossArenaKnockoutToday") then
		WindowMgr.Call("UCrossArenaKnockoutToday", "RefreshData", data, rewardinfo)
	end
	if WindowMgr.IsCreated("UCrossArenaKnockoutReward") then
		WindowMgr.Call("UCrossArenaKnockoutReward", "RefreshData", data)
	end
	_M.CheckRedpoint()
end

function _P.OnSCUArenaChipInfo(data)
	MCrossArena.SetSCUArenaChipInfo(data)
	if data.update then
		--服务器主动发送过来更新内容
		if WindowMgr.IsCreated("UCrossArenaKnockoutReady") then
			WindowMgr.Call("UCrossArenaKnockoutReady", "RefreshData")
		end
		if WindowMgr.IsCreated("UCrossArenaKnockoutToday") then
			WindowMgr.Call("UCrossArenaKnockoutToday", "RefreshData")
		end
	else
		if WindowMgr.IsCreated("UCrossArenaKnockoutBattle") then
			WindowMgr.Destroy("UCrossArenaKnockoutBattle")
		end
		local stage = MCrossArena.GetArenaStageType()
		if MCrossArena.GetIsCanKnockoutMatch() and stage ~= MCrossArena.ARENA_STAGE_TYPE.FinalRslt then	
			WindowMgr.Create("UCrossArenaKnockoutReady")
		else
			WindowMgr.Create("UCrossArenaKnockoutToday")
		end
	end
	_M.CheckRedpoint()
end

--所有淘汰赛数据
function _P.OnSCUArenaFightRecord(data)
	MCrossArena.SetKnockoutAll(data)
	--赛程表
	if WindowMgr.IsCreated("UCrossArenaKnockoutAll") then
		WindowMgr.Call("UCrossArenaKnockoutAll", "RefreshData")
	end
	_M.CheckRedpoint()
end

function _P.OnCUArenaVsPlayer(data)
	--赛程表下一轮比赛信息
	if WindowMgr.IsCreated("UCrossArenaKnockoutAll") then
		WindowMgr.Call("UCrossArenaKnockoutAll", "RefreshNextVsData",data)
	end
end

function _P.OnCUArenaMyChip(data)
	MCrossArena.SetCUArenaMyChip(data.playerlist)
	WindowMgr.Call("UCrossArenaKnockoutBattle", "RefreshCUArenaMyChip")
	_M.CheckRedpoint()
end

function _M.CheckRedpoint()
	local canShow = MCrossArena.GetArenaStageType() == MCrossArena.ARENA_STAGE_TYPE.ScoreMatchRslt and MCrossArena.GetIsCanScoreMatch()
	CMain.UpdateRedpoint(canShow and MCrossArena.GetIsRedCanScore(), Define.SysId.CrossArena, 1, 1)	
	CMain.UpdateRedpoint(MCrossArena.GetIsRedCanOut(), Define.SysId.CrossArena, 2, 2)
	CMain.UpdateRedpoint(MCrossArena.GetIsRedPoint(), Define.SysId.CrossArena, 2, 1)
	CMain.UpdateRedpoint(MCrossArena.GetIsRedCanChip(), Define.SysId.CrossArena, 2, 3)
end

--debug
function _M.DebugDo(funcname, data)
	if _P[funcname] then
		_P[funcname](data)
	end	
end

return _M
--有商会的主界面（第一楼）

----------------------文件引用--------------------------
local WindowType = JRequire "Libs.WindowMgr.WindowType"
--@RefType [Dev.Commerce.CCommerce.bytes#_M]
local CCommerce = JRequire "Dev.Commerce.CCommerce"
--@RefType [Dev.Commerce.MCommerce.bytes#_M]
local MCommerce = JRequire "Dev.Commerce.MCommerce"
--@RefType [Dev.Common.CCommon.bytes#_M]
local CCommon = JRequire "Dev.Common.CCommon"
--@RefType [Dev.Main.MMain.bytes#_M]
local MMain = JRequire "Dev.Main.MMain"
--@RefType [Dev.Talk.MTalk.bytes#_M]
local MTalk = JRequire "Dev.Talk.MTalk"
local SoundMgr = JRequire "Libs.Sound.SoundMgr"
local MActivity = JRequire "Dev.Activity.MActivity"
local CVote = JRequire "Dev.Vote.CVote"
local HeartBeat = JRequire "Dev.Player.HeartBeat"

----------------------常量定义--------------------------

--外部接口模块 *** 只放置共有接口, 禁止放变量
local _M = Class()
--私有函数模块 *** 只放置私有函数, 禁止放变量
local _P = {}

_P.BtnPress =
{
	[Define.SysId.Commerce_Build] = function(self)
		WindowMgr.Create("UCommerceBuild")
	end,
	[Define.SysId.Commerce_Recharge] = function(self)
		WindowMgr.Create("UComRecharge")
	end,
	[Define.SysId.Commerce_Members] = function(self)
		WindowMgr.Create("UCommerceMembers")
	end,
	[Define.SysId.Commerce_Exchange] = function(self)
		WindowMgr.Create("UCommerceExchange")
	end,
}
_P.BtnLightUpdate =
{
	[Define.SysId.Commerce_Build] = function(self)
		local data = MCommerce.MyCommerceInfo
		local myInfo = MCommerce.MyCommerceInfo.myInfo
		local moudle = self.Moudle
		local funcInfo = self.Funcs[Define.SysId.Commerce_Build]
		if funcInfo.light ~= nil then
			local commerceConf = Csv.Commerce[data.level]
			funcInfo.light.Activity = (myInfo.build <= 0) and ((not data.buildTimes) or (data.buildTimes and data.buildTimes < commerceConf.count))
		end
	end,
	[Define.SysId.Commerce_Members] = function(self)
		local funcInfo = self.Funcs[Define.SysId.Commerce_Members]
		if funcInfo ~= nil and funcInfo.light ~= nil then
			funcInfo.light.Activity = false
		end
	end,
	[Define.SysId.Commerce_Exchange] = function(self)
		local funcInfo = self.Funcs[Define.SysId.Commerce_Exchange]
		if funcInfo ~= nil and funcInfo.light ~= nil then
			funcInfo.light.Activity = false
		end
	end,
}

function _M:WaitCreateSuccess()
	self.IsWaitShowSuccess = true
	self.Lock.RaycastTarget = true
end

function _M:OnUpdateName()
	local data = MCommerce.MyCommerceInfo
	local moudle = self.Moudle
	--名字
	moudle:Get("NameText").Text = data.name
end

function _M:OnRefreshDissolutionTime()
	self.cancelDissolutionBtn.Activity = MCommerce.IsCommerceHuiZhang() and MCommerce.IsDissolution()
	self.dissolutionBg.Activity = MCommerce.IsDissolution()
	self.dissolutionTips.Activity = MCommerce.IsDissolution()

	local function cancelCounTime(self)
		if self.dissolutionCountTime then
			self.dissolutionCountTime:Destroy()
			self.dissolutionCountTime = nil
		end
	end

	if MCommerce.IsDissolution() then
		cancelCounTime(self)

		local time = MCommerce.GetDissolutionTime() - HeartBeat.ServSecond()
		self.dissolutionTips.Text = Csv.Text("commerce_detai128", { time = LuaUtil.GetTimeHMS(time) })

		self.dissolutionCountTime = self.dissolutionBg:AddOnUpdate(function()
			local time = MCommerce.GetDissolutionTime() - HeartBeat.ServSecond()
			if MCommerce.IsDissolution() then
				self.dissolutionTips.Text = Csv.Text("commerce_detai128", { time = LuaUtil.GetTimeHMS(time)})
			else
				cancelCounTime(self)
			end
		end, nil, 1)
	else
		cancelCounTime(self)
	end
end

function _M:OnUpdateExp()
	local data = MCommerce.MyCommerceInfo
	local moudle = self.Moudle
	local csv = Csv.Commerce[data.level]
	--图标
	-- moudle:Get("GangInfo").SpriteName = csv.icon
	--背景
	moudle:Get("BG").SpriteName = csv.scene
	--人物
	moudle:Get("BSX").SpriteName = csv.actor
	--等级
	moudle:Get("lvNum").Text = tostring(data.level)
	--经验
	moudle:Get("Bar").FillAmount = data.exp / csv.exp
	moudle:Get("Numtext").Text = data.exp .. "/" .. csv.exp
end

function _M:OnUpdateNotice()
	local data = MCommerce.MyCommerceInfo
	local moudle = self.Moudle
	--公告
	local czBtn = moudle:Get("JxBtn")
	if czBtn and czBtn.Activity == true then
		moudle:Get("NoticeText").Text = Csv.Text("commerce_battle39")
	else
		moudle:Get("NoticeText").Text = data.notice or ""
	end
end

function _M:OnUpdatemeMyInfo()
	local myInfo = MCommerce.MyCommerceInfo.myInfo
	local moudle = self.Moudle
	--职位
	moudle:Get("OfferText").Text = MCommerce.GetJobStr(myInfo.job)
	--功能按钮
	local funcs = MMain.GetOpenedFuncs(Define.SysId.Commerce, true)
	local count = #funcs
	local index = 0
	self.Funcs = {}
	if count > 0 then
		for _,funcCsv in pairs(funcs) do
			local tmpId = funcCsv.id
			index = index + 1

			local btn = moudle:Get("Btn"..index)
			if tmpId == Define.SysId.Commerce_Recharge then -- 商会充值只有在活动开启的时候才会显示
				btn.Activity = _P.CheckRechargeIsSee()
			else
				btn.Activity = true
			end
			btn.SpriteName = funcCsv.icon

			local light = moudle:Get("light"..index)
			self.Funcs[tmpId] = {btn = btn, light = light}

			if tmpId ~= Define.SysId.Commerce_Recharge then
				_P.BtnLightUpdate[tmpId](self)
			end

			btn:AddOnButton(function()
				SoundMgr.Play(10001)
				_P.BtnPress[tmpId](self)
			end)
		end
	end
	for i=index + 1,4 do
		moudle:Get("Btn"..i).Activity = false
	end
end

function _P.CheckRechargeIsSee()
	local info = nil
	if MActivity.GetListFromType(Define.ActivityType.Commerce_Recharge) ~= nil then
		local data = MActivity.GetListFromType(Define.ActivityType.Commerce_Recharge)
		local actId = MActivity.ActIdForType[Define.ActivityType.Commerce_Recharge]
		if actId ~= nil then
			info = data[actId]
		end
	end

	return info ~= nil and (info.state.state == MActivity.ActivityState.Doing or info.state.state == MActivity.ActivityState.Finish)
end

_P.MessageStr =
{
	[1] = function(info)
		-- 创建
		return Csv.Text("commerce_main10")
	end,
	[2] = function(info)
		-- 加入
		return Csv.Text("commerce_main11")
	end,
	[3] = function(info)
		-- 退出
		return Csv.Text("commerce_main12")
	end,
	[4] = function(info)
		-- 踢出
		return Csv.Text("commerce_main13", {job = MCommerce.GetJobStr(info.param1), name = info.param2})
	end,
	[5] = function(info)
		-- 转让
		if info.param1 == 1 then
			--主动转让
			return Csv.Text("commerce_main19", {name = info.param2})
		else
			--超过15天没有登录
			return Csv.Text("commerce_main20", {name = info.param2})
		end
	end,
	[6] = function(info)
		-- 任命
		return Csv.Text("commerce_main14", {job1 = MCommerce.GetJobStr(info.param1), name = info.param2, job2 = MCommerce.GetJobStr(info.param3)})
	end,
	[7] = function(info)
		-- 建设
		local buildCsv = Csv.CommerceBuild[info.param1]
		return Csv.Text("commerce_main15", {build = buildCsv.name, reward = buildCsv.rewardText})
	end,
	[8] = function(info)
		-- 开启副本
		local battleCsv = Csv.CommerceBattle[info.param3]
		if info.param1 == 1 then
			return Csv.Text("commerce_main16", {cost = battleCsv.cost1, battle = battleCsv.name})
		else
			return Csv.Text("commerce_main17", {cost = battleCsv.cost2, battle = battleCsv.name})
		end
	end,
	[9] = function(info)
		-- 击杀副本BOSS
		local battleCsv = Csv.CommerceBattle[info.param1]
		return Csv.Text("commerce_main18", {battle = battleCsv.name, reward = battleCsv.killText})
	end,
}
function _P.GetMessageStr(info)
	return _P.MessageStr[info.type](info)
end

function _M:OnUpdatemeDynamics()
	local dynamics = MCommerce.MyCommerceInfo.dynamics
	local count = #dynamics
	if count > 0 then
		local moudle = self.Moudle
		local lastInfo = dynamics[count]
		moudle:Get("NameText").Text = lastInfo.name
		moudle:Get("Info").Text = _P.GetMessageStr(lastInfo)
	end
end

function _P.UpdateMessage(self, isActivity)
	local data = MCommerce.MyCommerceInfo
	local moudle = self.Moudle
	local content = moudle:Get("content")
	content:DestroyChildren()
	if isActivity then
		local dynamics = MCommerce.MyCommerceInfo.dynamics
		local count = #dynamics
		if count > 0 then
			local lastIndex = math.max(1, count - 20)
			local index = 1
			for i=count,lastIndex,-1 do
				local info = dynamics[i]
				local childMoudle = JGuiManager.GetMoudle(content, "M_MoreInfo_Item")
				childMoudle:Get("Index").Text = tostring(index)
				childMoudle:Get("position").Text = Csv.Text("commerce_main8")
				childMoudle:Get("Name").Text = info.name
				childMoudle:Get("InfoText").Text = _P.GetMessageStr(info)
				childMoudle:Get("TimeText").Text = Csv.Text("commerce_main9")
				childMoudle:Get("TimeNum").Text = LuaUtil.TransToYearMonthDayHMS(info.time)
				index = index + 1
			end
		end
	end
end

--打开界面回包
function _M:OnOpen()
	local data = MCommerce.MyCommerceInfo
	local moudle = self.Moudle

	self:OnUpdateName()
	self:OnUpdateExp()
	self:OnUpdateNotice()
	self:OnUpdatemeMyInfo()
	self:OnUpdatemeDynamics()
	self:OnRefreshDissolutionTime()
	self:OnRefreshActivityBtn()
	
	if self.IsWaitShowSuccess then
		self.IsWaitShowSuccess = false
		WindowMgr.Create("UCommerceCreateSuccess")
	end

	self.Lock.RaycastTarget = false
end

--聊天刷新
function _M:OnTalkUpdate(sender, value)
	if self.ChatText ~= nil then
		self.ChatText.Text = "<color=#e2c7a9>"..sender.."：</color>"..value
	end
end

function _M:BeforeDestroy()
	if MCommerce.MyCommerceId ~= nil and MCommerce.MyCommerceId > 0 then
		CCommerce.CloseReq()
	end
end


--界面构建
function _M:ctor(parent, registRedpointFunc)
	self.Funcs = {}

	self._RootNode = parent
	local moudle = JGuiManager.GetMoudle(self._RootNode, "M_Gang_Main_1", WindowType.UI, 0)
	self.Moudle = moudle
	self.Lock = moudle:Get("lock")

	CCommerce.OpenReq()
	self.dissolutionBg = moudle:Get("DissolutionTipsBg")
	self.dissolutionTips = moudle:Get("DissolutionTips")
	moudle:Get("C_text").Text = Csv.Text("commerce_detai129")
	self.cancelDissolutionBtn = moudle:Get("C_Btn_a")
	self.cancelDissolutionBtn:AddOnButton(function()
		SoundMgr.Play(10001)
		CCommerce.CancelDisbandReq()
	end)
	self.cancelDissolutionBtn.Activity = MCommerce.IsCommerceHuiZhang() and MCommerce.IsDissolution()

	moudle:Get("lvText").Text = Csv.Text("commerce_main7")
	moudle:Get("ZW").Text = Csv.Text("commerce_main8")
	moudle:Get("GangInfo"):AddOnButton(function()
		SoundMgr.Play(10001)
		CCommerce.QueryReq(MCommerce.MyCommerceId)
	end)
	moudle:Get("ShName").Text = MCommerce.CommerceName
	moudle:Get("ShId").Text = Csv.Text("commerce_main3") .. MCommerce.MyCommerceId

	local arrow = moudle:Get("Arrow")
	arrow.LocalScale = Vector3(1,-1,1)
	local t = arrow.CachedTran:GetJTweener("T_Commerce_Arrow")
	t:Play()
	local messageRoot = moudle:Get("messageRoot")
	moudle:Get("More"):AddOnButton(function()
		SoundMgr.Play(10001)
		local isActivity = not messageRoot.Activity
		messageRoot.Activity = isActivity
		_P.UpdateMessage(self, isActivity)
		moudle:Get("ZW").Activity = not isActivity
		if isActivity then
			arrow.LocalScale = Vector3.one
		else
			arrow.LocalScale = Vector3(1,-1,1)
		end
	end)
	messageRoot:AddOnClick(function ()
		SoundMgr.Play(10001)
		messageRoot.Activity = false
		_P.UpdateMessage(self, false)
		moudle:Get("ZW").Activity = true
		arrow.LocalScale = Vector3(1,-1,1)
	end)
	moudle:Get("ChatEvent"):AddOnClick(function()
		SoundMgr.Play(10001)
		WindowMgr.Create("UTalkTips1", Define.SysId.Talk_Unions)
	end)
	self.ChatText = moudle:Get("ChatText")
	local info = MTalk.GetLastOfChannel(MTalk.Channel.UnionsMsg)
	if info ~= nil then
		if info.value ~= nil and info.value ~= "" then
			self:OnTalkUpdate(info.sendername, info.value)
		elseif info.voiceIndex ~= nil and info.voiceIndex > 0 then
			if info.channel == MTalk.Channel.UnionsMsg then
				self:OnTalkUpdate(info.sendername, info.voiceTime .. "\"")
			end
		end
	end

	local BtnCz = moudle:Get("JxBtn")
	BtnCz:AddOnButton(function()
		SoundMgr.Play(10001)
		WindowMgr.Create("UVoteStudy")
	end,nil,0.9)

	local CzRed = moudle:Get("JxPoint")
	registRedpointFunc(CzRed, Define.SysId.Commerce, Define.SysId.Commerce_Study)

	local rechargeRed = moudle:Get("light2")
	registRedpointFunc(rechargeRed, Define.SysId.Commerce, Define.SysId.Commerce_Recharge)
end

function _M:OnRefreshActivityBtn()
	local CzBtn = self.Moudle:Get("JxBtn")
	local isOpen = MCommerce.MyCommerceInfo.isOpenStudy
	CzBtn.Activity = isOpen

	if isOpen then
		self.Moudle:Get("NoticeText").Text = Csv.Text("commerce_battle39")
	else
		if MCommerce.MyCommerceInfo ~= nil then
			self.Moudle:Get("NoticeText").Text =  MCommerce.MyCommerceInfo.notice or ""
		end
	end
end

-- 刷新商会充值图标显示
function _M:OnRefreshRechargeBtn()
	local btn = self.Moudle:Get("Btn2")
	btn.Activity = _P.CheckRechargeIsSee()
end

function _M:Destroy()
	local moudle = self.Moudle
	if moudle ~= nil then
		moudle:Destroy()
	end
end

return _M
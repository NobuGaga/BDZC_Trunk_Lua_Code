local JGuiManager = CS.JGui.JGuiManager
local MFriend = JRequire "Dev.Friend.MFriend"
local CFriend = JRequire "Dev.Friend.CFriend"
local WindowBase = JRequire"Libs.WindowMgr.WindowBase"
local WindowType = JRequire "Libs.WindowMgr.WindowType"
local CCommon = JRequire"Dev.Common.CCommon"
local TabGroup = JRequire "Dev.Common.TabGroup2"
local luaUtil = JRequire"Libs.LuaUtil"
local MGirl = JRequire "Dev.Girl.MGirl"
local CGirl = JRequire"Dev.Girl.CGirl"
local MBag = JRequire "Dev.Bag.MBag"
local CBag = JRequire "Dev.Bag.CBag"
local SoundMgr = JRequire "Libs.Sound.SoundMgr"
local MPlayer = JRequire "Dev.Player.MPlayer"
local UTiqinFriends = JRequire"Dev.Marry.UTiqinFriends"
local UTiqinServer = JRequire"Dev.Marry.UTiqinServer"
local UTiqinSpecial = JRequire"Dev.Marry.UTiqinSpecial"
local MMarry = JRequire"Dev.Marry.MMarry"
local MMain = JRequire "Dev.Main.MMain"


local _M = Class(WindowBase)
local _P = {}
local _R = {}

function _M:Dispatch(funcName, ...)
	local fun = _R[funcName]
	if fun ~= nil then 
		fun(self, ...)
	end
end

function _M:OnCreate(id)
	self.mBabyId = id
	local moudle = self:CreateMoudle(self._RootNode, "M_Girl_Married_Tiqin")
	self.mMoudle = moudle

	moudle:Get("C_Back_Btn"):AddOnButton(function()
		SoundMgr.Play(10002)
		self:Destroy()
	end)

	self.PageNode = moudle:Get("Content")

	moudle:Get("C_Text").Text = Csv.Text("married_tiqin_title")

-----------------------------------------------------------------------	
	local colorLight = Color(255/255,225/255,75/255,1)
	local colorDefault = Color(0/255,195/255,255/255,1)

	--新版toggle
	local funcs = MMain.GetOpenedFuncs(Define.SysId.Girl_Marry, true)
	local countToggle = #funcs
	if countToggle > 0 then
		local lastChoose
		local isHave = false

		--Table标签控制
		local tabHandle = TabGroup.new(function (funcId)
			_P.OnChoose(self, funcId)
		end, "yth_023", "yth_023",nil,nil,nil,nil,nil,nil,colorDefault,colorLight)
	
		local index = 0
		for k,v in pairs(funcs) do
			index = index + 1
			tabHandle:Add(v.id, moudle:Get("icon"..index), moudle:Get("IconText"..index), v.name)
			if lastChoose == v.id then
				isHave = true
			end
		end
		if not isHave then
			lastChoose = funcs[1].id
		end
		tabHandle:Choose(lastChoose)
		self.mTabHandle = tabHandle
	end

end

function _P.OnChoose(self, func)
	if self.ChooseMoudle ~= nil then
		self.ChooseMoudle:Destroy()
		self.ChooseMoudle:delete()
		self.ChooseMoudle = nil
	end

	if func == Define.SysId.Married_Friends then
		self.ChooseMoudle = UTiqinFriends.new(self.PageNode,self.mBabyId)
	elseif func == Define.SysId.Married_Special then
		self.ChooseMoudle = UTiqinSpecial.new(self.PageNode,self.mBabyId)
	elseif func == Define.SysId.Married_Server then
		self.ChooseMoudle = UTiqinServer.new(self.PageNode,self.mBabyId)
	end

	self.mSelectIndex = func
end

function _R.SetFriendQinjia(self,msg)
	if self.mSelectIndex == Define.SysId.Married_Friends then
		self.ChooseMoudle:SetFriendQinjia(msg)
	end
end

function _R.SetFriendBaby(self,data)
	if self.mSelectIndex == Define.SysId.Married_Friends then
		self.ChooseMoudle:GetFriendBabyInfo(data)
	elseif self.mSelectIndex == Define.SysId.Married_Special then
		self.ChooseMoudle:ShowPlayerView(data)
	end
end

function _R.CloseView(self)
	
	self:Destroy()
end

return _M
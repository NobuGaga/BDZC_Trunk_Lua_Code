local WindowRegist = JRequire "Libs.WindowMgr.WindowRegist"
local WindowType = JRequire "Libs.WindowMgr.WindowType"
local EventCenter = JRequire "Dev.EventCenter"
local SoundMgr = JRequire "Libs.Sound.SoundMgr"
local JGuiManager = CS.JGui.JGuiManager
local WIN_ROOT_MOUDLE = "M_UIRootNode"

local profiler = require("Libs.xlua.profiler")
local memory = require("Libs.xlua.memory")

local _M = {WindowGCCollect = false}
local _P = {}

--当前打开中的界面
_P.OpenedWindow = {}
--UI界面回弹处理
_P.UICoveredWindow = {}
local _MAX_UI_COVER_WINDOW = 4

function _M.CleanPopWindow()
	_P.UICoveredWindow = {}
end

function _P.IsCreated(win)
	return win._CanvasNode ~= nil
end

function _M.IsCreated(winName)
	local winInfo = WindowRegist[winName]
	if winInfo ~= nil then
		local win = _P.OpenedWindow[winInfo.WinType]
		return win ~= nil and win._Name == winName and win._CanvasNode ~= nil
	end
	return false
end

function _M.IsActivity(winName)
	local winInfo = WindowRegist[winName]
	if winInfo ~= nil then
		local win = _P.OpenedWindow[winInfo.WinType]
		return win ~= nil and win._Name == winName and win._CanvasNode ~= nil and win._CanvasNode.Activity == true
	end
	return false
end

function _M.IsCreatedForType(winType)
	local win = _P.OpenedWindow[winType]
	return win ~= nil and win._CanvasNode ~= nil
end

function _M.IsCreatedForSysId(sysId)
	for k,v in pairs(_P.OpenedWindow) do
		if v ~= nil and v._SysId == sysId and v._CanvasNode ~= nil then
			return true
		end
	end
	return false
end

function _M.DestroyRoot()
	CS.JGui.JGuiManager.GuiRoot.WindowBase:DestroyChildren()

	for k,v in pairs(_P.OpenedWindow) do
		v:delete()
	end

	_P.OpenedWindow = {}
	_P.UICoveredWindow = {}
end

function _P.doActivity(uiType, state)
	local uiUI = _P.OpenedWindow[uiType]
	if uiUI ~= nil and uiUI._CanvasNode ~= nil and uiUI._CanvasNode.Activity ~= state then
		uiUI._CanvasNode.Activity = state
		EventCenter.CallEventTrigger(Define.EventListenId.ActivityWindowForType, uiType, state)
	end
end

_P.UN_ACTIVE_LOWER_TYPE = 
{
	[WindowType.UI] = function ()	
		_P.doActivity(WindowType.Scene, false)
		_P.doActivity(WindowType.Main, false)
	end,
	[WindowType.Tips1] = function ()
		_P.doActivity(WindowType.Scene, false)
		_P.doActivity(WindowType.Main, false)
		_P.doActivity(WindowType.UI, false)
	end,
	[WindowType.Tips2] = function ()
		_P.doActivity(WindowType.Scene, false)
		_P.doActivity(WindowType.Main, false)
		_P.doActivity(WindowType.UI, false)
		_P.doActivity(WindowType.Tips1, false)
	end,
	[WindowType.Tips3] = function ()
		_P.doActivity(WindowType.Scene, false)
		_P.doActivity(WindowType.Main, false)
		_P.doActivity(WindowType.UI, false)
		_P.doActivity(WindowType.Tips1, false)
		_P.doActivity(WindowType.Tips2, false)
	end,
	[WindowType.Tips4] = function ()
		_P.doActivity(WindowType.Scene, false)
		_P.doActivity(WindowType.Main, false)
		_P.doActivity(WindowType.UI, false)
		_P.doActivity(WindowType.Tips1, false)
		_P.doActivity(WindowType.Tips2, false)
		_P.doActivity(WindowType.Tips3, false)
	end,
	[WindowType.Box] = function ()
		_P.doActivity(WindowType.Scene, false)
		_P.doActivity(WindowType.Main, false)
		_P.doActivity(WindowType.UI, false)
		_P.doActivity(WindowType.Tips1, false)
		_P.doActivity(WindowType.Tips2, false)
		_P.doActivity(WindowType.Tips3, false)
		_P.doActivity(WindowType.Tips4, false)
	end,
	[WindowType.Notice] = function ()
		_P.doActivity(WindowType.Scene, false)
		_P.doActivity(WindowType.Main, false)
		_P.doActivity(WindowType.UI, false)
		_P.doActivity(WindowType.Tips1, false)
		_P.doActivity(WindowType.Tips2, false)
		_P.doActivity(WindowType.Tips3, false)
		_P.doActivity(WindowType.Tips4, false)
		_P.doActivity(WindowType.Box, false)
	end,
}

function _P.OnWillCreate(winType, isFull)
	local unActivityFunc = _P.UN_ACTIVE_LOWER_TYPE[winType]
	if unActivityFunc ~= nil then
		-- stopCreateOrDestroyFunc(true)
		if isFull then
			--全屏界面优化
		else
			JGuiManager.GuiRoot:SetCameraTexure(winType, true, true)
		end
		unActivityFunc()
	end
end

function _P.doUIActivityLowerType()
	_P.doActivity(WindowType.Scene, true)
	_P.doActivity(WindowType.Main, true)
	JGuiManager.GuiRoot:SetCameraTexure(WindowType.UI, false, false)
end
function _P.doActivityLowerType(uiType)
	local uiUI = _P.OpenedWindow[uiType]
	if uiUI ~= nil and uiUI._CanvasNode ~= nil then
		if not uiUI._CanvasNode.Activity then
			uiUI._CanvasNode.Activity = true
			EventCenter.CallEventTrigger(Define.EventListenId.ActivityWindowForType, uiType, true)
			if uiUI._IsFull_ then

			else
				JGuiManager.GuiRoot:SetCameraTexure(uiType, true, false)
			end			
		end
		return true
	else
		return false
	end
end
function _P.doTips1ActivityLowerType()
	if not _P.doActivityLowerType(WindowType.UI) then
		_P.doUIActivityLowerType()
	end
end
function _P.doTips2ActivityLowerType()
	if not _P.doActivityLowerType(WindowType.Tips1) then
		_P.doTips1ActivityLowerType()
	end
end
function _P.doTips3ActivityLowerType()
	if not _P.doActivityLowerType(WindowType.Tips2) then
		_P.doTips2ActivityLowerType()
	end
end
function _P.doTips4ActivityLowerType()
	if not _P.doActivityLowerType(WindowType.Tips3) then
		_P.doTips3ActivityLowerType()
	end
end
function _P.doBoxActivityLowerType()
	if not _P.doActivityLowerType(WindowType.Tips4) then
		_P.doTips4ActivityLowerType()
	end
end
function _P.doNoticeActivityLowerType()
	if not _P.doActivityLowerType(WindowType.Box) then
		_P.doBoxActivityLowerType()
	end
end
_P.ACTIVE_LOWER_TYPE = 
{
	[WindowType.UI] = function ()
		_P.doUIActivityLowerType()
	end,
	[WindowType.Tips1] = function ()
		_P.doTips1ActivityLowerType()
	end,
	[WindowType.Tips2] = function ( )
		_P.doTips2ActivityLowerType()
	end,
	[WindowType.Tips3] = function ( )
		_P.doTips3ActivityLowerType()
	end,
	[WindowType.Tips4] = function ( )
		_P.doTips4ActivityLowerType()
	end,
	[WindowType.Box] = function ( )
		_P.doBoxActivityLowerType()
	end,
	[WindowType.Notice] = function ( )
		_P.doNoticeActivityLowerType()
	end,
}
function _P.OnDestoryed(winType)
	local func = _P.ACTIVE_LOWER_TYPE[winType]
	if func ~= nil then
		func()
	end
end

function _P.execDestroy(winType, isCover, noPop, ...)
	local delWin = _P.OpenedWindow[winType]
	if delWin ~= nil then
		if delWin._CanvasNode ~= nil then
			local popWindowName = nil
			if winType == WindowType.UI then
				if isCover then
					for i=1,#_P.UICoveredWindow do
						if _P.UICoveredWindow[i] == delWin._Name then
							table.remove(_P.UICoveredWindow, i)
							break
						end
					end
					if delWin._CanPop then
						table.insert(_P.UICoveredWindow, delWin._Name)
					end					
					if 	#_P.UICoveredWindow > _MAX_UI_COVER_WINDOW then
						table.remove(_P.UICoveredWindow, 1)
					end
				else
					if noPop then
						_P.UICoveredWindow = {}
					else
						local uiCount = #_P.UICoveredWindow
						if uiCount > 0 then
							popWindowName = _P.UICoveredWindow[uiCount]
						end
					end
				end
			end

			_P.OpenedWindow[winType] = nil
			local r, err = pcall(delWin.BeforeDestroy, delWin, ...)
			if not r then
				error("BeforeDestroy Window error::", delWin._Name, "error info: ", err)
			end
			delWin._CanvasNode:Destroy()
			delWin:UnRegistAllEvent()
			delWin:UnRegistRedpoint()
			if delWin._MusicID ~= nil and delWin._MusicID > 0 then
				SoundMgr.DestroyMusic(delWin._MusicID, true)
			end
			_P.OnDestoryed(delWin._Type)
			local r, err = pcall(delWin.EndDestroy, delWin, ...)
			if not r then
				error("EndDestroy Window error::", delWin._Name, "error info: ", err)
			end

			if delWin._SysId ~= nil then
				EventCenter.CallEventTrigger(Define.EventListenId.DestroyWindow, delWin._SysId, ...)
			end
			EventCenter.CallEventTrigger(Define.EventListenId.DestroyWindowForType, delWin._Type, ...)
			local uiType = delWin._Type
			_P.SendLogPoint(false, delWin._Name)
			
			local winName = delWin._Name
			local beginMem = delWin._BeginMemory or 0

			delWin:delete()
			delWin = nil

			if uiType == WindowType.UI or uiType == WindowType.Scene or uiType == WindowType.Tips1 then
				CS.GameManager.Inst:GC()
			end
			if _M.WindowGCCollect then
				local _memory = memory.total()
				print(winName, "DestroyedWindow Memory:" .. _memory, "notGC:" ..(_memory - beginMem))
				
				CS.Loader.LoadAccessor.AppendText("debug/profiler.txt","\nDESTORY --------------------- " .. winName .. ": " .. _memory .. "notGC:" ..(_memory - beginMem))
				local tmp = memory.snapshot()
				for k,v in pairs(tmp) do
					CS.Loader.LoadAccessor.AppendText("debug/profiler.txt", "\n\t" .. tostring(k) .. "-->" .. v)
				end	
			end
			if popWindowName ~= nil and _P.OpenedWindow[winType] == nil then
				--这里可能在别的地方又打开了界面
				_P.DoCreate(popWindowName, true)
			end

			-- if winType == WindowType.UI then
			-- 	JGuiManager.UICloseClean()
			-- end
		else
			_P.OpenedWindow[winType] = nil

			error(delWin._Name .. " window has destroyed bug stell in  OpenedWindow")
		end		
	end
end

function _P.SendLogPoint(isOpen, winName)
	if isOpen then
		local oepnKey = "open_logpoint_" .. winName
		if not CS.UnityEngine.PlayerPrefs.HasKey(oepnKey) then
			CS.UnityEngine.PlayerPrefs.SetInt(oepnKey, 1)
			CS.Utility.LogPoint.LogPost(8, 1, winName)
		end		
	else
		local closeKey = "close_logpoint_" .. winName
		if not CS.UnityEngine.PlayerPrefs.HasKey(closeKey) then
			CS.UnityEngine.PlayerPrefs.SetInt(closeKey, 1)
			CS.Utility.LogPoint.LogPost(9, 1, winName)
		end		
	end
end

function _P.DoDestroy(winType, isCover, noPop, ...)
	if winType == WindowType.Main then
		_P.execDestroy(WindowType.Scene, false)
		_P.execDestroy(WindowType.UI, false)
		_P.execDestroy(WindowType.Tips1, false)
		_P.execDestroy(WindowType.Tips2, false)
		_P.execDestroy(WindowType.Tips3, false)
		_P.execDestroy(WindowType.Tips4, false)
		_P.execDestroy(WindowType.Box, false)
		_P.execDestroy(WindowType.Message, false)
		_P.execDestroy(WindowType.Guide, false)
		_P.execDestroy(WindowType.Notice, false)
	elseif winType == WindowType.Scene then
		_P.execDestroy(WindowType.UI, false)
		_P.execDestroy(WindowType.Tips1, false)
		_P.execDestroy(WindowType.Tips2, false)
		_P.execDestroy(WindowType.Tips3, false)
		_P.execDestroy(WindowType.Tips4, false)
		_P.execDestroy(WindowType.Box, false)
	elseif winType == WindowType.UI then
		_P.execDestroy(WindowType.Tips1, false)
		_P.execDestroy(WindowType.Tips2, false)
		_P.execDestroy(WindowType.Tips3, false)
		_P.execDestroy(WindowType.Tips4, false)
		_P.execDestroy(WindowType.Box, false)
	elseif winType == WindowType.Tips1 then
		_P.execDestroy(WindowType.Tips2, false)
		_P.execDestroy(WindowType.Tips3, false)
		_P.execDestroy(WindowType.Tips4, false)
		_P.execDestroy(WindowType.Box, false)
	elseif winType == WindowType.Tips2 then
		_P.execDestroy(WindowType.Tips3, false)
		_P.execDestroy(WindowType.Tips4, false)
		_P.execDestroy(WindowType.Box, false)
	elseif winType == WindowType.Tips3 then
		_P.execDestroy(WindowType.Tips4, false)
		_P.execDestroy(WindowType.Box, false)
	elseif winType == WindowType.Tips4 then
		_P.execDestroy(WindowType.Box, false)
	end

	_P.execDestroy(winType, isCover, noPop, ...)
end

function _P.DoCreate(winName, isPop, ... )
	local winInfo = WindowRegist[winName]
	if winInfo ~= nil then
		local inst = JRequire(winInfo.Moudle)

		_P.OnWillCreate(winInfo.WinType, winInfo.IsFull)

		local win = inst.new(winInfo.WinType, winName, winInfo.IsCanPop or false, winInfo.SysId)
		-- win._CreateTweenInfo = winInfo.CreateTween
		-- win._DestroyTweenInfo = winInfo.DestroyTween
		win._MusicID = winInfo.MusicId
		win._IsFull_ = winInfo.IsFull
		
		_P.SendLogPoint(true, winName)

		if _M.WindowGCCollect then
			CS.GameManager.Inst:GC()
			local _memory = memory.total()
			win._BeginMemory = _memory
			print(winName, "StartCreateWindow Memory:" .. _memory)		
			-- print("memory.snapshot:", memory.snapshot())		
			CS.Loader.LoadAccessor.AppendText("debug/profiler.txt", "\n\nSTART --------------------- " .. winName .. ": " .. _memory)
			local tmp = memory.snapshot()
			for k,v in pairs(tmp) do
				CS.Loader.LoadAccessor.AppendText("debug/profiler.txt", "\n\t" .. tostring(k) .. "-->" .. v)
			end			
		end		
		if win._Type == WindowType.UI then
			for i=1,#_P.UICoveredWindow do
				if _P.UICoveredWindow[i] == win._Name then
					table.remove(_P.UICoveredWindow, i)
					break
				end
			end
		end

		local uiRoot = JGuiManager.GuiRoot
		local windowParent = uiRoot.WindowBase
		local rootMoudle = win:CreateMoudle(windowParent, WIN_ROOT_MOUDLE)
		win._CanvasNode = rootMoudle.SelfRect -- windowCanvas
		win._EventNode = rootMoudle:Get("_EventNode") --eventNode
		win._RootNode = rootMoudle:Get("_RootNode") --rootNode
		win._LockNode = rootMoudle:Get("_LockNode")
		win._BlackNode = rootMoudle:Get("_BlackNode")
		win._CanvasNode.Name = winName

		_P.OpenedWindow[win._Type] = win

		if win._MusicID ~= nil and win._MusicID > 0 then
			SoundMgr.PlayMusic(win._MusicID)
		end

		if isPop then
			local r, err = pcall(win.OnPopCreate, win, ...)
			if not r then
				error("Create Window<OnPopCreate> error::", winName, "error info: ", err)
			end
		else
			local r, err = pcall(win.OnCreate, win, ...)
			if not r then
				error("Create Window<OnCreate> error::", winName, "error info: ", err)
			end
		end

		-- if win._CreateTweenInfo ~= nil then
		-- 	win:Lock()
		-- 	if win._CreateTweenInfo.func ~= nil then
		-- 		win._CreateTweenInfo.func(win)
		-- 	end
		-- 	win._CreateOrDestroyTweenCom = win._EventNode.CachedTran:GetJTweener(win._CreateTweenInfo.name)
		-- 	win._CanvasTweenState = 1
		-- 	win._CreateOrDestroyTweenCom:SetOnComplete(function ( ... )
		-- 		win._CanvasTweenState = 2
		-- 		win:Unlock()
		-- 		win:OnCreateTweenDone()
		-- 	end)
		-- 	win._CreateOrDestroyTweenCom:Play()
		-- end		
		if win._SysId ~= nil then	
			EventCenter.CallEventTrigger(Define.EventListenId.CreateWindow, win._SysId, ...)
		end
		EventCenter.CallEventTrigger(Define.EventListenId.CreateWindowForType, win._Type, ...)
	else
		error(string.format("Create Window %s error, please to regist first!!!", winName))
	end	
end

function _M.Create(winName, ...)
	local winInfo = WindowRegist[winName]
	if winInfo ~= nil then
		_P.DoDestroy(winInfo.WinType, true)
		_P.DoCreate(winName, false, ... )
	else
		error(string.format("Create Window %s error, please to regist first!!!", winName))
	end
end

function _M.Call(winName, funName, ...)
	local winInfo = WindowRegist[winName]
	if winInfo ~= nil then
		local win = _P.OpenedWindow[winInfo.WinType]
		if win ~= nil and win._Name == winName and win._CanvasNode ~= nil then
			local r, err = pcall(win.Dispatch, win, funName, ...)
			if not r then
				error("Dispatch Window error::", win._Name, funName, "error info: ", err)
			end
		end
	else
		error("Dispatch Window error::", winName, " not regist")
	end
end

function _M.Destroy(winName, noPop, ...)
	local winInfo = WindowRegist[winName]
	if winInfo ~= nil then
		_P.DoDestroy(winInfo.WinType, false, noPop, ...)
	else
		error(string.format("Destroy Window %s error, please to regist first!!!", winName))	
	end	
end

function _M.DestroyForType(type)
	_P.DoDestroy(type, false, true)
end

function _M.ToSysId(winName)
	local winInfo = WindowRegist[winName]
	if winInfo ~= nil then
		return winInfo.SysId
	else
		error(string.format("ToSysId WindowName %s error, please to regist first!!!", winName))	
	end	
	return 0
end

function _M.OnRedpointUpdate(isActive, ... )
	for k,win in pairs(_P.OpenedWindow) do
		if win ~= nil and win._CanvasNode ~= nil then
			if k == WindowType.Scene or 
				k == WindowType.Main or
				k == WindowType.UI or
				k == WindowType.Tips1 or 
				k == WindowType.Tips2 or 
				k == WindowType.Tips3 or 
				k == WindowType.Tips4 then
			win:OnRedpointUpdate(isActive, ... )
			end 
		end
	end
end

return _M
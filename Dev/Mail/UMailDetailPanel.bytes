local WindowBase = JRequire "Libs.WindowMgr.WindowBase"
-- @RefType [Dev.Common.CCommon.bytes#_M] 邮件附件奖励用到
local CCommon = JRequire "Dev.Common.CCommon"
local CMail = JRequire"Dev.Mail.CMail"
local luaUtil = JRequire"Libs.LuaUtil"
local SoundMgr = JRequire "Libs.Sound.SoundMgr"

local GTE_EFFECT_ID = 5

local _M = Class(WindowBase)
local _P = {}
local _R = {}


function _M:Dispatch(funcName, ...)
	local fun = _R[funcName]
	if fun ~= nil then 
		fun(self, ...)
	end
end

function _M:OnCreate(data)
	local module = self:CreateMoudle(self._RootNode, "M_Mail_Content")
	self.mModule = module
	self.mailData = data

	local closeBtn = module:Get("backBtn")
	closeBtn:AddOnButton(function ( ... )
		SoundMgr.Play(10002)
		self:Destroy()
	end, nil, 1.2)

	local titleText = module:Get("title")
	local descText = module:Get("text1")
	local timeText = module:Get("text2")
	local remindText = module:Get("text3")

	titleText.Text = Csv.Text("mail_title")
	descText.Text = Csv.Text("mail_detail_title") .. "【" .. data.sender  .. "】" .. data.title
	timeText.Text = Csv.Text("mail_detail_time", {time = luaUtil.TransToYearMonthDay(data.sendtime)})
	remindText.Text = Csv.Text("mail_detail_remind")
	
	self.hasRect = module:Get("Has")
	local noneRect = module:Get("None")

	local changeContentText = '' 
	if data and data.content then
		changeContentText= string.gsub(data.content, '|', '/')
		changeContentText = string.gsub(changeContentText, '&lt;', '<')
		changeContentText = string.gsub(changeContentText, '&gt;', '>')
		changeContentText = string.gsub(changeContentText, '/n', '\n')
	end

	if data.awardList == nil then
		self.hasRect.Activity = false
		noneRect.Activity = true

		local contentText = module:Get("text4_0")
		contentText.Text = changeContentText
	else
		self.hasRect.Activity = true
		noneRect.Activity = false

		local oneLineRect = module:Get("OneLine")
		local twoLineRect = module:Get("TwoLine")
		local isOneLine = #data.awardList <= 4
		oneLineRect.Activity = isOneLine
		twoLineRect.Activity = not isOneLine

		-- 领取
		self.getBtn = module:Get("C_Btn_b")
		local getText = module:Get("C_text")
		self.getBtn.Activity = not data.gainAward
		self.getBtn:AddOnButton(function(...)
			SoundMgr.Play(10001)
			CMail.GainAttachReq(data.mailid)
		end)
		getText.Text = Csv.Text("mail_detail_get")

		-- 已领取标记
		self.finishImg = module:Get("image")
		self.finishImg.Activity = data.gainAward
		self.effectRect = module:Get("ItemEffect")

		-- 内容列表、附件列表
		local contentText = (isOneLine and module:Get("oneLineContent")) or (module:Get("twoLineText"))
		contentText.Text = changeContentText

		-- 创建奖励列表
		local Items = (isOneLine and module:Get("OneLineContent")) or (module:Get("content_attach"))
		self.attachRewards = {}
		for k,v in pairs(data.awardList) do
			local itemModule = CCommon.CreateItem(Items, v.key, function ( ... ) -- 打开道具详情界面
				WindowMgr.Create("UBagDetailPop", v.key)
			end, {num = v.value})

			if not data.gainAward then
				local effectMoudle = CCommon.CreateItemLight(itemModule.SelfRect, Define.SysId.Mail, v.key)
				if effectMoudle then
					self.attachRewards[k] = effectMoudle
				end
			end
		end
	end

	-- 无附件邮件，一打开界面为可读
	if (not data.read and data.awardList == nil) then
		CMail.ReadMailReq(data.mailid)
	end
end


function _P.UpdateItemData(self, data)
	if self.getBtn ~= nil then
		self.getBtn.Activity = not data.gainAward
	end

	if self.finishImg ~= nil then
		_P.PlayItemEffect(self, data)
		self.mModule.SelfRect:AddOnTime(function()
			SoundMgr.Play(10004)
			local effect = CCommon.CreateEffect(self.hasRect, GTE_EFFECT_ID, self.finishImg.LocalPosition, function( ... )
				if effect ~= nil then
					effect:Destroy()
				end
				self.finishImg.Activity = data.gainAward
			end)
		end, nil, 0.2)
	end
end


-- 播放item往上飘动画
function _P.PlayItemEffect(self, data)
	if self.mailData == nil or data.mailid ~= self.mailData.mailid or self.mailData.awardList == nil then return end

	local delayCount = 0
	for k,v in pairs(self.mailData.awardList) do
		CCommon.ShowFlyItem(self.effectRect, v.key, v.value, delayCount)
		delayCount = delayCount + 0.5
	end
end


-- 销毁物品特效
function _P.OnDestroyAttachEffect(self)
	if self.attachRewards == nil or #self.attachRewards == 0 then return end

	for k,v in pairs(self.attachRewards) do
		v:Destroy()
	end

	self.attachRewards = nil
end


function _R.OnRefreshItem(self, data)
	_P.OnDestroyAttachEffect(self)
	_P.UpdateItemData(self, data)
end

return _M
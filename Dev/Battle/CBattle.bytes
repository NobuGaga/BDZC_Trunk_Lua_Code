--@RefType [Dev.Battle.MBattle.bytes#_M]
local MBattle = JRequire "Dev.Battle.MBattle"
--@RefType [Dev.EventCenter.bytes#_M]
local EventCenter = JRequire "Dev.EventCenter"
local CCommon = JRequire "Dev.Common.CCommon"
local CMain = JRequire "Dev.Main.CMain"
local MMain = JRequire "Dev.Main.MMain"

--外部接口模块 *** 只放置共有接口, 禁止放变量
local _M = {}
--私有函数模块 *** 只放置私有函数, 禁止放变量
local _P = {}

local CMD_ID = 
{
	cBattle = 1,
	cUnlock = 2,
	cSeckillBattle = 3,
	cAcquisition = 4,
	cBossReset = 5,
	cMapOneGet = 6,--领取一个地图的收益
	cMapAllGet = 7,--领取所有地图的收益

	sInit = 1,
	sResult = 2,
	sUnlock = 3,
	sSeckillBattle = 4,
	sAcquisition = 5,
	sBattleBossFight = 6,
	sBossReset = 7,
	sMapUpdate = 8, --刷新关卡大地图 PBattle.PMapUpdate
	sMapOneGet = 9, --领取宝箱收益 PBattle.SMapOneGet
}

function _M.ModuleClean()
	MBattle.Clean()
end

function _M.ModuleInit(isReload)
	--发送消息协议注册
	local send = {
		[CMD_ID.cBattle] = "PBattle.CBattle",
		[CMD_ID.cUnlock] = "PBattle.CUnlock",
		[CMD_ID.cSeckillBattle] = "PBattle.CSeckillBattle",
		[CMD_ID.cAcquisition] = "",
		[CMD_ID.cBossReset] = "PBattle.CBattle",
		[CMD_ID.cMapOneGet] = "PBattle.CMapOneGet",
		[CMD_ID.cMapAllGet] = "",
	}
	--接收消息协议注册
	local recv = {
		[CMD_ID.sInit] = {		proto = "PBattle.SInit", 				handle = _P.OnInit},
		[CMD_ID.sResult] = {	proto = "PBattle.SResult", 				handle = _P.OnResult},
		[CMD_ID.sUnlock] = {	proto = "PBattle.SUnlock", 				handle = _P.OnUnlock},
		[CMD_ID.sSeckillBattle] = {	proto = "PBattle.SSeckillBattle", 	handle = _P.OnSeckillResult},
		[CMD_ID.sAcquisition] = {	proto = "PBattle.SAcquisition", 	handle = _P.OnAcquisitionResult},
		[CMD_ID.sBattleBossFight] = {	proto = "SFight", 		handle = _P.OnBossResult},
		[CMD_ID.sBossReset] = {	proto = "PBattle.SBossReset", 		handle = _P.OnBossResetBack},
		[CMD_ID.sMapUpdate] = {	proto = "PBattle.PMapUpdate", 		handle = _P.OnBattleMapUpdate},
		[CMD_ID.sMapOneGet] = {	proto = "PBattle.SMapOneGet", 		handle = _P.OnBattleMapBoxGet},
	}
	--调用注册接口, 用获得发送函数
	_M.Send = SocketMgr.Regist(Define.SysId.Airport, send, recv, isReload)	
	MBattle.InitCsvBattleData()
end

--注册12点重置监听
EventCenter.RegistCallEvent(Define.EventListenId.DailyReset,function( ... )
	_P.OnDayout()
end, true)

EventCenter.RegistCallEvent(Define.EventListenId.FirstEnterGame,function( ... )
	MBattle.IsFirstCreateBattle = true
end, true)

EventCenter.RegistCallEvent(Define.EventListenId.SecondUpdate,function( ... )
	_P.UpdateMapRedpoint()
end, true)

-----------------------Client -- Server-----------------

function _M.BattleReq(battleId, staffId)
	_M.Send(CMD_ID.cBattle, {id = battleId, staffId = staffId})
end

function _M.UnlockReq(staffId)
	_M.Send(CMD_ID.cUnlock, {staffId = staffId})
end

-- 一键秒杀请求
function _M.SeckillBattleReq(battleId)
	_M.Send(CMD_ID.cSeckillBattle, {id = battleId})
end

-- 超级一键秒杀请求
function _M.AcquisitionReq()
	_M.Send(CMD_ID.cAcquisition)
end

-- 关卡boss重置
function _M.BossResetReq(id, staffId)
	_M.Send(CMD_ID.cBossReset, {id = id, staffId = staffId})
end

--请求1个地图的收益
function _M.MapOneGetReq(id)
	_M.Send(CMD_ID.cMapOneGet, {id = id})
end

--请求所有地图的收益
function _M.MapAllGetReq()
	_M.Send(CMD_ID.cMapAllGet)
end

-----------------------Server -- Client-----------------

function _P.OnDayout()
	--12点重置
	local tmp = MBattle.LockedStaffs
	MBattle.LockedStaffs = {}
	MBattle.StaffLifeNum = {}
	WindowMgr.Call("UBattleStaffChoose","RefreshAll")
end

function _P.OnInit(data)
	MBattle.CurId = data.id
	MBattle.CurBlood = data.blood
	MBattle.LockedStaffs = {}
	MBattle.StaffLifeNum = {}
	MBattle.FightBossTimes = data.fightBossTimes
	if data.lockStaffs ~= nil then
		for _,v in pairs(data.lockStaffs) do
			MBattle.LockedStaffs[v] = true
		end
	end
	if data.staffLifeNum ~= nil then
		for _,v in pairs(data.staffLifeNum) do
			MBattle.StaffLifeNum[v.id] = v.count
		end
	end
	_P.OnBattleMapUpdate(data.mapInfo)
end

function _P.OnBattleMapUpdate(data)
	MBattle.BattleMapUpdate(data)
	WindowMgr.Call("UBattleBigMap", "OnBattleMapUpdate", data)

	--小红点
	_P.UpdateMapRedpoint()
end

function _P.OnBattleMapBoxGet(data)
	MBattle.BattleMapList[data.id] = data.startTime
	WindowMgr.Call("UBattleBigMap", "OnBattleMapBoxGet", data)
	--小红点
	_P.UpdateMapRedpoint()
end

local HeartBeat
function _P.UpdateMapRedpoint()
	if MBattle.BattleMapIsInit then
		if HeartBeat == nil then
			HeartBeat = JRequire "Dev.Player.HeartBeat"
		end
		local isHaveRedpoint = false
		local nowTime = HeartBeat.ServSecond()
		if MBattle.BattleMapStartTime > 0 and nowTime - MBattle.BattleMapStartTime >= Csv.Const(152) then
			CMain.UpdateRedpoint(true, Define.SysId.BusinessMap, 1)
		else
			CMain.UpdateRedpoint(false, Define.SysId.BusinessMap, 1)
		end

		for csvId,startTime in pairs(MBattle.BattleMapList) do
			local csvLine = Csv.BattleCity[csvId]
			if csvLine.boxReward ~= nil and (nowTime - startTime) / csvLine.boxSpaceTime >= csvLine.boxMaxNum then
				CMain.UpdateRedpoint(true, Define.SysId.BusinessMap, csvId)
			else
				CMain.UpdateRedpoint(false, Define.SysId.BusinessMap, csvId)
			end
		end
	end
end

function _P.OnResult(data)
	if data.state == MBattle.ResultState.Win then
		if data.nextId ~= nil and data.nextId > 0 then
			local csv = Csv.Battle[data.nextId]
			--胜利了, 进行下一关
			MBattle.CurId = data.nextId
			MBattle.CurBlood = csv.gold	
		end		
	else
		MBattle.CurId = data.id
		MBattle.CurBlood = data.blood
	end
	local lastCityID = MBattle.CurCityId
	--锁定的员工
	if data.lockStaff ~= nil then
		MBattle.LockedStaffs[data.lockStaff] = true
	end

	if data.staffLifeNum ~= nil then
		MBattle.StaffLifeNum[data.staffLifeNum.id] = data.staffLifeNum.count
	end

	--调用播放
	if WindowMgr.IsCreated("UBattleFight") then
		WindowMgr.Call("UBattleFight","OnResult", data, function ()
			WindowMgr.Call("UBattle","OnResult", data, lastCityID)
		end)
	elseif WindowMgr.IsCreated("UBattleBoss") then
		WindowMgr.Call("UBattleBoss","OnResult", data, function ()
			WindowMgr.Call("UBattle","OnResult", data, lastCityID)
		end)
	else
		WindowMgr.Call("UBattle","OnResult", data, lastCityID)
	end

	--检测弱引导是否关闭
	if MMain.curWeakGuide ~= nil then
		WindowMgr.RefreshWeakGuide(MMain.curWeakGuide.funcID,MMain.curWeakGuide.id)
	end
end

-- 一键秒杀返回
function _P.OnSeckillResult(data)
	if MBattle.SeckillBattleData.list then
		MBattle.SeckillBattleData.list = {}
	end
	
	MBattle.SeckillBattleData = data
	local lastData = MBattle.GetCurData(data.list, data.lastId)
	if lastData then
		if lastData.state == MBattle.ResultState.Win then
			if lastData.nextId ~= nil and lastData.nextId > 0 then
				local csv = Csv.Battle[lastData.nextId]
				--胜利了, 进行下一关
				MBattle.CurId = lastData.nextId
				MBattle.CurBlood = csv.gold
			end		
		else
			MBattle.CurId = lastData.id
			MBattle.CurBlood = lastData.blood
		end
		local lastCityID = MBattle.CurCityId
		--调用播放
		if WindowMgr.IsCreated("UBattleFight") then
			WindowMgr.Call("UBattleFight", "OnSeckillResult", lastData, function ()
				WindowMgr.Call("UBattle", "OnResult", lastData, lastCityID)
			end)
		end
	end

	--检测弱引导是否关闭
	if MMain.curWeakGuide ~= nil then
		WindowMgr.RefreshWeakGuide(MMain.curWeakGuide.funcID,MMain.curWeakGuide.id)
	end
end

function _P.OnUnlock(data)
	MBattle.LockedStaffs[data.staffId] = nil
	if data.staffLifeNum ~= nil then
		MBattle.StaffLifeNum[data.staffLifeNum.id] = data.staffLifeNum.count
	end
	WindowMgr.Call("UBattleStaffChoose","OnUnlock",data.staffId)
end

function _M.EnterBattle()
	local curID = MBattle.CurId
	if curID ~= nil and curID > 0 then
		local csvBattle = Csv.Battle[curID]
		if csvBattle ~= nil then
			local csvChapter = Csv.Chapter[csvBattle.chapter]
			if csvChapter ~= nil and csvBattle.next ~= nil and csvBattle.next > 0 then
				if MBattle.IsFirstBattle() then
					if MBattle.IsFirstCreateBattle then
						WindowMgr.Create("UBattle")
					else
						WindowMgr.Create("UBattle")
					end
				else
					WindowMgr.Create("UBattle")
				end
			else
				WindowMgr.Create("UBattle")
			end
		else
			WindowMgr.Create("UBattle")
		end
	else
		WindowMgr.Create("UBattle")
	end
end 

function _P.OnAcquisitionResult(data)
	local list = _P.GetAcquisitionList(data)
	local isNextChapter,lastBlood = _P.GetIsNextChapter(list)
	if isNextChapter then
		local csvBattle = Csv.Battle[data.lastId]
		if csvBattle ~= nil and csvBattle.next ~= nil then
			MBattle.CurId = csvBattle.next
			MBattle.CurBlood = Csv.Battle[csvBattle.next].gold
		else
			error("------------Battle csv 为空 or csvBattle.next 为空--------------", data.lastId)
		end
	else
		MBattle.CurId = data.lastId
		MBattle.CurBlood = lastBlood
	end
	local lastCityID = MBattle.CurCityId
	if data.lastId > data.curId then
		WindowMgr.Call("UBattle","OnAcquisition",list, lastCityID)
	else
		CCommon.ShowError(Csv.Text("battle_acqu1"))
	end
end

function _P.GetIsNextChapter(list)
	local lastChapter = list[#list]
	for k,v in pairs(lastChapter.list) do
		if v.state == MBattle.ResultState.Fail then
			return false,v.blood
		end
	end
	return true,0
end

function _P.GetAcquisitionList(data)
	local list = {}
	if data.battle ~= nil then
		for k,v in pairs(data.battle) do
			table.insert(list,v)
		end
		table.sort(list,function(a,b) return _P.Sort(a,b) end)
	end
	return list
end

function _P.Sort(a,b)
	if a ~= nil and b ~= nil and a.list ~= nil and b.list ~= nil then
		local valueA = a.list[1]
		local valueB = b.list[1]
		if valueA ~= nil and valueB ~= nil then
			local csvBattleA = Csv.Battle[valueA.id]
			local csvBattleB = Csv.Battle[valueB.id]
			if csvBattleA ~= nil and csvBattleB ~= nil then
				return csvBattleA.chapter < csvBattleB.chapter
			end
		end
	end
	return false
end

function _P.OnBossResult(data)
	if data.result then
		local csvBattle = Csv.Battle[MBattle.CurId]
		if csvBattle ~= nil and csvBattle.next ~= nil then
			MBattle.CurId = csvBattle.next
		end
		local csvBattleNext = Csv.Battle[MBattle.CurId]
		if csvBattleNext ~= nil and csvBattleNext.gold ~= nil then
			MBattle.CurBlood = csvBattleNext.gold
		end
	else
		local csvBattle = Csv.Battle[MBattle.CurId]
		if csvBattle ~= nil then
			MBattle.CurBlood = csvBattle.gold
		end
	end
	local lastCityID = MBattle.CurCityId
	WindowMgr.Call("UBattleBossNew","OnResult",data)
	WindowMgr.Call("UBattle", "OnResult", data, lastCityID)
end

function _P.OnBossResetBack(data)
	MBattle.FightBossTimes = data.fightBossTimes
	MBattle.CurBlood = data.blood
	WindowMgr.Call("UBattleBossNew", "OnBossResetBack", data)
end

return _M
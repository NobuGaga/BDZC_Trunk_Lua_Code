local _M = {DelayHandle = 0}
local _P = {}

local rapidjson = require "rapidjson"
--@RefType [Dev.Login.MLogin.bytes#_M]
local MLogin = JRequire "Dev.Login.MLogin"
--@RefType [Dev.Setting.MSetting.bytes#_M]
local MSetting = JRequire "Dev.Setting.MSetting"
--@RefType [Dev.Player.MPlayer.bytes#_M]
local MPlayer = JRequire "Dev.Player.MPlayer"
--@RefType [Dev.Setting.CSetting.bytes#_M]
local CSetting = JRequire "Dev.Setting.CSetting"
--@RefType  [Dev.Common.CCommon.bytes#_M]
local CCommon = JRequire "Dev.Common.CCommon"
--@RefType [Dev.EventCenter.bytes#_M]
local EventCenter = JRequire "Dev.EventCenter"
--@RefType [SDK.SDKMgr.bytes#_M]
local SDKMgr = JRequire "SDK.SDKMgr"
--@RefType [SDK.SDKFuncName.bytes#_M]
local SDKFuncName = JRequire "SDK.SDKFuncName"
--@RefType [Libs.LuaUtil.bytes#_M]
local luaUtil = JRequire "Libs.LuaUtil"
--@RefType [Dev.Player.HeartBeat.bytes#_M]
local HeartBeat

----------------------CS类引用--------------------------
local HttpHelper = CS.Utility.HttpHelper
local HttpSession = CS.Utility.HttpSession
local Application = CS.UnityEngine.Application
local UnityTime = CS.UnityEngine.Time
local TimeDelay = CS.Utility.TimeDelay


local CHEAT_DETECT_TIME = 30

_P.GMCommond = {}

_M.IsOnGame = false

function _P.InitGM( ... )
	local txt = CS.Loader.LoadAccessor.ReadText("GM.txt")
	if txt ~= nil and txt ~= "" then
		local tab = rapidjson.decode(txt)
		if tab ~= nil then
			for k,v in pairs(tab) do
				_P.GMCommond[k](v)
			end
		end
	end
end

function _M.InitCheatDetect()
	--前段Ticks和Unity的RealtimeSinceStartup作弊校验
	_M.DateTimeStart = CS.Utility.Utils.Ticks
    _M.TimeScaleStart = UnityTime.timeScale
    _M.RealTimeStart = UnityTime.realtimeSinceStartup
end

function _M.StartCheatDetect()
	_M.StopCheatDetect()
	_M.InitCheatDetect()
	_M.DelayHandle = TimeDelay.DelayCall(CHEAT_DETECT_TIME, false, _M.CheatDetect)
end

function _M.StopCheatDetect()
	if _M.DelayHandle ~= 0 then
		TimeDelay.SetValid(_M.DelayHandle, false)
		_M.DelayHandle = 0
	end
end

function _M.CheatDetect()
	_M.DelayHandle = TimeDelay.DelayCall(CHEAT_DETECT_TIME, false, _M.CheatDetect)
	local passDateTime = (CS.Utility.Utils.Ticks - _M.DateTimeStart) / 10000000
	local passRealTime = UnityTime.realtimeSinceStartup - _M.RealTimeStart
	--修改为只检查加速
	if (passRealTime - passDateTime) > 3 then
	-- if math.abs(passDateTime - passRealTime) > 1 then
		_M.OnAntiCheat(1)
	elseif UnityTime.timeScale - _M.TimeScaleStart > 0.05 then
	-- elseif math.abs(_M.TimeScaleStart - UnityTime.timeScale) > 0.05 then
		_M.OnAntiCheat(2)
	end
	_M.InitCheatDetect()
end

function _M.Init()
	print("GameSetting Init")
	local GameManager = CS.GameManager.Inst
	--设置GC频率
	GameManager.UpdateGCSpace = 300

	_M.IsEditor = CS.UnityEngine.Application.isEditor
	_M.GameParam = rapidjson.decode(GameManager:GetJsonParam())
	_M.IsFocus = true
	-- LuaUtil.DumpTable(_M.GameParam, "----->>>")

	local sdkParam = _M.GameParam.sdkParam
	_M.Spid = sdkParam.spid
	_M.AppID = sdkParam.appId
	if _M.AppID == nil then
		_M.AppID = 0
	end
	_M.Platform = tonumber(sdkParam.platform)
	_M.DeviceID = sdkParam.deviceID
	_M.DeviceMac = sdkParam.deviceMac
	_M.DeviceName = sdkParam.deviceName
	_M.Netmode = sdkParam.netMode
	_M.isHasSwitchAccount = sdkParam.isHasSwitchAccount ~= 0 
	_M.isHasExitAccount = (sdkParam.isHasExitAccount or 1) ~= 0
	_M.AppName = sdkParam.appName
	_M.PackageName = sdkParam.packageName
	local isMergeShow = sdkParam.isMergeShow
	if isMergeShow then
		_M.IsMergeShowMain = (tonumber(isMergeShow) == 1)
	end
	_M.ClientVersion = _M.GameParam.resVersion.ShowVersion
	_M.CdnVersion = _M.GameParam.cdnVersion.ShowVersion

	--子渠道id
	_M.Sbid = "sbid"
	_M.Openid = "openID"
	
	--公告url
	_M.NoticeUrl = _M.GameParam.cdnVersion.noticeUrl
	-- 登陆公告url
	_M.LoginNoticeUrl = _M.GameParam.cdnVersion.loginNoticeUrl
	--敏感词url
	_M.CheckChatUrl = _M.GameParam.cdnVersion.checkChat
	--名字
	_M.CheckNameUrl = _M.GameParam.cdnVersion.checkName
	--服务器列表url
	_M.ServListUrl = _M.GameParam.cdnVersion.servListUrl
	--发送语音url
	_M.SendVoiceUrl = _M.GameParam.cdnVersion.voiceTalk
	--播放语音url
	_M.PlayVoiceUrl = _M.GameParam.cdnVersion.voiceSave
	--运营商推送日志url
	_M.ChannelLog = _M.GameParam.cdnVersion.channelLog
	--获取公网IP的URL
	_M.IpUrl = _M.GameParam.cdnVersion.get_ip_url
	--登录验证url
	_M.LoginUrl = _M.GameParam.cdnVersion.loginUrl
	--超级vipurl
	_M.SuperVipUrl = _M.GameParam.cdnVersion.superVipUrl
	--从URL中获得的IP
	_M.PublicIP = sdkParam.ip or ""
	--加了密的IP
	_M.EncryptIP = ""
	--是不是关闭了前端打点
	_M.IsCloseLog = false
	if _M.GameParam.cdnVersion.closeLogType ~= nil and tonumber(_M.GameParam.cdnVersion.closeLogType) == 1 then
		_M.IsCloseLog = true
	end
	--是不是关闭了平台打点
	_M.IsCloseChannelLog = false
	if _M.GameParam.cdnVersion.closeChannelType ~= nil and tonumber(_M.GameParam.cdnVersion.closeChannelType) == 1 then
		_M.IsCloseChannelLog = true
	end

	--设置区ID
	_M.AreaId = ""
	if sdkParam.areaid and sdkParam.areaid ~= "" then
		_M.SetAreaID(sdkParam.areaid)
	end

	--是否审核阶段
	local isPass = _M.GameParam.cdnVersion.isPass
	_M.IsiOSCommit = (tonumber(isPass) == 0)
	_M.initServerIdList = _M.GameParam.cdnVersion.serverid
	local isPrivacy = _M.GameParam.cdnVersion.isPrivacy
	_M.IsShowPrivacy = (tonumber(isPrivacy) == 1)	
	--审核状态下打开log
	if _M.IsiOSCommit then
		_M.IsCloseLog = false
	end

	_M.IsTaiWan = false
	if _M.Spid == Define.PlatformType.AndroidYiWanForeign or _M.Spid == Define.PlatformType.iOSYiWanForeign or
		_M.Spid == Define.PlatformType.AndroidYiWanAsia or _M.Spid == Define.PlatformType.iOSYiWanAsia then
		_M.IsTaiWan = true
	end

	if sdkParam.sdkFuncNameList then
		_M.SDKFuncNameList = sdkParam.sdkFuncNameList
		local splitFunc = LuaUtil.StringSplit(sdkParam.sdkFuncNameList, ",")
		for index, funcName in ipairs(SDKFuncName.__module) do
			if splitFunc[index] and splitFunc[index] ~= "" then
				SDKFuncName.__module[funcName] = splitFunc[index]
			end
		end
	end

	if _M.IsiOSCommit and _M.IsMergeShowMain then
		_M.InitSceneType = Define.SysId.World
	else
		_M.InitSceneType = Define.SysId.Home
	end
end

function _M.CheckSpidAlter(id)
	local csvLine = Csv.SpidAlter[id]
	if csvLine ~= nil and csvLine.alter ~= nil then
		for _, value in pairs(csvLine.alter) do
			local isHave = true
			if value.spid ~= nil and value.spid ~= _M.Spid then
				isHave = false
			elseif value.clientV ~= nil and value.clientV ~= _M.ClientVersion then
				isHave = false
			end
			if isHave then
				return true, value
			end
		end 
	end
	return false
end

function _M.Start()
	--作弊检查
	-- _M.StartCheatDetect()

	--增加审核时的颜色差异
	_M.FogColor = Color(1, 1, 1, 0.04)
	if _M.IsiOSCommit then
		_M.FogColor.r = math.random(1, 255) / 255
		_M.FogColor.g = math.random(1, 255) / 255
		_M.FogColor.b = math.random(1, 255) / 255
		_M.ShowFog()
		MSetting.SetiOSCommitData()
		MSetting.OnSaveSetting()
		CSetting.LoadSetting()
	end

	_P.InitGM()
end

function _M.HttpPostDataToPHP(urlType, argList)
	if _M.ChannelLog == nil then
		return
	end
	if _M.IsCloseChannelLog then
		return
	end
	--断线重连接口切换账号时可能没登录游戏，作角色ID过滤
	local playerID = MPlayer.GetId()
	if playerID == nil or playerID == 0 then
		return
	end
	local session = HttpSession(CS.Utility.HttpRequestType.Post, _M.ChannelLog)
	session:AppendParam("urlType", urlType)
	session:AppendParam("appID", _M.AppID)
	session:AppendParam("roleID", playerID)
	session:AppendParam("serverID", MLogin.SelectServer.id)
	session:AppendParam("roleName", MPlayer.GetName())
	session:AppendParam("roleLevel", MPlayer.GetLevel())
	session:AppendParam("roleVip", MPlayer.PlayerInfo.vip)
	session:AppendParam("openID", _M.Openid)
	session:AppendParam("platform", _M.Platform)
	for key, value in pairs(argList) do
		session:AppendParam(key, value)
	end
	HttpHelper.Request(session)
end

local CSLogPost = CS.Utility.LogPoint
function _M.LogPoint(...)
	if _M.IsCloseLog then
		return
	end

	CSLogPost.LogPost(...)
end

function _M.SetAreaID(areaIdStr)
	_M.AreaId = areaIdStr or ""
	--error("last areaID:" .. _M.AreaId)
	-- if not _M.IsEditor then
	-- 	local areaArray = LuaUtil.StringSplit(_M.AreaId, ",")
	-- 	if areaArray ~= nil then
	-- 		local newTab = {}
	-- 		for i=1,#areaArray do
	-- 			if string.find(areaArray[i], '3') ~= 1 then
	-- 				table.insert(newTab, areaArray[i])
	-- 			end
	-- 		end
	-- 		_M.AreaId = table.concat(newTab, ",")
	-- 	end
	-- end
	--error("new areaID:" .. _M.AreaId)
end

function _M.ShowFog()
	if _M.IsiOSCommit then
		CCommon.ShowFog(_M.FogColor)
	end
end

function _M.GetPngStreamAssetsPath(pngName, sysName)
	local packageName = _M.PackageName or ""
	if sysName then
		sysName = packageName .. sysName .. "/"
	else
		sysName = ""
	end
	pngName = packageName .. pngName .. ".png"
	return sysName .. pngName
end

function _M.SetSbid(sbid)
	if sbid == nil then
		return
	end
	_M.Sbid = sbid

	CS.Utility.LogPoint.AddSystemParam("sbid", sbid)
end

function _M.SetOpenid(openid)
	_M.Openid = openid

	CS.Utility.LogPoint.AddSystemParam("userid", openid)
end

--作弊处理
function _M.OnAntiCheat(errorCode)

	CCommon.CheckTips(function ()
		_M.GameQuit()
	end,{
		isNoCancel = true,
		content = Csv.Text("common_cheat")
	})

	error("健康游戏, 禁止作弊!!")
	
end

--失去焦点
function _M.OnApplicationFocus(focus)
	-- print("OnApplicationFocus:", focus)
	_M.IsFocus = focus
	EventCenter.CallEventTrigger(Define.EventListenId.OnApplicationFocus, focus)
end

--暂停
function _M.OnApplicationPause(pause)
	-- print("OnApplicationPause:", pause)
	EventCenter.CallEventTrigger(Define.EventListenId.OnApplicationPause, pause)
end

--退出回收
function _M.OnApplicationQuit()
	
end

--打开默认登录窗口
function _M.OpenLoginInput()
	MLogin.Status = MLogin.ELoginStatus.NotLogin
	WindowMgr.Call("ULogin", "RefreshLoginState") 
	WindowMgr.Create("ULoginInput")
end

function _M.HttpPostExitDataToPHP()
	if HeartBeat == nil then
		HeartBeat = JRequire "Dev.Player.HeartBeat"
	end
	if HeartBeat.ServerTime == 0 then
		return
	end
	_M.HttpPostDataToPHP(Define.PostUrlType.EnterGame, {flag = "2", ipAddress = _M.PublicIP, 
						 eTime = os.date("%Y-%m-%d %H:%M:%S", HeartBeat.ServSecond())})
end

function _M.GameQuit()
	_M.HttpPostExitDataToPHP()
	SDKMgr.ReqExit()
	Application.Quit()
end

--退出按钮
function _M.OnEscapePress()
	SDKMgr.ReqLogout()
end

function _M.OnGameEscapePress()
	CCommon.ShowReloginBox(Csv.Text("login_quit"), Csv.Text("common_sure"), function (isSure)
		if isSure then
			_M.GameQuit()
		end
	end, Csv.Text("common_cancel"), -10)
end

--秒定时器
function _M.OnSecondUpdate(nowTime)
	EventCenter.CallEventTrigger(Define.EventListenId.SecondUpdate, nowTime)
end

_M.ReLoginType = 
{
	NoChangeAccount = 1,	--不切换账号
	ChangeAccount = 2,		--切换账号
	ToLogin = 3,			--调用登陆
	ChangeServerList = 4,	--重新获取服务器列表
}

_M.OnReLoginCall = nil

_M.InitSceneType = Define.SysId.Home
function _M.ToReLogin(reloginType)
	-- if WindowMgr.IsCreated("UWorldMap") then
	-- 	_M.InitSceneType = Define.SysId.World
	-- else
	-- 	_M.InitSceneType = Define.SysId.Home
	-- end

	EventCenter.CallEventTrigger(Define.EventListenId.ToReLogin)
	_M.IsOnGame = false
	_M.LogPoint(10, 1, tostring(reloginType), luaUtil.TransToYearMonthDayHMS(os.time()))
	_M.HttpPostExitDataToPHP()
	if _M.OnReLoginCall ~= nil then
		_M.OnReLoginCall()
	end
	CS.Net.LuaConnect.AutoReconnect = false
	SocketMgr.Disconnect()
	JRequireClean()
	WindowMgr.DestroyRoot()
	CS.Utility.TimeDelay.Clear()
	EventCenter.OnReLogin()
	JRequireClean()
	CS.GameManager.Inst:GC()
	_M.ShowFog()
	WindowMgr.Create("ULogin", reloginType)
end

return _M
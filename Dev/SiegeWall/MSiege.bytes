
local EventCenter = JRequire "Dev.EventCenter"
local HeartBeat = JRequire "Dev.Player.HeartBeat"
local MPlayer = JRequire "Dev.Player.MPlayer"
local MStaff = JRequire "Dev.Staff.MStaff"
local MCommerce = JRequire "Dev.Commerce.MCommerce"
local CSiege = JRequire "Dev.SiegeWall.CSiege"
local CCommon = JRequire "Dev.Common.CCommon"
local CMain = JRequire "Dev.Main.CMain"

local _M = {}
local _P = {}

_M.MaxPoint = 10

_M.TreasureEnum = {
	None = 0,
	Mine = 1,
	Disk = 2,
	Order = 3,
}
_M.RankTypeEnum = {
	Personal = 1,
	Gang = 2,
	Killed = 3,
}

_M.ActivityState = false --活动开关
_M.StartTime = 0
_M.EndTime = 0
_M.ActivityId = 1 --活动id
_M.Phase = 1 --阶段
_M.OpenTime = 0 --开启CD(等待中开始)
_M.PointCD = 1000
_M.Progress = {} --进度，列表，第二阶段有3个进度
_M.LastUdisk = nil --剩余U盘数量，总数
_M.Buffs = {}
_M.lastEnmey = 0 --剩余敌人数量，第三阶段
_M.BigBoss = {} --第二阶段3只
_M.Teams = {}
_M.RecoveStaffs = {} --已使用过复活的员工（策划说同一阶段同个员工只能复活一次）
_M.DieStaffs = {} --已死亡的员工（每个boss都不一样）
_M.BossList = {}

_M.ActionPoint = 0--行动点
_M.ActionBuy = 0--行动点购买次数
_M.RecoveTime = 0 --恢复时间
_M.isRecoveTick = false
_M.RecoveHandle = nil 
_M.SelectHero = nil
_M.isFighting = false
_M.selectBossId = 0
_M.BossPower = {}
_M.AllStageData = {}
_M.RankSelfStageData = {}
_M.RankGangStageData = {}

_M.IsOpenView = false
_M.IsGetNewUdisk = false
_M.IsGetBoss = false

function _M.Clean()
	--_M.ActivityState = false --活动开关
	--_M.StartTime = 0
	--_M.EndTime = 0
	_M.ActivityId = 1 --活动id
	_M.Phase = 1 --阶段
	_M.OpenTime = 0 --开启CD(等待中开始)
	_M.PointCD = 1000
	_M.Progress = {} --进度，列表，第二阶段有3个进度
	_M.LastUdisk = nil --剩余U盘数量，总数
	_M.Buffs = {}
	_M.lastEnmey = 0 --剩余敌人数量，第三阶段
	_M.BigBoss = {} --第二阶段3只
	_M.Teams = {}
	_M.RecoveStaffs = {} --已使用过复活的员工（策划说同一阶段同个员工只能复活一次）
	_M.DieStaffs = {} --已死亡的员工（每个boss都不一样）
	_M.BossList = {}
	
	_M.ActionPoint = 0--行动点
	_M.ActionBuy = 0--行动点购买次数
	_M.RecoveTime = 0 --恢复时间
	_M.isRecoveTick = false
	_M.RecoveHandle = nil 
	_M.SelectHero = nil
	_M.isFighting = false
	_M.selectBossId = 0
	_M.BossPower = {}
	_M.AllStageData = {}
	_M.RankSelfStageData = {}
	_M.RankGangStageData = {}
	
	_M.IsOpenView = false
	_M.IsGetNewUdisk = false
	_M.IsGetBoss = false
end

function _M.SiegeActivityStatus(data)
	_M.Clean()
	
	_M.ActivityState = data.state
	_M.ActivityId = data.actid
	_M.StartTime = data.startTime
	_M.EndTime = data.endTime

	if Csv.Siege[_M.ActivityId] ~= nil then
		_M.MaxPoint = Csv.Siege[_M.ActivityId].maxTimes
		_M.PointCD = Csv.Siege[_M.ActivityId].CD
	end

	WindowMgr.Call("UMain","RefreshTopBtns")
	if _M.ActivityState == false then
		--刷新活动图标
		WindowMgr.Call("USiegeMain","CloseView")
	end
	
	_M.CheckActivityRed()
end

function _M.SetOpenTime(data)
	_M.OpenTime = data.starttime
end

function _M.SetAcitvityPhase(_acitvityId,_phase)
	_M.ActivityId = _acitvityId --活动id
	_M.Phase = _phase --阶段
end

function _M.SetSiegeStageMsg(data)
	_M.Phase = data.phase --阶段
	
	_M.Progress = {}
	if data.progress ~= nil then
		for k,v in pairs(data.progress)do
			local _progress = {type = v.type,progressCur = v.progressCur,progressMax = v.progressMax}
			table.insert(_M.Progress,_progress)
			--_M.Progress[v.type] = _progress
		end
	end

	_M.LastUdisk = nil
	if data.lastUdisk ~= nil then
		_M.LastUdisk = {ncur = data.lastUdisk.ncur,nmax = data.lastUdisk.nmax}
	end
	
	--[[
	_M.Buffs = {}
	if data.buffs ~= nil then
		for k,v in pairs(data.buffs)do
			_M.Buffs[v.key] = v.value
			--table.insert(_M.Buffs,{key = v.key,value = v.value})
		end
	end
	--]]

	_M.lastEnmey = 0
	if data.enemy ~= nil then
		if data.enemy >= 0 then
			_M.lastEnmey = data.enemy
		end
	end

	_M.BigBoss = {}
	if data.boss ~= nil then
		for k,v in pairs(data.boss)do
			local boss = _P.BossMsg(v)
			if v.type ~= nil then
				_M.BigBoss[v.type] = boss
			else
				table.insert(_M.BigBoss,boss)
			end
		end
	end

	_M.RecoveStaffs  = {}
	if data.staffs ~= nil then
		for k,v in pairs(data.staffs)do
			_M.RecoveStaffs[v] = true
		end
	end

	_M.Teams = {}
	if data.teams ~= nil then
		for k,v in pairs(data.teams)do
			local _type = v.type
			local _bossId = v.bossId
			local _commerce = {}
			if v.commerce ~= nil then
				for k2,v2 in pairs(v.commerce)do
					table.insert(_commerce,{id = v2.key,name = v2.value})
				end
			end
			_M.Teams[_type] = {type = _type,bossId = _bossId,commerce = _commerce}
		end
	end
end

function _M.SetBuff(data)
	_M.Buffs = {}
	if data.buffs ~= nil then
		for k,v in pairs(data.buffs)do
			_M.Buffs[v.key] = v.value
		end
	end
end

function _M.SetActionPoint(data)
	_M.ActionPoint = data.action

	_M.RecoveTime = 0
	if _M.ActionPoint < _M.MaxPoint then
		_M.RecoveTime = data.lastTime + HeartBeat.ServSecond()
	end
	if data.buytimes ~= nil then
		_M.ActionBuy = data.buytimes
	end
	_P.ReduceTime()
end

function _M.SetBossList(data)
	_M.BossList = {}
	_M.IsGetBoss = false
	if data.bossList ~= nil then
		for k,v in pairs(data.bossList)do
			local boss = _P.BossMsg(v)
			table.insert(_M.BossList,boss)
		end

		if #data.bossList > 0 then
			_M.IsGetBoss = true
		end
	end
end

function _M.SetNewBuff(data)
	
	if data.buff ~= nil then
		if _M.Buffs[data.buff.key] ~= nil then
			_M.Buffs[data.buff.key] = _M.Buffs[data.buff.key] + 1
		else
			_M.Buffs[data.buff.key] = 1
		end
	end
end

function _P.ReduceTime()
	local tick = _M.RecoveTime
	if tick > 0 then
		_M.isRecoveTick = true
		_M.RecoveHandle = EventCenter.RegistCallEvent(Define.EventListenId.SecondUpdate,function (eventHandle, now)
			local _tick = _M.RecoveTime
			if _tick > 0 then
				local leftTime = _tick - HeartBeat.ServSecond()
				if leftTime <= 0 then
					_M.ActionPoint = _M.ActionPoint +1 
					if _M.ActionPoint < _M.MaxPoint then
						_M.RecoveTime = _M.PointCD + HeartBeat.ServSecond()
					else
						_M.RecoveTime = 0
					end
					WindowMgr.Call("USiegeMain", "UpdateActionPoint")
				end
			else
				_M.isRecoveTick = false
				_M.RecoveHandle = nil
				EventCenter.UnRegistCallEvent(eventHandle)
			end
		end)
	end
end

function _P.DieStaffsInBoss(staffs)
	local _staffs = {}
	if staffs ~= nil then
		for k,v in pairs(staffs)do
			table.insert(_staffs,v)
		end
	end
	return _staffs
end

function _P.BossMsg(msg)
	local boss = {}

	local _staffId = {}
	if msg.staffId ~= nil then
		for k,v in pairs(msg.staffId)do
			table.insert(_staffId,v)
		end
	end
	
	boss = {indexID = msg.indexID,
			id = msg.id,
			bossBlood = {ncur = msg.bossBlood.ncur,nmax = msg.bossBlood.nmax},
			discoverer = msg.discoverer,
			commerceId = msg.commerceId,
			type = msg.type,
			staffId = _staffId}
	return boss
end

-------------
function _M.UnlockStaff(data)
	_M.RecoveStaffs = {}
	if data.staffs ~= nil then
		for k,v in pairs(data.staffs)do
			_M.RecoveStaffs[v] = true
		end
	end

	local dieStaff = _M.DieStaffs
	if dieStaff ~= nil then
		if dieStaff[data.staffid] ~= nil then
			dieStaff[data.staffid] = nil
		end
	else
		dieStaff = {}
	end
	_M.DieStaffs = dieStaff
end

function _M.SetDieStaffs(staffs)
	local dieStaff = {}

	if staffs ~= nil then
		for k,v in pairs(staffs)do
			dieStaff[v] = true
		end
	end
	_M.DieStaffs = dieStaff
end

function _M.NewDieStaff(staffid)
	local dieStaff = _M.DieStaffs
	if dieStaff ~= nil then
		dieStaff[staffid] = true
	else
		dieStaff = {}
		dieStaff[staffid] = true
	end
	_M.DieStaffs = dieStaff
end

--每个boss有自己的员工
--v={state:1派遣，2恢复,3,无效，times}
function _M.SelectStaff()
	local staffList = MStaff.StaffTable
	
	local biggerMods = {}
	local smallerMods = {}
	local _mod = 0

	local dieStaffs = _M.DieStaffs
	
	for k,v in pairs(staffList) do
		if dieStaffs[k] then
			
		else
			_mod = v.power-_M.BossPower.ncur
			if _mod >= 0 then
				table.insert(biggerMods,{id = k,mod = _mod})
			else
				table.insert(smallerMods,{id = k,mod = _mod})
			end
		end
	end
		
	local a_csv
	local b_csv
	if #biggerMods > 0 then
		table.sort(biggerMods, function( a, b )
			a_csv = a
			b_csv = b
			return a.mod < b.mod
		end)
	
		return MStaff.GetStaffDataByID(biggerMods[1].id)
	end
	if #smallerMods > 0 then
		table.sort(smallerMods, function( a, b )
			a_csv = a
			b_csv = b
			return a.mod > b.mod
		end)

		return MStaff.GetStaffDataByID(smallerMods[1].id)
	end
	return nil
end

--------------------------------------------------------------------------

function _M.GetTreasureListByStage(stageId)
	local listData = {}
	for k,v in pairs(Csv.SiegeTreasury) do
		if v.stage == nil or v.stage == 0 or v.stage == stageId then
			listData[#listData + 1] = v
		end
	end

	return listData
end

-- 设置各阶段兑换商店、排行版领取状态数据
function _M.SetAllStageData(stageList)
	local listData = {}

	for i=1,3,1 do
		listData[i] = {stage = i,point = 0,itemList = _P.GetExchangeItems(i)}
	end
	if stageList ~= nil then
		for k,v in pairs(stageList) do
			listData[v.stage] = v
		end
	end
	
	_M.AllStageData = listData
end

function _P.GetExchangeItems(phase)
	local items = {}

	local id = _M.ActivityId * 100+phase
	local data = Csv.SiegeExchange[id]
	if data ~= nil then
		for k,v in pairs(data.shopId)do
			table.insert(items,{index = k,goodid = v,buyCount = 0})
		end
	end
	return items
end

--购买商品扣除
function _M.ReduceAllStageData(stage,_index,_goodid,_buycount)
	if _M.AllStageData[stage] ~= nil then
		local items = _M.AllStageData[stage].itemList
		if items ~= nil then
			for k,v in pairs(items)do
				if v.goodid == _goodid then
					v.buyCount = _buycount
					return
				end
			end
			table.insert(items,{index = _index,goodid = _goodid,buyCount = _buycount})
		else
			items = {}
			table.insert(items,{index = _index,goodid = _goodid,buyCount = _buycount})
		end
		_M.AllStageData[stage].itemList = items
	end
end

function _M.AddJifen(stage,jifen)
	if _M.AllStageData[stage] ~= nil then
		if _M.AllStageData[stage].point ~= nil then
			_M.AllStageData[stage].point = _M.AllStageData[stage].point + jifen
		else
			_M.AllStageData[stage].point = jifen
		end
	end
end

function _M.SetRankStage(data)
	local selfGetState = data.selfGetState
	local gangGetState = data.gangGetState

	if selfGetState ~= nil then
		for k,v in pairs(selfGetState)do
			_M.RankSelfStageData[v.key] = v.value
		end
	end
	if gangGetState ~= nil then
		for k,v in pairs(gangGetState)do
			_M.RankGangStageData[v.key] = v.value
		end
	end
	--状态通知
	WindowMgr.Call("USiegeMain", "UpdateRedPoint")
end

---------------------------------------------------------
function _M.GetBuffInfo(index)
	local buffs = _M.Buffs
	for k,v in pairs(buffs)do
		local buffData = Csv.SiegeBuff[k]
		if buffData.index == index then
			return {id = k,value = v}
		end
	end
	return nil
end

function _M.GetTeamType(commerceID)
	if commerceID == 0 then
		return 0
	end
	if _M.Teams ~= nil then
		for k,v in pairs(_M.Teams)do
			local type = v.type
			if v.commerce ~= nil then
				for k2,v2 in pairs(v.commerce)do
					if v2.id == commerceID then
						return type
					end
				end
			end
		end
	end
	return nil
end

function _M.CheckRankRed(_siege)
	local isRed = false
	if _M.RankSelfStageData[_siege] ~= nil then
		if _M.RankSelfStageData[_siege] ==  0 then
			isRed = true
		end
	end
	if _M.RankGangStageData[_siege] ~= nil then
		if _M.RankGangStageData[_siege] == 0 then
			isRed = true
		end
	end

	return isRed
end

function _M.CheckActivityRed()
	local isRed = false
	if _M.ActivityState == true then
		if Csv.Siege[_M.ActivityId] ~= nil then
			local SiegeData = Csv.Siege[_M.ActivityId]

			if SiegeData ~= nil then
				local checkBeginTime = _P.GetTargetTime(SiegeData.beginTime)
				local checkCloseTime = _P.GetTargetTime(SiegeData.endTime)
				if checkBeginTime > 0 or checkCloseTime < 0 then
					isRed = false
				else
					if not _M.IsOpenView then
						isRed = true
					else
						isRed = false
					end
				end
			else
				print("找不到对应的数据id_______",activityId)
			end
		end
	end
	CMain.UpdateRedpoint(isRed,Define.SysId.SiegeWall)
end

function _P.GetTargetTime(hour)
	local cur_time = HeartBeat.ServSecond()--os.time()
	local temp_date = os.date("*t", cur_time)
	local targetTime =  os.time({year=temp_date.year, month=temp_date.month, day=temp_date.day, hour=hour})

	return targetTime-cur_time
end

function _M.CheckOpenIng()
	if _M.ActivityState == true then
		if Csv.Siege[_M.ActivityId] ~= nil then
			local SiegeData = Csv.Siege[_M.ActivityId]

			if SiegeData ~= nil then
				local checkBeginTime = _P.GetTargetTime(SiegeData.beginTime)
				local checkCloseTime = _P.GetTargetTime(SiegeData.endTime)
				if checkBeginTime > 0 or checkCloseTime < 0 then
					return false
				else
					return true
				end
			else
				print("找不到对应的数据id_______",_M.ActivityId)
			end
		end
	end
	return false
end

function _M.GetMaxActionPoint()
	local count = 0
	local siegeData = Csv.Siege[_M.ActivityId]
	if  siegeData ~= nil then
		count = count + siegeData.buyMax
	end

	local viplevel = MPlayer.GetVip()
	if viplevel > 0 then
		local vipData = Csv.Vip[viplevel]
		if vipData ~= nil then
			count = count + vipData.ActionTimes
		end
	end
	
	return count
end

function _M.CheckGetKillBuff()
	if _M.Buffs ~= nil then
		for k,v in pairs(_M.Buffs)do
			if k == 5 then
				if v > 0 then
					return true
				end
			end
		end
	end
	return false
end

return _M
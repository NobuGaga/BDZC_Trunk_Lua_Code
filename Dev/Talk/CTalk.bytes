--@RefType [Dev.Talk.MTalk.bytes#_M]
local MTalk = JRequire "Dev.Talk.MTalk"
--@RefType [Dev.Common.CCommon.bytes#_M]
local CCommon = JRequire "Dev.Common.CCommon"
--@RefType [Dev.Main.CMain.bytes#_M]
local CMain = JRequire "Dev.Main.CMain"
local CPlayer = JRequire "Dev.Player.CPlayer"
local CFriend = JRequire "Dev.Friend.CFriend"
--@RefType [Libs.WindowMgr.WindowOpen.bytes#_M]
local WindowOpen = JRequire "Libs.WindowMgr.WindowOpen"
--@RefType [Dev.Main.CTrigger.bytes#_M]
local CTrigger = JRequire "Dev.Main.CTrigger"
local EventCenter = JRequire "Dev.EventCenter"
local MFriend = JRequire "Dev.Friend.MFriend"
--@RefType [Dev.Player.MPlayer.bytes#_M]
local MPlayer = JRequire "Dev.Player.MPlayer"
local HeartBeat = JRequire "Dev.Player.HeartBeat"
local MLogin = JRequire "Dev.Login.MLogin"
local rapidjson = require "rapidjson"

local HttpHelper = CS.Utility.HttpHelper
local HttpSession = CS.Utility.HttpSession

local _M = {times = 0}
local _P = {}

local ECmdId = {
	cTalkReq							=	1,--发起聊天			PTalk::PTalkReq
	cTalkHistoryReq						=	2,--请求聊天记录		PTalk::PHistoryTalkReq
	cOfflineMsgAck						=	3,--接收离线留言确认

	sNewTalkMsg							=	1,--新增的聊天记录	PTalk::PTalkMsg
	sTalkHistoryMsg						=	2,--聊天历史记录信息	PTalk::PTalkListMsg
	sTalkDebugMsg						=	3,--用于打印在unity控制台中 PTalk::PTalkDbgMsg
	sSysNoticeMsg						=	4,--聊天框的系统公告    PTalk::STalkListMsg
	sCorssChatDelete					=	5,--删除指定聊天记录	PTalk::SDeleteChatCross
	sOfflineMsg							=	6,--发送离线留言
	sOfflineMsgOver						=	7,--发送离线留言结束
	sTalkCrossHistoryMsg				=	8,--聊天历史记录   PTalk::PTalkMsg
}

--注册进入游戏监听
EventCenter.RegistCallEvent(Define.EventListenId.EnterGame,function( ... )
	if _M.TipsData ~= nil then
		if not WindowMgr.IsCreated("UMessage") then
			WindowMgr.Create("UMessage")
		end
		WindowMgr.Call("UMessage","ShowMsgTips",_M.TipsData)
		_M.TipsData = nil
	end
end, true)

--清空模块
function _M.ModuleClean()
	MTalk.Clean()
end

function  _M.ModuleInit( isReload )
	local send = {
		[ECmdId.cTalkHistoryReq] = "PTalk.CHistoryTalkReq",
		[ECmdId.cTalkReq] = "PTalk.CTalkReq",
		[ECmdId.cOfflineMsgAck] = "",
	}
	local recv = {
		[ECmdId.sNewTalkMsg] = 		{proto = "PTalk.PTalkMsg",			handle = _P.OnGetNewTalk},
		[ECmdId.sTalkHistoryMsg] =	{proto = "PTalk.STalkListMsg",		handle = _P.OnGetTalkList},
		[ECmdId.sTalkDebugMsg] =	{proto = "PTalk.STalkDbgMsg",		handle = _P.OnDbgMessage},
		[ECmdId.sSysNoticeMsg] =	{proto = "PTalk.STalkListMsg",		handle = _P.OnSystemListMsg},
		[ECmdId.sCorssChatDelete] =	{proto = "PTalk.SDeleteChatCross",	handle = _P.OnDeleteChatCross},
		[ECmdId.sOfflineMsg] =		{proto = "PTalk.SOfflineMsg",		handle = _P.OnOfflineMsg},
		[ECmdId.sOfflineMsgOver] =	{									handle = _P.OnOfflineMsgOver},
		[ECmdId.sTalkCrossHistoryMsg] =	{proto = "PTalk.STalkListMsg",	handle = _P.OnGetTalkList},
	}
	_M.Send = SocketMgr.Regist(Define.SysId.Talk,send,recv,isReload)
end

--接收历史聊天记录列表
function _P.OnGetTalkList(data)
	MTalk.isSending = false

	if data.talkList ~= nil then
		MTalk:HistoryTalkMsg(data.talkList)
	end
end

--接受系统消息
function _P.OnSystemListMsg(data)
	if data.talkList ~= nil then
		MTalk:HistoryTalkMsg(data.talkList)
	end
end

function _P.OnDbgMessage(data)
	local context = data.context
	if context == nil then
		context = ""
	end
	context = context .. "---------------------\n"
	for _,v in pairs(_P.CGMCommond) do
		context = context .. v.desc .. "\n"
	end 
	print(context)
end

function _P.ShowMsgTips(tipsData)
	if not WindowMgr.IsCreated("UMessage") then
		WindowMgr.Create("UMessage")
	end
	if WindowMgr.IsCreated("UPrivateTalk") and MFriend.NowPrivateFriendId == tipsData.id then
		return
	else
		WindowMgr.Call("UMessage","ShowMsgTips", tipsData)
	end
end

--接收新的聊天消息
function _P.OnGetNewTalk(data)
	if data.channel == MTalk.Channel.PrivateMsg then
		if data.from == 2 and MFriend.CheckRelation(data.sender, MFriend.RelationType.BlackList) then
			return
		end
		
		local tipsData = {}
		tipsData.funcId = Define.SysId.Talk_Private
		tipsData.id = data.sender
		tipsData.name = data.sendername
		if data.from ~= 1 then
			_P.ShowMsgTips(tipsData)
		end
		CFriend.OnPrivateTalk(data)
	else
		if MFriend.CheckRelation(data.sender, MFriend.RelationType.BlackList) then
			return
		end	

		MTalk:RefreshMsg(data)
		if data.value ~= nil and data.value ~= "" then
			if data.channel == MTalk.Channel.UnionsMsg then
				WindowMgr.Call("UCommerce", "OnTalkUpdate", data.sendername,data.value)
			else
				--红包消息不展示
				if data.redPacket == nil then
					WindowMgr.Call("UMain","OnTalkUpdate",data.sendername,data.value)
				end
			end
		elseif data.voiceIndex ~= nil and data.voiceIndex > 0 then
			if data.channel == MTalk.Channel.UnionsMsg then
				WindowMgr.Call("UCommerce", "OnTalkUpdate", data.sendername, data.voiceTime .. "\"")
			else
				--红包消息不展示
				if data.redPacket == nil then
					WindowMgr.Call("UMain","OnTalkUpdate",data.sendername, data.voiceTime .. "\"")
				end
			end
		elseif data.inviteType == 3 or data.inviteType == 4 then
			local csvInvite = Csv.TalkInvite[data.inviteType]	
			if data.channel == MTalk.Channel.UnionsMsg then
				WindowMgr.Call("UCommerce", "OnTalkUpdate", data.sendername,csvInvite.value[1])
			else
				WindowMgr.Call("UMain","OnTalkUpdate",data.sendername,csvInvite.value[1])
			end
		end	
	end
	if data.redPacket then
		WindowMgr.Call("URedEnvelopes", "RefreshView")
	end
end

-- 删除指定聊天记录
function _P.OnDeleteChatCross(data)
	-- body
end

-- 发送离线留言
function _P.OnOfflineMsg(data)
	if data ~= nil and data ~= {} and data.msgList ~= nil then
		for playerKey,playerValue in pairs(data.msgList) do
			local oneData = playerValue.talkList
			if oneData ~= nil and next(oneData.talkList) ~= nil then
				for i=#oneData.talkList,1,-1 do -- 倒序
					local msgValue = oneData.talkList[i]
					if msgValue.from == 2 and MFriend.CheckRelation(msgValue.sender, MFriend.RelationType.BlackList) then
						return
					end

					CFriend.OnPrivateTalk(msgValue)
					--聊天气泡刷新
					local tipsData = {}
					tipsData.funcId = Define.SysId.Talk_Private
					tipsData.id = msgValue.sender
					tipsData.name = msgValue.sendername
					_M.TipsData = tipsData
				end
			end
		end
	end
end

-- 发送离线留言结束
function _P.OnOfflineMsgOver(data)
	-- 发送接收信息
	_M.OfflineMsgAckReq()
end

--请求历史聊天记录(下拉刷新 ，传最小index-1)
function _M:SendTalkHistoryReq(_channel,_startIndex)
	if MTalk.isSending == true then
		return
	end
	
	MTalk.isSending = true
	_M.Send(ECmdId.cTalkHistoryReq,{channel = _channel,startindex = _startIndex})
end

function _M.SendNewTalk(_channel,_value, recvId, voiceIndex, voiceTime, recvName)
	if _channel == MTalk.Channel.SystemMsg then
		CCommon.ShowError(Csv.Text("talk_no_send_sys"))
		return
	end

	local _param = 2
	local bigItemId = Define.AssetsType.Horn --是否使用大喇叭
	if MTalk.CrossChooseID ~= nil and MTalk.CrossChooseID == bigItemId then
		_param = 1
	end
	local _isUseGold = MTalk.IsCostDiamond

	if _value ~= nil and _value ~= "" then
		if string.sub(_value, 1, 1) == '@' then
			local strTable = LuaUtil.StringSplit(string.sub(_value, 2), ' ')
			if strTable ~= nil and #strTable > 0 then
				local gmKey = strTable[1]
				local info = _P.CGMCommond[gmKey]
				if info ~= nil then
					info.func(table.unpack(strTable, 2))

					return
				end
			end
		end

		local session = HttpSession(CS.Utility.HttpRequestType.Post, GameSetting.CheckChatUrl)
		session:AppendParam("content", _value)
		session:AppendParam("servId", MPlayer.GetServerId())
		session:AppendParam("roleId", MPlayer.GetId())
		session:AppendParam("name", MPlayer.GetName())
		session:AppendParam("account", MLogin.GetAccount())
		session:AppendParam("sChannel", _channel)
		session:AppendParam("ipAddress", GameSetting.PublicIP)
		session:AppendParam("chatObject", recvName or "")
		session:AppendParam("deviceCode", GameSetting.DeviceID)
		session:AppendParam("sTime", os.date("%Y-%m-%d %H:%M:%S", HeartBeat.ServSecond()))
		session:AppendParam("appID", GameSetting.AppID)
		session:AppendParam("roleLevel", MPlayer.GetLevel())
		session:AppendParam("roleVip", MPlayer.PlayerInfo.vip)
		session:AppendParam("openID", GameSetting.Openid)
		session:AppendParam("platform", GameSetting.Platform)
		session:SetCallBack(function (isOk, param1, param2)
			if isOk then
				local retTable = rapidjson.decode(param1)
				if retTable ~= nil then
					local state = retTable.status
					if state == 0 then
						--正常
						_M.Send(ECmdId.cTalkReq,{channel = _channel,value = retTable.content,oriValue = _value, recvId = recvId,valueFlag = state,param = _param,isUseGold = _isUseGold, sign = retTable.sign })
					elseif state == 1 then
						--违法
						if _channel == MTalk.Channel.PrivateMsg then
							_M.Send(ECmdId.cTalkReq,{channel = _channel,value = "*********",oriValue = _value, recvId = recvId,valueFlag = state,param = _param,isUseGold = _isUseGold, sign = retTable.sign})
						else
							_M.Send(ECmdId.cTalkReq,{channel = _channel,value = _value,oriValue = _value, recvId = recvId,valueFlag = state,param = _param,isUseGold = _isUseGold, sign = retTable.sign})
							--[[
							local ctx = {
									index = 0,
									channel = _channel,--聊天频道  1全服 2商会 3私聊
									sender = MPlayer.GetId(),--玩家id
									sendername = MPlayer.GetName(),--玩家名称
									time = HeartBeat.ServSecond(),--时间
									value = _value,--聊天内容
									viplv = MPlayer.GetVip(),--vip等级
									titleid = MPlayer.GetTitleID(),--称号id
									gender = MPlayer.GetSex(),--性别
									headid = MPlayer.GetHeadID(), --头像id
									commerceJob = 0, --商会职务（商会频道）
							}
							--_P.OnGetNewTalk(ctx)
							--]]
						end
						-- CCommon.ShowError(Csv.Text("err_talk_filter_words"))
						-- error("send talk error, state == 1")
					else
						--敏感
						_M.Send(ECmdId.cTalkReq,{channel = _channel,value = retTable.content, recvId = recvId,valueFlag = state,oriValue = _value,param = _param,isUseGold = _isUseGold, sign = retTable.sign})
					end
				else
					error("SendNewTalk --> HttpSession retTable is empty!! url:" .. GameSetting.CheckChatUrl .. ", info:" .. param2)
				end
			else
				error("SendNewTalk --> HttpSession error!! url:" .. GameSetting.CheckChatUrl .. ", info:" .. param2)
			end
		end)
		HttpHelper.Request(session)	
	elseif voiceIndex ~= nil and voiceTime ~= nil and voiceTime > 0 then
		_M.Send(ECmdId.cTalkReq,{channel = _channel,recvId = recvId,voiceIndex=voiceIndex,voiceTime=voiceTime,valueFlag = 0,param = _param,isUseGold = _isUseGold})
	end
end

-- 接收离线留言确认
function _M.OfflineMsgAckReq()
	_M.Send(ECmdId.cOfflineMsgAck)
end

_P.CGMCommond = 
{
	redpoint = {
		desc = "@redpoint - 小红点测试 [0隐藏/1显示] [funcId] [index1] [index2] ...",
		func = function(isActive, ...)
			local isShow = true 
			if tonumber(isActive) == 0 then
				isShow = false
			end
			local tab = {}
			for _,v in pairs({...}) do
				table.insert(tab, tonumber(v))
			end
			CMain.UpdateRedpoint(isShow, table.unpack(tab) )
		end,
	},
	effect = {
		desc = "@effect - 表播放 [id]",
		func = function (effectId)
			CCommon.PlayEffect(tonumber(effectId))
		end
	},
	window = {
		desc = "@window - 打开功能界面 [id]",
		func = function (sysId)
			WindowOpen.Open(tonumber(sysId))
		end
	},
	twinkle = {
		desc = "@twinkle - 闪烁 [darkTime] [lightTime]",
		func = function (darkTime, lightTime)
			CCommon.PlayTwinkle(tonumber(darkTime), tonumber(lightTime))
		end
	},
	trigger = {
		desc = "@trigger - Trigger表调试 [id]",
		func = function (id)
			CTrigger.Trigger(tonumber(id), true)
		end
	},
	guide = {
		desc = "@guide - 引导执行 [id]",
		func = function (id)
			WindowMgr.Create("UGuide",tonumber(id))
		end
	},
	story = {
		desc = "@story - 剧情对话 [id]",
		func = function (id)
			WindowMgr.Create("UStory",tonumber(id))
		end
	},
	look = {
		desc = "@look - 大地图,公司地图的功能id [id]",
		func = function (id)
			local funcCsv = Csv.Func[tonumber(id)]
			if funcCsv ~= nil then
				if funcCsv.fid == Define.SysId.Home then
					WindowMgr.Call("UHomeMap","LookAtFunc",funcCsv.id)
				elseif funcCsv.fid == Define.SysId.World then
					WindowMgr.Call("UWorldMap","LookAtFunc",funcCsv.id)
				end
			end
		end
	},
	debug = {
		desc = "@debug - 显示测试工具",
		func = function()
			WindowMgr.Create("UMessage")
			WindowMgr.Call("UMessage","ShowDebug")
		end
	},
	flyfunc = {
		desc = "@flyfunc - 播放功能开启动画",
		func = function(id)
			WindowMgr.Call("UMain","PlayFlyFunc", tonumber(id))
		end
	},
	showspid = {
		desc = "@showspid - 打印游戏的SPID",
		func = function()
			CCommon.ShowError(GameSetting.Spid)
		end
	},
	showareaid = {
		desc = "@showareaid - 打印游戏的AreaID",
		func = function()
			CCommon.ShowError(GameSetting.AreaId)
		end
	},
	showfunclist = {
		desc = "@showfunclist - 打印游戏的SDK方法列表名",
		func = function()
			if GameSetting.SDKFuncNameList then
				local splitFunc = LuaUtil.StringSplit(GameSetting.SDKFuncNameList, ",")
				local str = ""
				for _, funcName in pairs(splitFunc) do
					if funcName then
						str = str .. funcName .. ",\n"
					end
				end
				CCommon.ShowError(str)
			else
				CCommon.ShowError("SDKFuncNameList 为空")
			end
		end
	},
}

return _M
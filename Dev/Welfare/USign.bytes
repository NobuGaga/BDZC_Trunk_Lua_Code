local WindowType = JRequire "Libs.WindowMgr.WindowType"
local CCommon = JRequire"Dev.Common.CCommon"
local MWelfare = JRequire"Dev.Welfare.MWelfare"
local CWelfare = JRequire"Dev.Welfare.CWelfare"
local SoundMgr = JRequire "Libs.Sound.SoundMgr"

local _M = Class()
local _P = {}
local _R = {}

local EFFECTID = 17

function _M:ctor(Node,effectRect)
	self._RootNode = Node
	local moudle = JGuiManager.GetMoudle(self._RootNode, "M_Sign_View", WindowType.UI, 0)
	self.mMoudle = moudle
	self.mEffectRect = effectRect

	local content = moudle:Get("Content")
	self.mScrollView = moudle:Get("scrollView")
	self.mContent = content

	_P.ShowSignItems(self)
end

function _P.ShowSignItems(self)
	local content = self.mContent

	local signDay = MWelfare.SignDay
	local signData = Csv.Sign

	local itemTab = {}
	local hang = math.floor(signDay/3)
	if signDay%3 >0 then
		hang = hang +1
	end
	local min = 1
	local max = 9
	if hang > 2 then
		min = (hang - 1)*3 -2
		max = (hang + 1)*3
	end
	
	for k,v in pairs(signData) do
		if k >= min and k<= max then
			local item = _P.CreatSignItem(self,content,v)
			itemTab[k] = item
		end
	end

	self.mItemTab = itemTab

	self.mMoudle.SelfRect:AddOnTime(function(...)
		_P.MoveToSelectItem(self)
	end,nil,0.03)
end

function _P.MoveToSelectItem(self)
	local ItemTab = self.mItemTab
	local content = self.mContent
	local scrollView =  self.mScrollView

	local SHeight = scrollView.SizeDelta.y --视图高度
	local itemID = MWelfare.SignDay
	for k,v in pairs(ItemTab) do
		if k == itemID then
			local itemPosY = v.SelfRect.LocalPosition.y
			local itemSizeY = v.SelfRect.SizeDelta.y
			local moveTo = -itemPosY
			if moveTo >= content.SizeDelta.y-itemSizeY then
				moveTo = content.SizeDelta.y-SHeight
			end
			content.LocalPosition = Vector2(content.LocalPosition.x,moveTo)

			-- local moudleRect = v.SelfRect
			-- local itemPosY = moudleRect.LocalPosition.y
			-- local itemSizeY = moudleRect.SizeDelta.y

			-- local moveTo = -(itemPosY+SHeight/2)
			-- if moveTo < 0 then
			-- 	moveTo = 0
			-- elseif moveTo >= SHeight+itemSizeY/2 then
			-- 	moveTo = SHeight+itemSizeY/2
			-- end
			
			-- content.LocalPosition = Vector2(content.LocalPosition.x,moveTo)
			-- print("------------itemPosY:", itemPosY, " SHeight:", SHeight, " moveTo:", -(itemPosY+SHeight/2), " itemSizeY:", itemSizeY, " SHeight+itemSizeY/2:", SHeight+itemSizeY/2, moveTo)
		end
	end
end

function _P.CreatSignItem(self,parent,data)
	local moudle = JGuiManager.GetMoudle(parent,"M_Sign_Item", WindowType.UI, 10)
	local moudleRect = moudle.SelfRect
	moudleRect.SpriteName = "fl_027"
	
	local bg = moudle.SelfRect
	-- local rewardRect = moudle:Get("rewardRect")
	local dayText = moudle:Get("DayText")
	local dayLeftText = moudle:Get("leftText")
	local dayRightText = moudle:Get("rightText")
	local getImg = moudle:Get("getImg")
	local dark = moudle:Get("dark")
	local getBtn = moudle:Get("C_Btn_a")
	local getBtnText = moudle:Get("C_text")

	getImg.Activity = false
	dark.Activity = false

	dayText.Text = data.desc
	dayLeftText.Text = data.descLeft
	dayRightText.Text = data.descRight
	
	getBtnText.Text = Csv.Text("welfare_sign_get")
	bg.SpriteName = "fl_065"

	if data.id == MWelfare.SignDay then
			-- rewardRect.Activity = true
			getBtn.Activity = true
			getBtn.RaycastTarget = true
			bg.SpriteName = "fl_065"
			getBtn.IsGray = false
			dark.Activity = false

		if MWelfare.isSign == true then
			getImg.Activity = true
			-- rewardRect.Activity = false
			getBtn.Activity = false
			dark.Activity = true
		end
	else
		if data.id > MWelfare.SignDay then
			-- rewardRect.Activity = true
			dark.Activity = false

			getBtn.Activity = true
			getBtn.RaycastTarget = false
			getBtn.IsGray = true
		elseif data.id < MWelfare.SignDay then
			-- rewardRect.Activity = false
			dark.Activity = true
			getImg.Activity = true
			getBtn.Activity = false
		end
	end

	local itembg1 = moudle:Get("item_1")
	local itemIcon1 = moudle:Get("itemIcon_1")
	local itemCount1 = moudle:Get("itemCount_1")
	local itembg2 = moudle:Get("item_2")
	local itemIcon2 = moudle:Get("itemIcon_2")
	local itemCount2 = moudle:Get("itemCount_2")

	local rewardDatas = data.reward

	for i = 1,2,1 do
		if rewardDatas[i] ~= nil then
			if #rewardDatas[i] >= 2 then
				local itemData = Csv.Item[rewardDatas[i][1]]
				
				local itembg = moudle:Get("item_"..i)
				local itemIcon = moudle:Get("itemIcon_"..i)
				local itemCount = moudle:Get("itemCount_"..i)
				local itemLight = moudle:Get("light_"..i)
				
				itembg.SpriteName = itemData.colorIcon
				itemIcon.SpriteName = itemData.icon
				itemCount.Text = rewardDatas[i][2]

				itemLight.Activity = true
				CCommon.CreateItemLight(itemLight, Define.SysId.Welfare_Sign, nil, itemData.color)

				itembg:AddOnButton(function()
					SoundMgr.Play(10001)
					CCommon.ShowItemTips(itemData.id)
				end)
			end
		end
	end

	if data.id == MWelfare.SignDay then
		if MWelfare.isSign == false then
			getBtn:AddOnButton(function(...)
				SoundMgr.Play(10001)
				CWelfare.ReqSign()
			end)
		end
	end

	return moudle
end

function _M:RefreshSign(data)
	if data.success == true then
		local signDay = MWelfare.SignDay
		local moudle = self.mItemTab[signDay]
		if moudle ~= nil then
			local getImg = moudle:Get("getImg")
			-- local rewardRect = moudle:Get("rewardRect")
			local dark = moudle:Get("dark")
			local getBtn = moudle:Get("C_Btn_a")
			SoundMgr.Play(10004)
			CCommon.CreateEffect(moudle.SelfRect,EFFECTID,Vector2(261,-0.1))
			moudle.SelfRect:AddOnTime(function(...)
				if MWelfare.isSign == true then
					getImg.Activity = true
					-- rewardRect.Activity = false
					getBtn.Activity = false
					dark.Activity = true

					_P.ShowRewardFly(self,signDay)
				end
			end,nil,0.1)

			-- for i = 1,2,1 do
			-- 	local itemLight = moudle:Get("light_"..i)
			-- 	itemLight.Activity = false
			-- end
		end
	end
end

function _P.ShowRewardFly(self,id)
	local rewardDatas = Csv.Sign[id].reward
	local parent = self.mItemTab[id].SelfRect

	local delay = 0
	if parent ~= nil and rewardDatas ~= nil then
		for k,v in pairs(rewardDatas) do
			delay = delay +0.2

			CCommon.ShowFlyItem(self.mEffectRect, v[1], v[2],delay, parent.RootCanvasPos+Vector2(0,-80))
		end
	end
end

function _M:Destroy()
	local moudle = self.mMoudle
	if moudle ~= nil then
		moudle:Destroy()
	end
end

return _M
-- 奇遇后续事件界面
local WindowBase = JRequire "Libs.WindowMgr.WindowBase"
local WindowType = JRequire "Libs.WindowMgr.WindowType"
local CCommon = JRequire "Dev.Common.CCommon"
local SoundMgr = JRequire "Libs.Sound.SoundMgr"
local TabGroup = JRequire "Dev.Common.TabGroup2"
local HeartBeat = JRequire "Dev.Player.HeartBeat"
local MActivity = JRequire "Dev.Activity.MActivity"
local CActivity = JRequire "Dev.Activity.CActivity"
local MStaff = JRequire "Dev.Staff.MStaff"
local MPlayer = JRequire "Dev.Player.MPlayer"

local GTE_EFFECT_ID = 5
local _M = Class(WindowBase)
local _P = {}
local _R = {}

local ADVCOUNTTIME = Csv.Const(Define.Const.AdventureEvent)[10]
local ADVSHOPLIMIT = Csv.Const(Define.Const.AdventureEvent)[5]
local ADVREWARDLIMIT = Csv.Const(Define.Const.AdventureEvent)[13]

function _M:Dispatch(funcName, ...)
	local fun = _R[funcName]
	if fun ~= nil then 
		fun(self, ...)
	end
end

function _M:OnCreate(data)
	local moudle = self:CreateMoudle(self._RootNode, "M_Adventure_Follow")
	self.mMoudle = moudle

	local closeBtn = moudle:Get("C_Back_Btn")
	closeBtn:AddOnButton(function ( ... )
		SoundMgr.Play(10002)
		self:Destroy()
	end, nil, 1.2)
	local BtnRule = moudle:Get("C_Full_Help_Btn")
	BtnRule:AddOnButton(function ( ... )
		SoundMgr.Play(10001)
		WindowMgr.Create("URuleTips",Define.SysId.Adventure)
	end, nil, 1.2)

	self.mData = data
	self.content = moudle:Get("Content")
	self.vipBtn = moudle:Get("Vip")
	self.vipBtn:AddOnButton(function(...)
		SoundMgr.Play(10002)
		--打开充值界面
			WindowMgr.Create("URecharge")
		-- end
	end, nil, 1.2)
	moudle:Get("UpVip").Text = Csv.Text("adventure_follow_vip")
	--Table标签控制
	local colorLight = Color(255/255,225/255,75/255,1)
	local colorDefault = Color(0/255,195/255,255/255,1)
	local tabHandle = TabGroup.new(function (funcId)
		_P.OnChoose(self, funcId)
	end, "yth_023", "yth_023_2",nil,nil,nil,nil,nil,nil,colorDefault,colorLight)

	tabHandle:Add(1, moudle:Get("toggle_1"), moudle:Get("C_text_1"), Csv.Text("adventure_follow_1"))
	tabHandle:Add(2, moudle:Get("toggle_2"), moudle:Get("C_text_2"), Csv.Text("adventure_follow_2"))
	tabHandle:Choose(1)
	self.tabHandle = tabHandle
	MActivity.AdventureFollowLastChoose = 1
	-- print("time:",HeartBeat.ServSecond())
	moudle:Get("C_Text_0").Text = Csv.Text("adventure_follow_title")

	MActivity.AdventureShopRed = false
	CActivity.ReqUpdateRed(self.mData.actId, Define.SysId.Adventure)
end

function _P.OnChoose(self, funcId)
	MActivity.AdventureFollowLastChoose = funcId
	if funcId == 1 then
		local vip = MPlayer.GetVip()
		local extraTime = Csv.Vip[vip].adventureSubCount
		local leftTime = ADVSHOPLIMIT + extraTime - self.mData.shopEventtimes
		self.mMoudle:Get("cishu").Text = Csv.Text("adventure_follow_count", {num=leftTime.."/"..ADVSHOPLIMIT + extraTime})
		self.mMoudle:Get("Tips").Text = ""
		_P.CreateEventList(self)
	elseif funcId == 2 then
		self.mMoudle:Get("cishu").Text = ""
		self.mMoudle:Get("Tips").Text = Csv.Text("adventure_follow_count2", {num=ADVREWARDLIMIT})
		_P.CreateRewardList(self)
	end
	_P.UpdateRed(self)
end

function _P.CreateRewardList(self)
	self.content:DestroyChildren()
	self.itemTab = {}
	local eventListData = _P.GetActiveEventList(self,2)
	for k,v in pairs(eventListData) do
		local item = _P.AddItemToContent(self,self.content,v, 2)
		self.itemTab[v.eventsIndex] = item
	end

end

function _P.CreateEventList(self)
	self.content:DestroyChildren()
	self.itemTab = {}
	_P.ClearTimer(self)
	self.timerTab = {}
	local eventListData = _P.GetActiveEventList(self,1)
	for k,v in pairs(eventListData) do
		local item = _P.AddItemToContent(self,self.content,v, 1)
		self.itemTab[v.eventsIndex] = item
	end
end

function _P.GetActiveEventList(self, funId)
	local eventList = {}
	if self.mData.shopEventList == nil then return end
	for k,v in pairs(self.mData.shopEventList) do
		if funId == 1  and v.type == funId then
			if v.triggerTime + ADVCOUNTTIME > HeartBeat.ServSecond()  and self.mData.state.lefttime > HeartBeat.ServSecond() then
				table.insert(eventList, v)
			end
		elseif funId == 2 and v.type == funId then
			table.insert(eventList, v)
		end
	end
	return eventList
end

function _P.AddItemToContent(self,content,data, type)
	local moudle = JGuiManager.GetMoudle(content,"M_Adventure_FollowItem", WindowType.UI, 10)

	local isSelf = data.playerInfo.playerId == MPlayer.GetId()
	if type == 1 then
		_P.OnUpdateTime(self, moudle:Get("TimeText"), data.triggerTime + ADVCOUNTTIME, data)--ADVCOUNTTIME
		local t = moudle.SelfRect:AddOnUpdate(function()
			_P.OnUpdateTime(self, moudle:Get("TimeText"), data.triggerTime + ADVCOUNTTIME, data)
		end, nil, 1)
		table.insert(self.timerTab, t)
	end

	local subEventCsv = Csv.AdventureSubEvent[data.eventId]

	self.joinBtn = moudle:Get("C_Btn_a")
	self.joinBtn:AddOnButton(function ( ... )
		SoundMgr.Play(10001)
		_P.OnClickIcon(data.playerlist,data.eventId)
	end, nil, 0.9)
	self.goBtn = moudle:Get("Btn1")
	self.goBtn:AddOnButton(function ( ... )
		SoundMgr.Play(10001)
		if type == 1 then
			local vip = MPlayer.GetVip()
			local extraTime = Csv.Vip[vip].adventureSubCount
			local lefttime = Csv.Const(20101)[5] + extraTime - self.mData.shopEventtimes
			if lefttime <= 0 then
				CCommon.ShowError(Csv.Text("adventure_main_limit"))
			else
				_P.OnClickSendPlayer(self,data)
			end
		else
			_P.OnGetReward(self,data)
		end
	end, nil, 0.9)

	self.getText = moudle:Get("new_text")
	local csvVip = Csv.Vip[data.playerInfo.vip]
	if csvVip ~= nil and csvVip.imgBord ~= nil then
		moudle:Get("OutBox").SpriteName = csvVip.imgBord
		moudle:Get("Num").SpriteNameAutoScale = "friend_num_"..data.playerInfo.vip
	else
		moudle:Get("OutBox").Activity = false
	end
	moudle:Get("head").SpriteName = MPlayer.GetOtherHeadIcon(data.playerInfo.icon,data.playerInfo.sex) --客户端暂时先写死。。
	moudle:Get("TitleText").Text = data.playerInfo.name.."("..Csv.Text("adventure_player_level"..data.playerInfo.job)..")"
	moudle:Get("C_text").Text = Csv.Text("adventure_follow_p")
	moudle:Get("Name").Text = subEventCsv.title
	moudle:Get("Info").Text = subEventCsv.desc
	-- moudle:Get("name").Text = data.playerInfo.staffName
	moudle:Get("number1").Text = data.playerInfo.level
	moudle:Get("ManNum").Text = Csv.Text("adventure_follow_num")
	local playerlist = data.playerlist
	local num = ((playerlist == nil and 0) or #playerlist)
	moudle:Get("ManNum1").Text = num.."/"..subEventCsv.joinCount
	moudle:Get("Reward").Text = Csv.Text("adventure_follow_reward")
	moudle:Get("Condition").Text = Csv.Text("adventure_follow_con")
	moudle:Get("redPoint").Activity = type == 2
	local isJoin = _P.IsJoin(self,data.playerlist)

	if type == 1 then
		self.goBtn.IsGray = isJoin
		self.goBtn.RaycastTarget = not isJoin
		if isJoin then
			self.getText.Text = Csv.Text("adventure_joined")
		else
			self.getText.Text = Csv.Text("adventure_join_gang")
		end
	else
		self.getText.Text = Csv.Text("adventure_follow_lj")
	end
	local content = moudle:Get("content")
	if subEventCsv.joinReward ~= nil then
		local len = #subEventCsv.joinReward
		for i=1, len do
			local iid = subEventCsv.joinReward[i][1]
			local num = subEventCsv.joinReward[i][2]
			CCommon.CreateItem(content,iid,nil,{num = num},nil)
		end
	end
	if isSelf and type == 1 then
		moudle:Get("Tips").Text = Csv.Text("adventure_follow_self")
		moudle:Get("Btn1").Activity = false
	end

	self.condition1 = moudle:Get("Condition1")
	self.condition2 = moudle:Get("Condition2")
	local condition = data.eventInfo
	--任意员工
	if condition.params == -1 then
		self.condition1.Text = Csv.Text("adventure_follow_con1",{staff = Csv.Text("adventure_any_staff")})
	else
		self.condition1.Text = Csv.Text("adventure_follow_con1",{staff = MStaff.GetStaffName(condition.params)})
	end

	--类型
	self.condition2.Text = Csv.Text("adventure_follow_con2",{attr = Csv.Text("adventure_staff_type"..condition.type),num = condition.val})

	return moudle
end

function _P.ClearTimer(self)
	if self.timerTab ~= nil then
		for k, v in pairs(self.timerTab) do
			if v ~= nil then
				v:Destroy()
			end
		end
		self.timerTab = nil
	end
end

function _P.OnUpdateTime(self, timeText, nextTime, data)
	local time = nextTime - HeartBeat.ServSecond()
	if nextTime ~= nil and time > 0 then
		timeText.Text = Csv.Text("adventure_left_time",{text = LuaUtil.GetTimeHMS(time)})
	else
		--TODO:移除这个事件
		_P.RemoveEvent(self,data.eventsIndex)
	end
end

function _P.OnClickIcon(data,eventId)
	if data ~= nil then
		WindowMgr.Create("UAdventurePlayerList", data,eventId)
	end
end

function _P.OnClickSendPlayer(self,data)
	WindowMgr.Create("UAdventureSendPlayer",data,self.mData.staffshoplist,self.mData)
end

function _P.OnGetReward(self,data)
	CActivity.ReqAdvGetReward(self.mData.actId,data.eventsIndex)
end

function _R.OnJoinCallBack(self,data)
	--重新刷下数据
	self.mData = MActivity.GetFromId(data.actId)
	_P.OnChoose(self, MActivity.AdventureFollowLastChoose)
end

function _R.UpdateEvent(self,data)
	self.mData = MActivity.GetFromId(data.actId)
	_P.OnChoose(self, MActivity.AdventureFollowLastChoose)
end

function _P.IsJoin(self,datalist)
	for k,v in pairs(datalist) do
		if v.playerId == MPlayer.GetId() then
			return true
		end
	end
	return false
end

function _R.OnRewardCallBack(self,data)
	if data ~= nil then
		SoundMgr.Play(10004)
		local animRect = self.itemTab[data.eventIndex]:Get("Btn1")
		self.itemTab[data.eventIndex]:Get("redPoint").Activity = false
		self.itemTab[data.eventIndex]:Get("new_text").Text = ""
		local delayCount = 0
		animRect.SpriteName = ""
		CActivity.ReqUpdateRed(data.actId, Define.SysId.Adventure)
		CCommon.CreateEffect(animRect, GTE_EFFECT_ID, nil, function( ... ) 
			for k,v in pairs(data.reward) do
				CCommon.ShowFlyItem(animRect, v.id, v.count, delayCount)
				delayCount = delayCount + 0.2
			end
			--移除事件
			self.itemTab[data.eventIndex]:Get("new_text"):AddOnTime(function()
				_P.RemoveEvent(self,data.eventIndex)
			end, nil, 0.6)
			
		end)
	end
end

function _P.RemoveEvent(self,eventsIndex)
	--移除参与事件
	if self.mData.shopEventList ~= nil then
		self.mData.shopEventList[eventsIndex] = nil
	end
	--刷新显示
	_P.OnChoose(self, MActivity.AdventureFollowLastChoose)
end

function _P.UpdateRed(self)
	self.mMoudle:Get("redPoint").Activity = #_P.GetActiveEventList(self, 2) > 0
end

function _M:BeforeDestroy()
	if self.tabHandle ~= nil then
		self.tabHandle:delete()
		self.tabHandle = nil
	end
end

return _M